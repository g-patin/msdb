{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome !","text":"<p>Welcome on the documentation website of the material science database (msdb) python package: an open source and FAIR database framework for the analyses of materials. You will find on this website information and tutorials on how to install and use the msdb package.</p>"},{"location":"#new-users","title":"New users","text":"<p>If you are a new user, look at the Get started section. It provides all the basic information you need to know about the package.</p>"},{"location":"#contributions","title":"Contributions","text":"<p>We are welcoming any contributions, comments (positive and negative), ideas, etc. This is important to improve the quality of the package and its documentation. If you have encountered a bug or spotted an error, please don't hesitate to contact us by email (see below).</p>"},{"location":"#contacts","title":"Contacts","text":"<p>Email: microfading@mailo.com </p>"},{"location":"#what-is-this-package-about","title":"What is this package about ?","text":"<p>This package has been designed for users that perform scientific analyses on materials. It aims to provide a generic working environment that can be used to store information about the objects, the materials, the analytical methods, the users, etc. The idea is to have a central location - a folder on your computer - with several txt and csv files for which users will be able to perform basic data management operations : create, read, update, delete (CRUD).   </p>"},{"location":"#what-does-this-package-provide","title":"What does this package provide ?","text":"<p>The package provides two main resources:</p> <ul> <li> <p>database files: create txt and csv files to store any relevant information regarding your analytical tasks.</p> </li> <li> <p>CRUD functions: a set of functions to create, read, update, and delete the content of the database files.</p> </li> </ul>"},{"location":"#website-structure","title":"Website structure","text":"<p>The documentation follows the structure described by Daniele Procida, which organizes documentation into four different groups (Tutorials, How-to, Explanations, References).</p>"},{"location":"#cite-package","title":"Cite package","text":"<p>If you are using this package for a publication, please cite the package as follows: </p> <ul> <li>Patin, G., 2025, material science database, Python Package, v.0.0.4, https://github.com/g-patin/msdb</li> </ul>"},{"location":"create-DB-class-instance/","title":"Create an MFT class instance","text":"<p>The functions provided by the msdb package only work on an instance of a <code>DB</code> class. The creation of an instance of a <code>DB</code> class is a two-steps procedure and is described below:</p>"},{"location":"create-DB-class-instance/#1-create-the-database-files","title":"1. Create the database files","text":"<p>In this step, you will create the database files inside a given folder on your local computer. You will need to pass in two values:</p> <ol> <li> <p>The name of your database.  </p> </li> <li> <p>The absolute path of the folder on your local computer where the database files will be created. </p> </li> </ol> <pre><code>import msdb\n</code></pre> <pre><code># When running this command, a ipywdidget will appear (see below) inside which you will be able to pass in information\nmsdb.DB(new_db=True)\n</code></pre> <p> </p> <p></p> <p>Ipywidgets to be filled when creating the databases files</p>"},{"location":"create-DB-class-instance/#2-create-db-class-instance","title":"2. Create DB class instance","text":"<p>Create the instance using the name of the database.</p> <pre><code>db = msdb.DB(db_name='test')\ndb\n</code></pre> <pre>\nMicrofading data class - Number of files = 5\n</pre>"},{"location":"databases-files/","title":"Databases files","text":"<p>In this section, you will learn more about the databases files.</p> <p>Table 1. Description of the databases files.</p> File names Description devices.txt set the observer and illuminant default values institutions.txt set the use of databases (True or False) lamps.txt set the unit of the light dose (MJ/m2, Mlxh, or sec) object_creators.txt set the path of the databases files should be stored object_materials.txt set the light exposure conditions default values objects_info.csv set the observer and illuminant default values object_techniques.txt set the use of databases (True or False) object_types.txt set the unit of the light dose (MJ/m2, Mlxh, or sec) projects_info.csv set the path of the databases files should be stored users_info.txt set the light exposure conditions default values white_standards.txt set the light exposure conditions default values <p> </p> <p>To upgrade the package, open a terminal and enter the following command</p> <pre><code>pip install --upgrade msdb\n</code></pre>"},{"location":"get-started/","title":"Get started","text":"<p>In this section, we will give you all the essential information to correctly start using the <code>msdb</code> package.</p>"},{"location":"get-started/#1-create-databases-files","title":"1. Create databases files","text":"<p>If this is the first time that you are using the <code>msdb</code> be package, you will need to create the databases files. The latter consist of txt and csv files in which you will be able to store information about the analyses of materials. Check the databases files section for more information about it.</p> <p>To create the databases files, follow the lines of code given below. </p> <pre><code># first import the msdb package\nimport msdb\n</code></pre> <pre><code># execute this line to display the ipywidgets showed below.\n# fill in the database name and folder location\n# click on the \"Create databases\" button\nmsdb.DB(new_db=True)\n</code></pre> <p> </p> <p></p> <p>Ipywidgets to be filled when creating the databases files</p> <p></p> <p>Ipywidgets filled with the databases information</p> <p> </p>"},{"location":"get-started/#2-central-role-of-the-db-class","title":"2. Central role of the <code>DB</code> class","text":"<p>Once you have created databases and registered them in the msdb config file, you will be able to create an instance of the <code>DB</code> class, passing the name of a registered database as argument (see code below). Most of the functions provided by the package can only be accessed through the <code>DB</code> class. </p> <pre><code>import msdb\n</code></pre> <pre><code>db = msdb.DB(db_name='test')\n# where 'test' is the name of a database that I previously created\n</code></pre> <p> </p>"},{"location":"get-started/#3-four-keywords-function-add-get-update-delete","title":"3. Four keywords function: add, get, update, delete","text":"<p>Once you have created an instance of the <code>DB</code> class, you can access the functions. The name of each function starts by a verb: add, get, update, or delete. Enter one of the verbs and use the auto-completion tool (<code>Tab</code> button) to display a list of available functions.</p> <p></p> <p>List of all the \"get\" functions.</p> <p>All the functions can be run without passing any arguments, this behaviour will output the default values. For some functions, you have the possibility to pass in some arguments that it will enable you to adjust the output according to your needs. For example, running the function <code>get_projects</code>without any arguments will return information about all the registered projects. But you can ask the function to return only the projects that match some requirements. For instance, in the exemple illustrated below, only the projects lead by Gauthier Patin (GP) and for which microfading (MFT) and photos were performed are being returned. </p> <p></p> <p>Play with the argument values of functions </p>"},{"location":"get-started/#4-use-the-docstrings","title":"4. Use the docstrings","text":"<p>Whenever you will use functions from the <code>msdb</code> package, you will always be able to access the docstrings. These contain valuable information that will help you to adequately use the functions. To open the dosctrings, you have two possibilites:</p> <ol> <li> <p>Write the name of a function (without parentheses) followed by a question mark (see example below).</p> <p></p> <p>Opening a docstring with a question mark.</p> </li> <li> <p>Write the name of a function (with parentheses), place the cursor inside the parentheses and press <code>Ctrl + Caps Lock</code> (see example below).</p> </li> </ol> <p></p> <p>Opening a tooltip docstring window.</p>"},{"location":"installation/","title":"Installation","text":"<p>To install the latest version of the msdb package, open a terminal and enter the following command:</p> <pre><code>pip install msdb\n</code></pre> <p>If you wish to install a specific version of the msdb package, the version number can be added to the pip command as illustrated in the following example:</p> <pre><code>pip install msdb==0.0.4\n</code></pre> <p> </p> <p>To upgrade the package, open a terminal and enter the following command</p> <pre><code>pip install --upgrade msdb\n</code></pre>"},{"location":"package-usage/","title":"Package usage","text":"<p>The package can be used with or without databases.</p> <ul> <li> <p>If you just want to process and visualize a few microfading analyses then you might not need databases.</p> </li> <li> <p>if you are seeking to establish a long-term microfading framework where you want to connect information about the objects with microfading analyses, then you  might be interested in using databases.</p> </li> </ul>"},{"location":"references/","title":"References","text":""},{"location":"references/#commands","title":"Commands","text":""},{"location":"references/#msdb-management","title":"msdb management","text":"<ul> <li><code>create_DB [folder]</code> - Create two empty databases (projects and objects).</li> <li><code>get_creators</code> - Retrieve a list of names corresponding to the persons that created the microfaded objects.</li> <li><code>get_DB [db]</code> - Retrieve the databases.</li> <li><code>get_institutions</code> - Retrieve a list of institutions owning the microfaded objects.</li> <li><code>get_path_DB</code> - Retrieve the absolute path of the folder where the databases are stored.</li> <li><code>get_persons</code> - Retrieve a list of persons that performed microfading analyses.</li> <li><code>add_new_institution</code> - Add a new institution to the database.</li> <li><code>add_new_person</code> - Add a new person to the list of persons doing microfading analyses.</li> <li><code>add_new_project</code> - Add a new project to the database.</li> <li><code>add_new_object</code> - Add a new object to the database.</li> <li><code>update_DB_project [new, old]</code> - Modify or add a new parameter to the project database.</li> <li><code>update_DB_object [new, old]</code> - Modify or add a new parameter to the object database.</li> </ul>"},{"location":"references/#db-class","title":"DB class","text":""},{"location":"references/#msdb.msdb.DB","title":"<code>DB</code>","text":"Source code in <code>src/msdb/msdb.py</code> <pre><code>class DB:\n\n    def __init__(self, name_db:Optional[str] = None, new_db:Optional[bool] = False, config_file:Optional[str] = Path(__file__).parent / 'db_config.json') -&gt; None:\n        \"\"\"Instantiate a DB class object.\n\n        Parameters\n        ----------\n\n        name_db : Optional[str]\n            Name of the databases, by default None\n            When None, it retrieves the first databases info registered in the db_config.json file\n\n        new_db : Optional[bool]\n            Whether to create a new database ecosystem, by default False\n\n        config_file : Optional[str|Path]\n            Location of the configuration file, by default Path(__file__).parent/'db_config.json'\n\n        \"\"\"\n        self.name_db = name_db        \n        self.new_db = new_db\n        self.config_file = config_file\n\n        # Check whether the db_config.json file exists\n        self._init_config()\n\n        # Create a new databases if required\n        if self.new_db:\n\n            existing_dbs = list(self.get_db_config().keys())\n\n            if self.name_db not in existing_dbs:\n                self.create_db(name_db=self.name_db)\n                return\n            else:\n                print(f'The database name you entered ({self.name_db}) has already been created. Either set the \"new_db\" parameter to False or choose a different name_db.')\n\n        # Check whether databases were created\n        if len(self.get_db_config()['databases']) == 0:\n            print('There are no databases registered. Create a database to start using the functions available through the DB class.')\n            return None\n\n        # Select the first database name if name_db is None\n        if name_db == None:\n            self.name_db = list(self.get_db_config()['databases'].keys())[0]\n\n        else:\n            if not self.name_db in list(self.get_db_config()['databases'].keys()):\n                print(f'The name_db value you entered ({self.name_db}) has not been registered. Either set the \"new_db\" parameter to True or select a registered database name.')\n\n            else:\n                self.folder_db = Path(self.get_db_config()['databases'][self.name_db]['path_folder'])\n\n\n    def _init_config(self):\n        \"\"\"Check whether the db_config.json exists.\n        \"\"\"\n\n        if not os.path.exists(self.config_file):\n            print(f'The file {self.config_file} has been deleted ! Please re-install the msdb package.')\n            return None\n\n\n    def add_creator(self):\n        \"\"\"Record a new object creator in the object_creators.txt file\n        \"\"\"\n\n        # Function to update the text file if the initials are unique\n        def update_text_file(name, surname):            \n\n            df_creators = self.get_creators()\n            df_creators = pd.concat([df_creators, pd.DataFrame(data=[name,surname], index=['name','surname']).T])\n            df_creators = df_creators.sort_values(by='surname')\n            df_creators.to_csv(self.folder_db/'object_creators.txt',index=False)\n\n            print(f\"Added: {surname}, {name}\")\n\n        # Define ipython widgets\n        name_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a name (optional)',\n            description='Name',               \n        )\n\n        surname_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a surname',\n            description='Surname',             \n        )\n\n        recording = ipw.Button(\n            description='Record creator',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the creator info in the objet_creators.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            name = name_widget.value.strip()\n            surname = surname_widget.value.strip()\n\n            with button_record_output:\n\n                if surname: # ensure the surname field is complete\n                    update_text_file(name, surname)\n                else:\n\n                    print(\"Please enter at least a surname.\")\n\n\n        recording.on_click(button_record_pressed)\n\n        display(surname_widget,name_widget)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_device(self):\n        \"\"\"Record a new device in the devices.txt file\n        \"\"\"\n\n        # Function to update the text file if the initials are unique\n        def update_text_file(id, name, description):  \n\n            df_devices = self.get_devices()\n\n            existing_devices = df_devices['ID'].values\n\n            if id in existing_devices:\n                print(f'The ID you entered ({id}) has already been attributed to another device:')   \n                print(df_devices[df_devices['ID'] == id])  \n\n            else:\n                df_devices = pd.concat([df_devices, pd.DataFrame(data=[id,name,description], index=['ID','name','description']).T])\n                df_devices = df_devices.sort_values(by='ID')\n                df_devices.to_csv(self.folder_db / 'devices.txt',index=False)\n\n                print(f\"Device added: {id}, {name}\")\n\n        # Define ipython widgets\n        wg_id = ipw.Text(        \n            value='',\n            placeholder='Enter an ID',\n            description='Device ID',               \n        )\n\n        wg_name = ipw.Text(        \n            value='',\n            placeholder='Enter name',\n            description='Device name',             \n        )\n\n        wg_description = ipw.Text(        \n            value='',\n            placeholder='Briefly describe the device purpose (Optional)',\n            description='Device description',             \n        )\n\n        recording = ipw.Button(\n            description='Record device',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the device info in the devices.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            id = wg_id.value.strip()\n            name = wg_name.value.strip()\n            description = wg_description.value.strip()\n\n            with button_record_output:\n\n                if id and name: # ensure the id and name fields are complete\n                    update_text_file(id, name, description)\n                else:                    \n                    print(\"Please enter at least an ID and a name.\")\n\n\n        recording.on_click(button_record_pressed)\n\n        display(wg_id,wg_name,wg_description)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_institution(self):        \n        \"\"\"Record a new institution in the institutions.txt file\n        \"\"\"\n\n        # Function to get the existing initials from the file\n        def get_existing_acronyms(file_path):\n            try:\n                df_institutions = self.get_institutions()\n                existing_acronyms = df_institutions['acronym'].values                \n                return existing_acronyms\n            except FileNotFoundError:\n                # If the file does not exist, return an empty set\n                return set()\n\n        # Function to update the text file if the initials are unique\n        def update_text_file(file_path, name, acronym):\n            # Check if the acronym already exists\n            existing_acronyms = get_existing_acronyms(file_path)\n\n            if acronym in existing_acronyms:\n                print(f\"Acronym '{acronym}' already exists. Please use a different acronym.\")\n            else:\n                df_institutions = self.get_institutions()\n                df_institutions = pd.concat([df_institutions, pd.DataFrame(data=[name,acronym], index=['name','acronym']).T])\n                df_institutions = df_institutions.sort_values(by='name')\n                df_institutions.to_csv(self.folder_db/'institutions.txt',index=False)\n\n                print(f\"Added: {name} : {acronym}\")\n\n        # Define ipython widgets\n        name_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a name',\n            description='Name',               \n        )\n\n        acronym_widget = ipw.Text(        \n            value='',\n            placeholder='Enter an acronym',\n            description='Acronym',             \n        )\n\n        recording = ipw.Button(\n            description='Record institution',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the person info in the persons.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            name = name_widget.value.strip()            \n            acronym = acronym_widget.value.strip()\n\n            with button_record_output:\n\n                if name and acronym: # ensure all fields are filled\n                    update_text_file(self.folder_db / 'institutions.txt', name, acronym)\n                else:\n\n                    print(\"Please enter all fields (Name, Acronym)\")\n\n        recording.on_click(button_record_pressed)\n\n        display(name_widget,acronym_widget)\n        display(ipw.HBox([recording, button_record_output]))       \n\n\n    def add_material(self, name:Optional[str] = None):\n        \"\"\"Register a new object material.\n\n        Returns\n        -------\n        ipywdigets\n            fill in the name of the material to be registered. \n        \"\"\"\n\n        # Define ipython widgets\n\n        wg_material = ipw.Text(        \n            value=name,\n            placeholder='Enter a name',\n            description='Material',               \n        )    \n\n        recording = ipw.Button(\n            description='Record material',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_record_output = ipw.Output()\n\n\n        # Define the path of the users database file\n\n        databases_folder = self.folder_db\n        materials_filename = 'object_materials.txt'\n\n\n        # Define some functions\n        def update_text_file(new_value):\n\n            # Check if the material has already been registered \n            existing_materials = self.get_materials()  \n\n            if new_value in existing_materials:\n                print(f'The material \"{new_value}\" has already been registered.')\n\n            else:\n                existing_materials.append(str(new_value).lower())         \n                existing_materials = sorted(existing_materials)\n\n                with open(databases_folder / materials_filename, 'w') as f:\n                        f.write('\\n'.join(existing_materials))\n\n                f.close()            \n\n                print(f\"Material added: {new_value}\")\n\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the type name in the object_materials.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n            material_name = wg_material.value.strip()\n\n            with button_record_output:            \n\n                if material_name: # ensure all fields are filled\n                    update_text_file(material_name)\n                else:                    \n                    print(\"Please enter a material name\")\n\n\n        # Link the widget button to the function\n        recording.on_click(button_record_pressed)\n\n        # Display the widgets\n        display(wg_material)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_method(self):        \n        \"\"\"Record a new analytical method in the analytical_methods.txt file\n        \"\"\"\n\n        # Function to get the existing acronym from the file\n        def get_existing_acronyms():\n            try:\n                df_methods = self.get_methods()\n                existing_acronyms = df_methods['acronym'].values                \n                return existing_acronyms\n            except FileNotFoundError:\n                # If the file does not exist, return an empty set\n                return set()\n\n        # Function to update the text file if the initials are unique\n        def update_text_file(acronym, name):\n            # Check if the acronym already exists\n            existing_acronyms = list(get_existing_acronyms())\n\n            if acronym in existing_acronyms:\n                print(f\"Acronym '{acronym}' already exists. Please use a different acronym.\")\n            else:\n                df_methods = self.get_methods()\n                df_methods = pd.concat([df_methods, pd.DataFrame(data=[acronym, name], index=['acronym', 'name']).T])\n                df_methods = df_methods.sort_values(by='acronym')\n                df_methods.to_csv(self.folder_db/'analytical_methods.txt',index=False)\n\n                print(f\"Added: {acronym} : {name}\")\n\n        # Define ipython widgets\n        name_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a name',\n            description='Name',               \n        )\n\n        acronym_widget = ipw.Text(        \n            value='',\n            placeholder='Enter an acronym',\n            description='Acronym',             \n        )\n\n        recording = ipw.Button(\n            description='Record method',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the person info in the persons.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            name = name_widget.value.strip()            \n            acronym = acronym_widget.value.strip()\n\n            with button_record_output:\n\n                if name and acronym: # ensure all fields are filled\n                    update_text_file(acronym,name)\n                else:\n\n                    print(\"Please enter all fields (Name, Acronym)\")\n\n        recording.on_click(button_record_pressed)\n\n        display(acronym_widget,name_widget)\n        display(ipw.HBox([recording, button_record_output])) \n\n\n    def add_object(self):\n        \"\"\"Add a new object in the objects_info.csv file\"\"\"\n\n        db_projects = self.get_db(db='projects')\n        projects_list = ['noProject'] + list(db_projects['project_id'].values)\n\n        db_objects = self.get_db(db='objects')\n        existing_columns = list(db_objects.columns)\n\n        creators_file = pd.read_csv(self.folder_db / 'object_creators.txt')\n        creators = [f'{x[0]}, {x[1]}' if isinstance(x[1],str) else x[0] for x in creators_file.values]\n\n        types_file = open(self.folder_db / r'object_types.txt', 'r').read()\n        types = types_file.split(\"\\n\")        \n\n        techniques_file = open(self.folder_db / r'object_techniques.txt', 'r').read()\n        techniques = techniques_file.split(\"\\n\")        \n\n        materials_file = open(self.folder_db  / r'object_materials.txt', 'r').read()\n        materials = materials_file.split(\"\\n\")        \n\n        owners_file = pd.read_csv(self.folder_db / 'institutions.txt')\n        owners = tuple(owners_file['name'].values)\n\n\n        # Define ipython widgets\n\n        project_id = ipw.Combobox(\n            #value = ' ',\n            placeholder='Project',\n            options = projects_list,\n            description = 'Project id',\n            ensure_option=False,\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"30px\"),\n            style=style,\n        )\n\n        object_id = ipw.Text(        \n            value='',\n            placeholder='Inv. N\u00b0',\n            description='Id',\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"30px\"),\n            style=style,   \n        )\n\n        object_category = ipw.Dropdown(\n            options=['heritage','model','reference','sample'],\n            value='heritage',\n            description='Category',\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"30px\"),\n            style=style,\n        )    \n\n        object_creator = ipw.Combobox(\n            placeholder = 'Surname, Name',\n            options = creators,\n            description = 'Creator',\n            ensure_option=False,\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"30px\"),\n            style=style,\n        ) \n\n        object_date = ipw.Text(\n            value='',\n            placeholder='Enter a date',\n            description='Date',\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"30px\"),\n            style=style,         \n        )  \n\n        object_owner = ipw.Combobox(\n            placeholder = 'Enter an institution/owner',\n            options = owners,\n            description = 'Object owner',\n            ensure_option = False,\n            disabled = False,\n            layout=Layout(width='99%',height=\"30px\"),\n            style = style\n\n        )\n\n        object_title = ipw.Textarea(        \n            value='',\n            placeholder='Enter the title',\n            description='Title',\n            disabled=False,\n            layout=Layout(width='99%',height=\"100%\"),\n            style=style,   \n        )  \n\n        object_name = ipw.Text(        \n            value='',\n            placeholder='Enter a short object (no space, no underscore)',\n            description='Name',\n            disabled=False,\n            layout=Layout(width='99%',height=\"30px\"),\n            style=style,   \n        )\n\n        object_type = ipw.Combobox(\n            placeholder = 'General classification',\n            options = types,\n            description = 'Type',\n            ensure_option=False,\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"30px\"),\n            style=style,\n        )\n\n        object_technique = ipw.SelectMultiple(            \n            options = techniques,\n            description = 'Technique',\n            ensure_option=False,\n            rows=10,\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"180px\"),\n            style=style,\n        )   \n\n        object_material = ipw.SelectMultiple(            \n            options = materials,\n            description = 'Materials',\n            ensure_option=False,\n            rows=10,\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"180px\"),\n            style=style,\n        )\n\n        recording = ipw.Button(\n            description='Record object',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',\n            #layout=Layout(width=\"50%\", height=\"30px\"),\n            #style=style,\n            #icon='check' # (FontAwesome names without the `fa-` prefix)\n        )        \n\n\n        button_record_output = ipw.Output()       \n\n\n        object_color = ipw.Combobox(\n            description = 'Color',\n            placeholder = 'Optional',\n            ensure_option=False,\n            disabled=False,\n            layout=Layout(width=\"78%\", height=\"30px\"),\n            style=style,\n        )        \n\n        # Combobox for additional parameters (if any)\n        additional_params = [col for col in existing_columns if col not in [\n            'project_id',\n            'object_id',\n            'object_category',\n            'object_type',\n            'object_technique',\n            'object_title',\n            'object_name',\n            'object_creator',\n            'object_date',\n            'object_owner',\n            'object_material']]\n\n        additional_param_widgets = {}\n        for param in additional_params:\n            additional_param_widgets[param] = ipw.Combobox(\n                description=param,\n                options=[],  # You can populate this with options if needed\n                placeholder=f\"Enter {param} value\",\n                style=style\n            )        \n\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the object info in the object database file (objects_info.csv).\n            \"\"\"\n\n            with button_record_output:\n                button_record_output.clear_output(wait=True)\n\n                db_objects_file = self.folder_db / 'objects_info.csv'\n                db_objects = pd.read_csv(db_objects_file)            \n\n                creators = [f'{x[0]}, {x[1]}' if isinstance(x[1],str) else x[0] for x in self.get_creators().values]\n\n                owners_file = open(self.folder_db  / r'institutions.txt', 'r').read().splitlines()\n                owners = owners_file             \n\n                types_file = open(self.folder_db / r'object_types.txt', 'r').read().splitlines()\n                types = types_file       \n\n\n                new_row = pd.DataFrame({                    \n                    'project_id': project_id.value,\n                    'object_id' : object_id.value,                   \n                    'object_category': object_category.value, \n                    'object_type': object_type.value, \n                    \"object_technique\": \"_\".join(object_technique.value),\n                    \"object_title\": object_title.value,\n                    'object_name': object_name.value,\n                    'object_creator': object_creator.value,                        \n                    'object_date': object_date.value,\n                    'object_owner': object_owner.value,\n                    'object_material': \"_\".join(object_material.value)},                       \n                    index=[0] \n                    ) \n\n\n                if object_creator.value not in creators:                    \n\n                    creator_surname = object_creator.value.split(',')[0].strip()\n                    try:\n                        creator_name = object_creator.value.split(',')[1].strip()\n                    except IndexError:\n                        creator_name = ''\n\n                    df_creators = pd.read_csv(self.folder_db / 'object_creators.txt')\n                    df_creators = pd.concat([df_creators, pd.DataFrame(data=[creator_surname,creator_name], index=['surname','name']).T])\n                    df_creators.to_csv(self.folder_db / 'object_creators.txt', index=False)\n\n\n                if object_type.value not in types:\n                    types.append(str(object_type.value))\n                    types = sorted(types, key=str.casefold)\n\n                    with open(self.folder_db / 'object_types.txt', 'w') as f:\n                        f.write('\\n'.join(types).strip())\n                    f.close()                                 \n\n\n                # Add additional parameters to the new record\n                for param, widget in additional_param_widgets.items():\n                    new_row[param] = widget.value\n\n                db_objects_new = pd.concat([db_objects, new_row],)\n                db_objects_new.to_csv(db_objects_file, index= False)\n                print(f'Object {object_id.value} added to database.')\n\n        recording.on_click(button_record_pressed)\n\n        display(\n            ipw.HBox([\n                ipw.VBox([object_id,project_id,object_creator,object_date,object_owner,object_category,object_type,object_title, object_name], layout=Layout(width=\"30%\", height=\"370px\"), style=style,),\n                ipw.VBox([object_technique,object_material], layout=Layout(width=\"30%\", height=\"370px\"), style=style),\n                ipw.VBox([object_color, *[widget for widget in additional_param_widgets.values()]], layout=Layout(width=\"30%\", height=\"370px\"), style=style)\n                ]))\n\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_user(self):\n        \"\"\"Record a new person in the users_info.txt file\n        \"\"\"\n\n        # Function to get the existing initials from the file\n        def get_existing_initials(file_path):\n            try:\n                df_persons = self.get_users()\n                existing_initials = df_persons['initials']                \n                return existing_initials\n            except FileNotFoundError:\n                # If the file does not exist, return an empty set\n                return set()\n\n        # Function to update the text file if the initials are unique\n        def update_text_file(file_path, name, surname, initials):\n            # Check if the initials already exist\n            existing_initials = get_existing_initials(file_path)\n\n            if initials in existing_initials:\n                print(f\"Initials '{initials}' already exist. Please use different initials.\")\n            else:\n                df_persons = self.get_users()\n                df_persons = pd.concat([df_persons, pd.DataFrame(data=[name,surname,initials], index=['name','surname','initials']).T])\n                df_persons = df_persons.sort_values(by='name')\n                df_persons.to_csv(self.folder_db/'users_info.txt',index=False)\n\n                print(f\"Added: {name}, {surname} : {initials}\")\n\n\n        # Define ipython widgets\n        name_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a name',\n            description='Name',               \n        )\n\n        surname_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a surname',\n            description='Surname',             \n        )\n\n        initials_widget = ipw.Text(        \n            value='',\n            placeholder='Enter initials in capital letters',\n            description='Initials',             \n        )\n\n        recording = ipw.Button(\n            description='Record user',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the person info in the users_info.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            name = name_widget.value.strip()\n            surname = surname_widget.value.strip()\n            initials = initials_widget.value.strip()\n\n            with button_record_output:\n\n                if name and surname and initials: # ensure all fields are filled\n                    update_text_file(self.folder_db / 'users_info.txt', name, surname, initials)\n                else:\n\n                    print(\"Please enter all fields (Name, Surname, Initials)\")\n\n\n\n        recording.on_click(button_record_pressed)\n\n        display(name_widget,surname_widget,initials_widget)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_project(self, project_id:Optional[str] = None):\n        \"\"\"Add a new project in the projects_info.csv file\"\"\"\n\n        db_projects = self.get_projects()\n        existing_columns = list(db_projects.columns)\n        institutions = tuple(self.get_institutions()['name'].values)    \n        persons = tuple([f'{x[0]}, {x[1]}' for x in self.get_users()[['name','surname']].values])    \n        methods = list(self.get_methods()['acronym'].values)\n\n        # Define ipython widgets\n        project_Id = ipw.Text(        \n            value=project_id,\n            placeholder='Type something',\n            description='Project Id',\n            disabled=False,\n            layout=Layout(width=\"95%\", height=\"30px\"),\n            style=style,   \n        )\n\n        institution = ipw.Combobox(\n            placeholder = 'Enter an institution',\n            options = institutions,              \n            description = 'Institution',\n            ensure_option=False,\n            disabled=False,\n            layout=Layout(width=\"95%\", height=\"30px\"),\n            style=style,\n        )\n\n        startDate = ipw.DatePicker(\n            description='Start date',\n            disabled=False,\n            layout=Layout(width=\"90%\", height=\"30px\"),\n            style=style,\n        )\n\n        endDate = ipw.DatePicker(\n            description='End date',\n            disabled=False,\n            layout=Layout(width=\"90%\", height=\"30px\"),\n            style=style,\n        )\n\n        project_leader = ipw.Combobox(\n            placeholder = 'Enter a name or a surname',\n            options=persons,            \n            description='Project leader',\n            disabled=False,\n            layout=Layout(width=\"90%\", height=\"30px\"),\n            style=style,\n        )\n\n        coresearchers = ipw.SelectMultiple(\n            value=['none'],\n            options=['none'] + list(persons), \n            description='Co-researchers',\n            rows=10,\n            disabled=False,\n            layout=Layout(width=\"90%\", height=\"135px\"),\n            style=style,\n        )\n\n        wg_methods = ipw.SelectMultiple(\n            value=['none'],\n            options=['none'] + list(methods), \n            description='Methods',\n            rows=10,\n            disabled=False,\n            layout=Layout(width=\"90%\", height=\"170px\"),\n            style=style,\n        )\n\n\n        recording = ipw.Button(\n            description='Record project',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',\n            #layout=Layout(width=\"50%\", height=\"30px\"),\n            #style=style,\n            #icon='check' # (FontAwesome names without the `fa-` prefix)\n        )\n\n\n        project_keyword = ipw.Text(\n            placeholder = 'Describe project in 1 or 2 words',\n            description = 'Project keywords',\n            disabled = False,\n            layout=Layout(width=\"95%\", height=\"30px\"),\n            style = style,\n        )\n\n        # Combobox for additional parameters (if any)\n        additional_params = [col for col in existing_columns if col not in ['project_id', 'institution', 'start_date', 'end_date', 'project_leader', 'co-researchers', 'keywords', 'methods']]\n        additional_param_widgets = {}\n        for param in additional_params:\n            additional_param_widgets[param] = ipw.Combobox(\n                description=param,\n                options=[],  # You can populate this with options if needed\n                placeholder=f\"Enter {param} value\"\n            )\n\n        button_record_output = ipw.Output()\n\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the project info in the project database file (projects_info.csv).\n            \"\"\"\n\n            with button_record_output:\n                button_record_output.clear_output(wait=True)\n\n                Projects_DB_file = self.folder_db / 'projects_info.csv'\n                Projects_DB = pd.read_csv(Projects_DB_file)  \n                persons = self.get_users()\n\n                institutions = pd.read_csv(self.folder_db / 'institutions.txt')['name'].values\n\n\n                project_leader_name = project_leader.value.split(',')[0].strip()\n                project_leader_surname = project_leader.value.split(',')[1].strip()\n                project_leader_initials = persons.query(f'name == \"{project_leader_name}\" and surname == \"{project_leader_surname}\"')['initials'].values[0]\n\n                if coresearchers.value[0] == 'none':\n                    coresearchers_initials = 'none'\n\n                else:\n                    coresearchers_initials = []\n                    for coresearcher in [x for x in coresearchers.value]:\n                        coresearcher_name = coresearcher.split(',')[0].strip()\n                        coresearcher_surname = coresearcher.split(',')[1].strip()\n                        coresearcher_initials = persons.query(f'name == \"{coresearcher_name}\" and surname == \"{coresearcher_surname}\"')['initials'].values[0]\n                        coresearchers_initials.append(coresearcher_initials)\n\n\n                    coresearchers_initials = '-'.join(coresearchers_initials)\n\n                if wg_methods.value == 'none':\n                    methods_acronym = 'none'\n\n                else:\n                    methods_acronym = \"_\".join(wg_methods.value)\n\n                new_row = pd.DataFrame({'project_id':project_Id.value,\n                        'institution':institution.value, \n                        'start_date':startDate.value, \n                        'end_date':endDate.value,\n                        'project_leader':project_leader_initials,  \n                        'co-researchers':coresearchers_initials,                       \n                        'keywords':project_keyword.value,\n                        'methods':methods_acronym},                                               \n                        index=[0] \n                        )  \n\n                if institution.value not in institutions:                       \n                    institutions.append(str(institution.value))         \n                    institutions = sorted(institutions)   \n\n                    with open(self.folder_db / 'institutions.txt', 'w') as f:\n                        f.write('\\n'.join(institutions).strip())  \n                    f.close()                \n\n\n                # Add additional parameters to the new record\n                for param, widget in additional_param_widgets.items():\n                    new_row[param] = widget.value\n\n                Projects_DB_new = pd.concat([Projects_DB, new_row],)\n                Projects_DB_new.to_csv(Projects_DB_file, index= False)\n                print(f'Project {project_Id.value} added to database.')\n\n        recording.on_click(button_record_pressed)\n\n\n        # Display the widgets\n        display(ipw.HBox([\n            ipw.VBox([\n                ipw.HBox([\n                    ipw.VBox([project_Id,institution, project_keyword, startDate, endDate],layout=Layout(width=\"60%\", height=\"100%\")),\n                    ipw.VBox([project_leader, coresearchers],layout=Layout(width=\"60%\", height=\"100%\")),\n                    ipw.VBox([wg_methods],layout=Layout(width=\"60%\", height=\"100%\"))\n                    ]),                \n                ], layout=Layout(width=\"70%\", height=\"100%\")),                        \n            ], layout=Layout(width=\"100%\", height=\"100%\"))\n        ) \n\n        display(*[widget for widget in additional_param_widgets.values()])\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_technique(self):\n        \"\"\"Register a new object technique.\n\n        Returns\n        -------\n        ipywdigets\n            fill in the name of the technique to be registered. \n        \"\"\"\n\n        # Define ipython widgets\n\n        technique_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a name',\n            description='Technique',               \n        )    \n\n        recording = ipw.Button(\n            description='Record technique',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_record_output = ipw.Output()\n\n\n        # Define the path of the users database file\n\n        databases_folder = self.folder_db\n        techniques_filename = 'object_techniques.txt'\n\n\n        # Define some functions    \n\n        def get_existing_techniques(file_path):\n            try:\n                return self.get_techniques()        \n\n            except FileNotFoundError:            \n                return\n\n\n        def update_text_file(file_path, name):\n\n            # Check if the technique has already been registered        \n            existing_techniques = get_existing_techniques(file_path)\n\n            if technique_widget.value in existing_techniques:\n                print(f'The technique {technique_widget.value} has already been registered.')\n\n            else:\n                existing_techniques.append(str(technique_widget.value).lower())         \n                existing_techniques = sorted(existing_techniques)\n\n                with open(databases_folder / techniques_filename, 'w') as f:\n                        f.write('\\n'.join(existing_techniques))\n\n                f.close()            \n\n                print(f\"Technique added: {name}\")\n\n\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the technique name in the object_techniques.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            name = technique_widget.value.strip()\n\n\n            with button_record_output:            \n\n                if name: # ensure all fields are filled\n                    update_text_file(databases_folder / techniques_filename, name)\n                else:                    \n                    print(\"Please enter all fields (Name)\")\n\n\n        # Link the widget button to the function\n        recording.on_click(button_record_pressed)\n\n        # Display the widgets\n        display(technique_widget)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_type(self, name:Optional[str] = None):\n        \"\"\"Register a new object type.\n\n        Returns\n        -------\n        ipywdigets\n            fill in the name of the type to be registered. \n        \"\"\"\n\n        # Define ipython widgets\n\n        wg_type = ipw.Text(        \n            value=name,\n            placeholder='Enter a name',\n            description='Type',               \n        )    \n\n        recording = ipw.Button(\n            description='Record type',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_record_output = ipw.Output()\n\n\n        # Define the path of the users database file\n\n        databases_folder = self.folder_db\n        types_filename = 'object_types.txt'\n\n\n        # Define some functions\n        def update_text_file(new_value):\n\n            # Check if the type has already been registered        \n            existing_types = self.get_types()\n\n            if new_value in existing_types:\n                print(f'The type \"{new_value}\" has already been registered.')\n\n            else:\n                existing_types.append(str(new_value).lower())         \n                existing_types = sorted(existing_types)\n\n                with open(databases_folder / types_filename, 'w') as f:\n                        f.write('\\n'.join(existing_types))\n\n                f.close()            \n\n                print(f\"Type added: {new_value}\")\n\n\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the type name in the object_types.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n            type_name = wg_type.value.strip()\n\n            with button_record_output:            \n\n                if type_name: # ensure all fields are filled\n                    update_text_file(type_name)\n                else:                    \n                    print(\"Please enter a type name\")\n\n\n        # Link the widget button to the function\n        recording.on_click(button_record_pressed)\n\n        # Display the widgets\n        display(wg_type)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_white_standard(self):\n        \"\"\"Record a new white standard in the white_standards.txt file\n        \"\"\"\n\n        # Function to get the existing standards ID from the file\n        def get_existing_standards():\n            try:\n                df_standards = self.get_white_standards()\n                existing_standards = df_standards['ID'].values                \n                return existing_standards\n            except FileNotFoundError:\n                # If the file does not exist, return an empty set\n                return set()\n\n        # Function to update the text file if the ID is unique\n        def update_text_file(ID, description):\n            # Check if the ID already exists\n            existing_standards = get_existing_standards()\n\n            if ID in existing_standards:\n                print(f\"ID '{ID}' already exists. Please use a different ID.\")\n            else:\n                df_standards = self.get_white_standards()\n                df_standards = pd.concat([df_standards, pd.DataFrame(data=[ID,description], index=['ID','description']).T])\n                df_standards = df_standards.sort_values(by='ID')\n                df_standards.to_csv(self.folder_db/'white_standards.txt',index=False)\n\n                print(f\"Added: {ID} : {description}\")\n\n        # Define ipython widgets\n        wg_ID = ipw.Text(        \n            value='',\n            placeholder='Enter an ID',\n            description='ID', \n            layout=Layout(width=\"40%\", height=\"30px\"),\n            style=style,              \n        )\n\n        wg_description = ipw.Text(        \n            value='',\n            placeholder='Enter a brief description',\n            description='Description', \n            layout=Layout(width=\"40%\", height=\"30px\"),\n            style=style,            \n        )\n\n        recording = ipw.Button(\n            description='Record standard',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the standard info in the white_standards.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            id = wg_ID.value.strip()            \n            description = wg_description.value.strip()\n\n            with button_record_output:\n\n                if id and description: # ensure all fields are filled\n                    update_text_file(id, description)\n                else:                    \n                    print(\"Please enter all fields (ID, description)\")\n\n        recording.on_click(button_record_pressed)\n\n        display(wg_ID,wg_description)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def create_db(self, name_db:Optional[bool] = None , path_folder:Optional[str] = None):   \n\n\n        # Define the python widgets\n\n        wg_name_db = ipw.Text(\n            description='Database Name',\n            placeholder='Enter a name (without space)',\n            value=name_db,\n            layout=Layout(width=\"50%\", height=\"30px\"),\n            style=style\n        )\n\n        wg_path_folder = ipw.Text(\n            description='Folder location',\n            value=path_folder,\n            layout=Layout(width=\"50%\", height=\"30px\"),\n            style=style\n        )\n\n        recording = ipw.Button(\n            description='Create databases',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_record_output = ipw.Output()\n\n\n        # Define the function when pressing the button\n\n        def button_record_pressed(b):\n            \"\"\"\n            Create the databases.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            with open(self.config_file, \"r\") as f:\n                config = json.load(f)\n\n            # Existing databases\n            databases = config[\"databases\"]\n\n            # Update config with user data\n            databases[wg_name_db.value] = {'path_folder':wg_path_folder.value}\n            config['databases'] = databases            \n\n            # Save the updated config back to the JSON file\n            with open(self.config_file, \"w\") as f:\n                json.dump(config, f, indent=4)\n\n            # Create the project database\n            db_project = pd.DataFrame(columns=['project_id','institution','start_date','end_date','project_leader','co-researchers','keywords', 'methods'])            \n            db_project.to_csv(Path(wg_path_folder.value) / 'projects_info.csv', index=False)\n\n\n            # Create the object database\n            db_object = pd.DataFrame(columns=['object_id','object_category','object_type','object_technique','object_title','object_name','object_creator','object_date','object_owner','object_material','colorants','colorants_name','binding','ratio','thickness_um','color','status','project_id'])\n            db_object.to_csv(Path(wg_path_folder.value) / 'objects_info.csv', index=False)\n\n\n            # Create several text files\n            with open(Path(wg_path_folder.value) / 'analytical_methods.txt', 'w') as f:                \n                f.write(\"Macro-XRF\\n\")\n                f.write(\"Raman\\n\")\n                f.write(\"XRD\\n\")\n                f.write(\"XRF\\n\")\n\n            with open(Path(wg_path_folder.value) / 'devices.txt', 'w') as f:\n                f.write('Id,name,description,process_function\\n')\n\n            with open(Path(wg_path_folder.value) / 'white_standards.txt', 'w') as f:\n                f.write('ID,description\\n')            \n\n            with open(Path(wg_path_folder.value) / 'object_creators.txt', 'w') as f:\n                f.write('surname,name')\n\n            with open(Path(wg_path_folder.value) / 'object_techniques.txt', 'w') as f:\n                f.write(\"China ink\\n\")\n                f.write(\"acrylinc\\n\")\n                f.write(\"aquatinte\\n\")\n                f.write(\"black ink\\n\")\n                f.write(\"black pencil\\n\")\n                f.write(\"chalk\\n\")\n                f.write(\"charcoal\\n\")\n                f.write(\"monotypie\\n\")\n                f.write(\"dye\\n\")\n                f.write(\"felt-tip ink\\n\")\n                f.write(\"frescoe\\n\")\n                f.write(\"gouache\\n\")\n                f.write(\"ink\\n\")\n                f.write(\"linoleum print\\n\")\n                f.write(\"lithograh\\n\")\n                f.write(\"mezzotinte\\n\")\n                f.write(\"oil paint\\n\")\n                f.write(\"pastel\\n\")\n                f.write(\"tin-glazed\\n\")\n                f.write(\"watercolor\\n\")\n                f.write(\"wood block print\\n\")        \n\n            with open(Path(wg_path_folder.value) / 'object_types.txt', 'w') as f:            \n                f.write(\"banknote\\n\")\n                f.write(\"book\\n\")\n                f.write(\"BWS\\n\")       \n                f.write(\"ceramic\\n\")\n                f.write(\"colorchart\\n\")\n                f.write(\"drawing\\n\")\n                f.write(\"notebook\\n\")\n                f.write(\"paint-out\\n\")\n                f.write(\"painting\\n\")\n                f.write(\"photograph\\n\")\n                f.write(\"print\\n\")\n                f.write(\"sculpture\\n\")\n                f.write(\"seals\\n\")\n                f.write(\"spectralon\\n\")\n                f.write(\"tapistry\\n\")\n                f.write(\"textile\\n\")\n                f.write(\"wallpainting\\n\")\n            with open(Path(wg_path_folder.value) / 'object_materials.txt', 'w') as f:\n                f.write(\"blue paper\\n\")\n                f.write(\"canvas\\n\")\n                f.write(\"cardboard\\n\")\n                f.write(\"ceramic\\n\")\n                f.write(\"coloured paper\\n\")\n                f.write(\"cotton\\n\")\n                f.write(\"Japanese paper\\n\")\n                f.write(\"none\\n\")\n                f.write(\"opacity chart\\n\")\n                f.write(\"paper\\n\")\n                f.write(\"parchment\\n\")\n                f.write(\"rag paper\\n\")\n                f.write(\"stone\\n\")\n                f.write(\"transparent paper\\n\")\n                f.write(\"wax\\n\")\n                f.write(\"wood\\n\")\n                f.write(\"woodpulp paper\\n\")\n                f.write(\"wool\\n\")            \n\n            with open(Path(wg_path_folder.value) / 'institutions.txt', 'w') as f:\n                f.write('name,acronym')\n\n            with open(Path(wg_path_folder.value) / 'users_info.txt', 'w') as f:\n                f.write('name,surname,initials')          \n\n\n            # Print output message\n            with button_record_output:\n                print(f'The database {wg_name_db.value} was created and recorded in the db_config.json file.')\n                print(f'The database files have been created in the following folder: {wg_path_folder.value}')\n\n\n        recording.on_click(button_record_pressed)\n\n        display(ipw.VBox([wg_name_db,wg_path_folder]))\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def get_creators(self):\n        if (Path(self.folder_db) / 'object_creators.txt').exists():\n            df_creators = pd.read_csv(Path(self.folder_db) / 'object_creators.txt')\n            return df_creators\n\n        else:\n            print(f'The file {Path(self.folder_db) / \"object_creators.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n            return\n\n\n    def get_db(self, db:Optional[str] = 'all'):\n\n        if (Path(self.folder_db) / 'projects_info.csv').exists():\n            db_projects = pd.read_csv(Path(self.folder_db) / 'projects_info.csv')\n        else:\n            print(f'The DB_projects.csv file is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n            return\n\n        if (Path(self.folder_db) / 'objects_info.csv').exists():        \n            db_objects = pd.read_csv(Path(self.folder_db) / 'objects_info.csv')\n        else:\n            print(f'The DB_objects.csv file is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n            return\n\n        if db == 'all':\n            return db_projects, db_objects\n\n        elif db == 'projects':\n            return db_projects\n\n        elif db == 'objects':\n            return db_objects\n\n\n    def get_db_config(self):\n        \"Retrieve the content of the db_config.json file\"\n\n        with open(self.config_file, 'r') as file:\n            config = json.load(file)\n            return config  \n\n\n    def get_users(self):\n\n        filename = 'users_info.txt'\n        if (Path(self.folder_db) / filename).exists():\n            df_persons = pd.read_csv(Path(self.folder_db) / filename)\n            return df_persons\n\n        else:\n            print(f'The file {Path(self.folder_db) / filename} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n            return\n\n\n    def get_institutions(self):\n\n        if (Path(self.folder_db) / 'institutions.txt').exists():\n            df_institutions = pd.read_csv(Path(self.folder_db) / 'institutions.txt')\n            return df_institutions\n\n        else:\n            print(f'The file {Path(self.folder_db) / \"institutions.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n            return\n\n\n    def get_devices(self):\n\n        if (Path(self.folder_db) / 'devices.txt').exists():\n            df_devices = pd.read_csv(Path(self.folder_db) / 'devices.txt')\n            return df_devices\n\n        else:\n            print(f'The file {Path(self.folder_db) / \"devices.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n            return\n\n\n    def get_materials(self):\n        \"\"\"Retrieve the object materials.\n        \"\"\"\n\n        materials_filename = 'object_materials.txt'\n\n        if not (self.folder_db / materials_filename).exists():\n            print(f'Please create an empty file called \"{materials_filename}\" in the the following folder: {self.folder_db}')\n            return\n\n        else:            \n            materials_df = pd.read_csv(self.folder_db / materials_filename, header=None)\n            materials = list(materials_df.values.flatten())              \n            return materials\n\n\n    def get_methods(self):\n        \"\"\"Retrieve the scientific methods to analyze objects.\n\n        Returns\n        -------\n        pandas dataframe\n            info about registered methods.\n        \"\"\"\n\n        databases_folder = self.folder_db\n        methods_filename = 'analytical_methods.txt'\n\n        if not (databases_folder / methods_filename).exists():\n            print(f'Please create an empty file called \"{methods_filename}\" in the the following folder: {databases_folder}')\n            return\n\n        else:\n            df_methods = pd.read_csv((databases_folder / methods_filename))            \n            return df_methods\n\n\n    def get_objects(self,object_category:Union[str,list]=None, object_type:Union[str,list]=None, object_technique:Union[str,list]=None, object_owner:Union[str,list] = None, project_id:Union[str,list] = None, object_id:Union[str,list] = None, match_all:Optional[bool]=False):\n        \"\"\"Retrieve the objects info.\n\n        Returns\n        -------\n        pandas dataframe\n            info about registered objects.\n        \"\"\"\n\n        databases_folder = self.folder_db\n        objects_filename = 'objects_info.csv'\n        df_objects = pd.read_csv((databases_folder / objects_filename)).fillna('none')\n\n        if not (databases_folder / objects_filename).exists():\n            print(f'Please create a .csv file called \"{objects_filename}\" in the the following folder: {databases_folder} ')\n            return\n\n\n        if object_category == None and object_type == None and object_technique == None and object_owner == None and project_id == None and object_id == None:\n            return df_objects\n\n        if isinstance(object_category, str):\n            object_category = [object_category]\n\n        if isinstance(object_type, str):\n            object_type = [object_type]\n\n        if isinstance(object_technique, str):\n            object_technique = [object_technique]    \n\n        if isinstance(object_owner, str):\n            object_owner = [object_owner]\n\n        if isinstance(project_id, str):\n            project_id = [project_id]\n\n        if isinstance(object_id, str):\n            object_id = [object_id]\n\n\n\n\n        df_institutions = self.get_institutions()\n        list_acronyms = df_institutions['acronym'].values\n\n        if object_owner != None:\n            object_owner = [df_institutions.query(f'acronym == \"{x}\"')['name'].values[0] if x in list_acronyms else 'none' for x in object_owner]\n            object_owner = [x for x in object_owner if x != 'none']\n\n\n\n        parameters = ['object_category','object_type','object_technique','object_owner','project_id', 'object_id']\n        input_values = [object_category, object_type, object_technique, object_owner, project_id, object_id]\n\n        filters = {}\n\n\n        for x,y in zip(parameters, input_values):\n            if y != None:\n                filters[x] = y\n\n\n        def match_criteria(row):\n            results = []\n            for col, values in filters.items():\n                if col in df_objects.columns:\n                    matches = [bool(re.search(fr'(^|_){v}(_|$)', row[col])) for v in values]\n                    results.append(all(matches) if match_all else any(matches))\n\n            return all(results) if match_all else any(results)\n\n        return df_objects[df_objects.apply(match_criteria, axis=1)]\n\n\n    def get_projects(self, PL:Union[str,list]=None, coresearchers:Union[str,list]=None, methods:Union[str,list]=None, institutions:Union[str,list] = None, project_id:Union[str,list] = None, match_all:Optional[bool]=False):\n        \"\"\"Retrieve information about the registered projects\n\n        Parameters\n        ----------\n        PL : Union[str,list], optional\n            The initials of the main researcher, by default None\n            If only one initials is entered, you may enter it as a string, otherwise use a list.\n\n        coresearchers : Union[str,list], optional\n            The initials of the co-researchers, by default None\n            If only one initials is entered, you may enter it as a string, otherwise use a list.\n\n        methods : Union[str,list], optional\n            Acronym of the method, by default None\n            If only one method is entered, you may enter it as a string, otherwise use a list.\n\n        institutions : Union[str,list], optional\n            Acronym of the institutions, by default None\n            If only one institution is entered, you may enter it as a string, otherwise use a list.\n\n        project_id : Union[str,list], optional\n            ID of the project, by default None\n            If only one ID is entered, you may enter it as a string, otherwise use a list.\n\n        match_all : Optional[bool], optional\n            Whether all the wanted queries should match, by default False\n\n        Returns\n        -------\n        pandas dataframe\n            It return the desired info about registered projects.\n        \"\"\" \n\n        databases_folder = self.folder_db\n        projects_filename = 'projects_info.csv'\n        df_projects = pd.read_csv((databases_folder / projects_filename))\n\n        if not (databases_folder / projects_filename).exists():\n            print(f'Please create a file called \"projects_info.csv\" in the the following folder: {databases_folder}')\n            return\n\n\n        if PL == None and methods == None and institutions == None and project_id == None:\n            return df_projects\n\n        if isinstance(PL, str):\n            PL = [PL]\n\n        if isinstance(coresearchers, str):\n            coresearchers = [coresearchers]\n\n        if isinstance(methods, str):\n            methods = [methods]    \n\n        if isinstance(institutions, str):\n            institutions = [institutions]\n\n\n        df_institutions = self.get_institutions()\n        list_acronyms = df_institutions['acronym'].values\n\n        if institutions != None:\n            institutions = [df_institutions.query(f'acronym == \"{x}\"')['name'].values[0] if x in list_acronyms else 'none' for x in institutions]\n            institutions = [x for x in institutions if x != 'none']\n\n\n        parameters = ['project_leader', 'co-researchers', 'methods', 'institution', 'project_id']\n        input_values = [PL, coresearchers, methods, institutions, project_id]\n\n        filters = {}\n\n        for x,y in zip(parameters, input_values):\n            if y != None:\n                filters[x] = y\n\n\n        def match_criteria(row):\n            results = []\n            for col, values in filters.items():\n                if col in df_projects.columns:\n                    matches = [bool(re.search(fr'(^|_){v}(_|$)', row[col])) for v in values]\n\n                    results.append(all(matches) if match_all else any(matches))\n\n            return all(results) if match_all else any(results)\n\n        return df_projects[df_projects.apply(match_criteria, axis=1)]\n\n\n    def get_white_standards(self):\n\n        if (Path(self.folder_db) / 'white_standards.txt').exists():\n            df_references = pd.read_csv(Path(self.folder_db) / 'white_standards.txt')\n            return df_references\n\n        else:\n            print(f'The file {Path(self.folder_db) / \"white_standards.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n            return\n\n\n    def get_techniques(self):\n        \"\"\"Retrieve the techniques used to create the objects.\n        \"\"\"\n\n        techniques_filename = 'object_techniques.txt'\n\n        if not (self.folder_db / techniques_filename).exists():\n            print(f'Please create an empty file called \"object_techniques.txt\" in the the following folder: {self.folder_db}')\n            return\n\n        else:            \n            techniques_df = pd.read_csv(self.folder_db / 'object_techniques.txt', header=None)\n            techniques = list(techniques_df.values.flatten())              \n            return techniques\n\n\n    def get_types(self):\n        \"\"\"Retrieve the object types.\n        \"\"\"\n\n        types_filename = 'object_types.txt'\n\n        if not (self.folder_db / types_filename).exists():\n            print(f'Please create an empty file called \"object_types.txt\" in the the following folder: {self.folder_db}')\n            return\n\n        else:            \n            types_df = pd.read_csv(self.folder_db / 'object_types.txt', header=None)\n            types = list(types_df.values.flatten())              \n            return types\n\n\n    def update_db_projects(self, new: str, old:Optional[str] = None):\n\n        if (Path(self.folder_db) / 'DB_projects.csv').exists():\n\n            db_projects = self.get_db(db='projects')\n            db_projects[new] = ''\n\n            if old != None:\n                if old in db_projects.columns:\n                    db_projects.drop(old, axis=1, inplace=True)\n                else:\n                    print(f'The column {old} cannot be removed because it does not exist.')\n\n            db_projects.to_csv(Path(self.folder_db) / 'DB_projects.csv',index=False)\n            print('DB_projects successfully updated.')\n\n        else:\n            print('No databases have been created yet.')\n\n\n    def update_db_objects(self, new: str, old:Optional[str] = None):\n\n        if (Path(self.folder_db) / 'DB_objects.csv').exists():\n\n            db_objects = self.get_db(db='objects')\n            db_objects[new] = ''\n\n            if old != None:\n                if old in db_objects.columns:\n                    db_objects.drop(old, axis=1, inplace=True)\n                else:\n                    print(f'The column {old} cannot be removed because it does not exist.')\n\n            db_objects.to_csv(Path(self.folder_db) / 'DB_objects.csv',index=False)\n            print('DB_projects successfully updated.')\n\n        else:\n            print('No databases have been created yet.')\n\n\n    def remove_creators(self):\n        \"\"\"Remove one of several creators from the database file.\n        \"\"\"\n\n        creators_df = self.get_creators()\n        creators_list = [f'{x[0]}, {x[1]}' if isinstance(x[1],str) else x[0] for x in creators_df.values]       \n\n        wg_creators = ipw.SelectMultiple(          \n            options=  creators_list,\n            description='Creators',\n            rows=10             \n        )\n\n        deleting = ipw.Button(\n            description='Delete creators',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the institution info in the institutions.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            creators_filename = 'object_creators.txt'\n            creators_df = self.get_creators()            \n\n            for creator in list(wg_creators.value):\n\n                if ',' in creator:\n                    surname = creator.split(',')[0].strip()\n                    name = creator.split(',')[1].strip()\n                    creators_df = creators_df.drop(creators_df[(creators_df['surname'] == surname) &amp; (creators_df['name'] == name)].index)\n\n                else:                                   \n                    creators_df = creators_df.drop(creators_df[(creators_df['surname'] == creator)].index)\n\n\n            creators_df.to_csv(self.folder_db / creators_filename, index=False)\n\n            with button_delete_output:\n                print(f'Creators deleted: {wg_creators.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(wg_creators)\n        display(ipw.HBox([deleting, button_delete_output]))  \n\n\n    def remove_devices(self, ID:Optional[str] = None):\n        \"\"\"Remove devices from the database file.\n\n        Parameters\n        ----------\n        ID : Optional[str,list], optional\n            ID of the devices, by default None\n        \"\"\"\n\n        devices_ID = list(self.get_devices()['ID'])\n\n        if ID == None:\n            ID = [devices_ID[0]]\n\n        elif isinstance(ID,str):\n            ID = [ID]\n\n\n        wg_devices = ipw.SelectMultiple(        \n            value=ID,\n            options=  devices_ID,\n            description='devices ID', \n            rows=10            \n        )\n\n\n        deleting = ipw.Button(\n            description='Delete devices',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the institution info in the institutions.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            devices_filename = 'devices.txt'\n            df_devices = self.get_devices()\n\n            for id in list(wg_devices.value):\n                df_devices = df_devices.drop(df_devices[df_devices['ID'] == id].index)\n\n            df_devices.to_csv(self.folder_db / devices_filename, index=False)\n\n            with button_delete_output:\n                print(f'Devices deleted: {wg_devices.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(wg_devices)\n        display(ipw.HBox([deleting, button_delete_output]))  \n\n\n    def remove_institutions(self, acronym:Optional[str] = None):\n        \"\"\"Remove an institution from the database file.\n\n        Parameters\n        ----------\n        acronym : Optional[str], optional\n            Acronym of the institution, by default None\n        \"\"\"\n\n        if acronym == None:\n            acronym = 'Select an acronym'\n\n        df_institutions = self.get_institutions()\n        institution_acronyms = list(df_institutions['acronym'])\n\n        if acronym not in  ['Select an acronym'] + institution_acronyms:\n            print(f'The acronym you entered \"{acronym}\" has not been registered in the database.')\n            acronym = 'Select an acronym'\n\n        wg_acronym = ipw.Dropdown(        \n            value=acronym,\n            options=  ['Select an acronym'] + institution_acronyms,\n            description='Acronym',\n            style=style,\n            layout=Layout(width=\"17%\", height=\"30px\")        \n        )\n\n        wg_institution_name = ipw.Text(\n            value='',\n            description='',\n            disabled=False         \n        )\n\n        deleting = ipw.Button(\n            description='Delete institution',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def change_acronym(change):            \n            new_acronym = change.new\n            name = df_institutions.query(f'acronym == \"{new_acronym}\"')['name'].values[0]            \n            wg_institution_name.value = name\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the institution info in the institutions.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            institutions_filename = 'institutions.txt'\n            df_institutions = self.get_institutions()\n            df_institutions = df_institutions.drop(df_institutions[df_institutions['acronym'] == wg_acronym.value].index)\n\n            df_institutions.to_csv(self.folder_db / institutions_filename, index=False)\n\n            with button_delete_output:\n                print(f'Institution deleted: {wg_acronym.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n        wg_acronym.observe(change_acronym, names='value')\n\n        # Display the widgets\n        display(ipw.HBox([wg_acronym, wg_institution_name]))\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def remove_materials(self):\n        \"\"\"Remove one or several object materials from the database file.\n        \"\"\"\n\n        materials = self.get_materials()        \n\n        wg_materials = ipw.SelectMultiple(            \n            options=  materials,\n            description='Materials',  \n            rows=10,           \n        )\n\n        deleting = ipw.Button(\n            description='Delete materials',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the materials in the object_materials.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            materials_filename = 'object_materials.txt'\n            materials = self.get_materials()\n\n            for material in list(wg_materials.value):\n                materials.remove(material)\n\n            pd.Series(materials).to_csv(self.folder_db / materials_filename, index=False, header=False)\n\n            with button_delete_output:\n                print(f'Materials deleted: {wg_materials.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(wg_materials)\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def remove_methods(self, acronym:Optional[str] = None):\n        \"\"\"Remove an analytical method from the database file.\n\n        Parameters\n        ----------\n        acronym : Optional[str], optional\n            Acronym of the method, by default None\n        \"\"\"\n\n        if acronym == None:\n            acronym = 'Select an acronym'\n\n        df_methods = self.get_methods()\n        method_acronyms = list(df_methods['acronym'])\n\n        if acronym not in  ['Select an acronym'] + method_acronyms:\n            print(f'The acronym you entered \"{acronym}\" has not been registered in the database.')\n            acronym = 'Select an acronym'\n\n        wg_acronym = ipw.Dropdown(        \n            value=acronym,\n            options=  ['Select an acronym'] + method_acronyms,\n            description='Acronym',\n            style=style,\n            layout=Layout(width=\"17%\", height=\"30px\")        \n        )\n\n        wg_method_name = ipw.Text(\n            value='',\n            description='',\n            disabled=False         \n        )\n\n        deleting = ipw.Button(\n            description='Delete method',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def change_acronym(change):            \n            new_acronym = change.new\n            name = df_methods.query(f'acronym == \"{new_acronym}\"')['name'].values[0]            \n            wg_method_name.value = name\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the method info in the analytical_methods.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            methods_filename = 'analytical_methods.txt'\n            df_methods = self.get_methods()\n            df_methods = df_methods.drop(df_methods[df_methods['acronym'] == wg_acronym.value].index)\n\n            df_methods.to_csv(self.folder_db / methods_filename, index=False)\n\n            with button_delete_output:\n                print(f'Method deleted: {wg_acronym.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n        wg_acronym.observe(change_acronym, names='value')\n\n        # Display the widgets\n        display(ipw.HBox([wg_acronym, wg_method_name]))\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def remove_objects(self, object_id:Optional[str] = None):\n        \"\"\"Remove a  object from the database file.\n\n        Parameters\n        ----------\n        object_id : Optional[str], optional\n            ID number of the object, by default None\n        \"\"\"\n\n        if object_id == None:\n            object_id = 'Select an object ID'\n\n        object_ids = sorted(list(self.get_objects()['object_id']))\n\n        if object_id not in  ['Select an object ID'] + object_ids:\n            print(f'The object ID you entered \"{object_id}\" has not been registered in the database.')\n            object_id = 'Select an object ID'\n\n        objectId_widget = ipw.Dropdown(        \n            value=object_id,\n            options=['Select an object ID'] + object_ids,\n            description='Object ID',             \n        )\n\n\n        deleting = ipw.Button(\n            description='Delete object',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the object info in the objects_info.csv file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            objects_folder = self.folder_db\n            objects_filename = 'objects_info.csv'\n\n            df_objects = self.get_objects()\n            df_objects = df_objects.drop(df_objects[df_objects['object_id'] == objectId_widget.value].index)\n\n            df_objects.to_csv(objects_folder/objects_filename, index=False)\n\n            with button_delete_output:\n                print(f'Object deleted: {objectId_widget.value}')\n\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(objectId_widget)\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def remove_projects(self, project_id:Optional[str] = None):\n        \"\"\"Remove a  project from the database file.\n\n        Parameters\n        ----------\n        project_id : Optional[str], optional\n            ID number of the project, by default None\n        \"\"\"\n\n        if project_id == None:\n            project_id = 'Select a project ID'\n\n        project_ids = list(self.get_projects()['project_id'])\n\n        if project_id not in  ['Select a project ID'] + project_ids:\n            print(f'The project ID you entered \"{project_id}\" has not been registered in the database.')\n            project_id = 'Select a project ID'\n\n        projectId_widget = ipw.Dropdown(        \n            value=project_id,\n            options=['Select a project ID'] + project_ids,\n            description='Project ID',             \n        )\n\n\n        deleting = ipw.Button(\n            description='Delete project',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the project info in the projects_info.csv file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            projects_folder = self.folder_db\n            projects_filename = 'projects_info.csv'\n\n            df_projects = self.get_projects()\n            df_projects = df_projects.drop(df_projects[df_projects['project_id'] == projectId_widget.value].index)\n\n            df_projects.to_csv(projects_folder/projects_filename, index=False)\n\n            with button_delete_output:\n                print(f'Project deleted: {projectId_widget.value}')\n\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(projectId_widget)\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def remove_techniques(self):\n        \"\"\"Remove one or several object techniques from the database file.\n        \"\"\"\n\n        techniques = self.get_techniques()        \n\n        wg_techniques = ipw.SelectMultiple(            \n            options=  techniques,\n            description='Techniques',  \n            rows=10,           \n        )\n\n        deleting = ipw.Button(\n            description='Delete techniques',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the techniques in the object_techniques.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            techniques_filename = 'object_techniques.txt'\n            techniques = self.get_techniques()\n\n            for technique in list(wg_techniques.value):\n                techniques.remove(technique)\n\n            pd.Series(techniques).to_csv(self.folder_db / techniques_filename, index=False, header=False)\n\n            with button_delete_output:\n                print(f'Techniques deleted: {wg_techniques.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(wg_techniques)\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def remove_types(self):\n        \"\"\"Remove one or several object types from the database file.\n        \"\"\"\n\n        types = self.get_types()        \n\n        wg_types = ipw.SelectMultiple(            \n            options=  types,\n            description='Types',  \n            rows=10,           \n        )\n\n        deleting = ipw.Button(\n            description='Delete types',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the types in the object_types.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            types_filename = 'object_types.txt'\n            types = self.get_types()\n\n            for type in list(wg_types.value):\n                types.remove(type)\n\n            pd.Series(types).to_csv(self.folder_db / types_filename, index=False, header=False)\n\n            with button_delete_output:\n                print(f'Types deleted: {wg_types.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(wg_types)\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def remove_users(self,initials:Optional[str] = None):\n        \"\"\"Remove a user from the database file.\n\n        Parameters\n        ----------\n        initials : Optional[str], optional\n            Initials of the user, by default None\n        \"\"\"\n\n        if initials == None:\n            initials = 'Select the initials'\n\n        df_users = self.get_users()\n        initials_list = list(df_users['initials'])\n\n        if initials not in  ['Select the initials'] + initials_list:\n            print(f'The initials you entered \"{initials}\" has not been registered in the database.')\n            initials = 'Select the initials'\n\n        wg_initials = ipw.Dropdown(        \n            value=initials,\n            options=['Select the initials'] + initials_list,\n            description='Initials',    \n            layout=Layout(width=\"20%\", height=\"30px\"),\n            style=style,         \n        )\n\n        wg_name_surname = ipw.Text(\n            value='',\n            description='',\n            disabled=False,\n            layout=Layout(width=\"30%\", height=\"30px\"),\n            style=style,\n        )           \n\n        deleting = ipw.Button(\n            description='Delete user',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def change_initials(change):\n            new_initials = change.new\n            name = df_users.query(f'initials == \"{new_initials}\"')['name'].values[0]\n            surname = df_users.query(f'initials == \"{new_initials}\"')['surname'].values[0]\n            wg_name_surname.value = f'{name} {surname}'\n\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the person info in the users_info.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            users_folder = self.folder_db\n            users_filename = 'users_info.txt'\n\n            df_users = self.get_users()\n            df_users = df_users.drop(df_users[df_users['initials'] == wg_initials.value].index)\n\n            df_users.to_csv(users_folder/users_filename, index=False)\n\n            with button_delete_output:\n                print(f'User {wg_initials.value} deleted.')\n\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n        wg_initials.observe(change_initials, names='value')\n\n        # Display the widgets\n        display(ipw.HBox([wg_initials, wg_name_surname]))\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def remove_white_standards(self,id:Optional[str] = None):\n        \"\"\"Remove a white standard from the database file.\n\n        Parameters\n        ----------\n        id : Optional[str], optional\n            ID number of the white standard, by default None\n        \"\"\"\n\n        if id == None:\n            id = 'Select an ID'\n\n        df_standards = self.get_white_standards()\n        id_list = list(df_standards['ID'])\n\n        if id not in  ['Select an ID'] + id_list:\n            print(f'The ID you entered \"{id}\" has not been registered in the database.')\n            id = 'Select an ID'\n\n        wg_id = ipw.Dropdown(        \n            value=id,\n            options=['Select an ID'] + id_list,\n            description='ID',   \n            layout=Layout(width=\"15%\", height=\"30px\"),\n            style=style,          \n        )\n\n        wg_description = ipw.Text(\n            value='',\n            description='',\n            disabled=False,\n            layout=Layout(width=\"70%\", height=\"30px\"),\n            style=style,\n        )           \n\n        deleting = ipw.Button(\n            description='Delete standard',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def change_id(change):\n            new_id = change.new\n            description = df_standards.query(f'ID == \"{new_id}\"')['description'].values[0]            \n            wg_description.value = description\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the standard info in the white_standards.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            standards_folder = self.folder_db\n            standards_filename = 'white_standards.txt'\n\n            df_standards = self.get_white_standards()\n            df_standards = df_standards.drop(df_standards[df_standards['ID'] == wg_id.value].index)\n\n            df_standards.to_csv(standards_folder/standards_filename, index=False)\n\n            with button_delete_output:\n                print(f'ID {wg_id.value} deleted.')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n        wg_id.observe(change_id, names='value')\n\n        # Display the widgets\n        display(ipw.HBox([wg_id, wg_description]))\n        display(ipw.HBox([deleting, button_delete_output]))  \n</code></pre>"},{"location":"references/#msdb.msdb.DB.__init__","title":"<code>__init__(name_db=None, new_db=False, config_file=Path(__file__).parent / 'db_config.json')</code>","text":"<p>Instantiate a DB class object.</p>"},{"location":"references/#msdb.msdb.DB.__init__--parameters","title":"Parameters","text":"Optional[str] <p>Name of the databases, by default None When None, it retrieves the first databases info registered in the db_config.json file</p> Optional[bool] <p>Whether to create a new database ecosystem, by default False</p> Optional[str|Path] <p>Location of the configuration file, by default Path(file).parent/'db_config.json'</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def __init__(self, name_db:Optional[str] = None, new_db:Optional[bool] = False, config_file:Optional[str] = Path(__file__).parent / 'db_config.json') -&gt; None:\n    \"\"\"Instantiate a DB class object.\n\n    Parameters\n    ----------\n\n    name_db : Optional[str]\n        Name of the databases, by default None\n        When None, it retrieves the first databases info registered in the db_config.json file\n\n    new_db : Optional[bool]\n        Whether to create a new database ecosystem, by default False\n\n    config_file : Optional[str|Path]\n        Location of the configuration file, by default Path(__file__).parent/'db_config.json'\n\n    \"\"\"\n    self.name_db = name_db        \n    self.new_db = new_db\n    self.config_file = config_file\n\n    # Check whether the db_config.json file exists\n    self._init_config()\n\n    # Create a new databases if required\n    if self.new_db:\n\n        existing_dbs = list(self.get_db_config().keys())\n\n        if self.name_db not in existing_dbs:\n            self.create_db(name_db=self.name_db)\n            return\n        else:\n            print(f'The database name you entered ({self.name_db}) has already been created. Either set the \"new_db\" parameter to False or choose a different name_db.')\n\n    # Check whether databases were created\n    if len(self.get_db_config()['databases']) == 0:\n        print('There are no databases registered. Create a database to start using the functions available through the DB class.')\n        return None\n\n    # Select the first database name if name_db is None\n    if name_db == None:\n        self.name_db = list(self.get_db_config()['databases'].keys())[0]\n\n    else:\n        if not self.name_db in list(self.get_db_config()['databases'].keys()):\n            print(f'The name_db value you entered ({self.name_db}) has not been registered. Either set the \"new_db\" parameter to True or select a registered database name.')\n\n        else:\n            self.folder_db = Path(self.get_db_config()['databases'][self.name_db]['path_folder'])\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_creator","title":"<code>add_creator()</code>","text":"<p>Record a new object creator in the object_creators.txt file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_creator(self):\n    \"\"\"Record a new object creator in the object_creators.txt file\n    \"\"\"\n\n    # Function to update the text file if the initials are unique\n    def update_text_file(name, surname):            \n\n        df_creators = self.get_creators()\n        df_creators = pd.concat([df_creators, pd.DataFrame(data=[name,surname], index=['name','surname']).T])\n        df_creators = df_creators.sort_values(by='surname')\n        df_creators.to_csv(self.folder_db/'object_creators.txt',index=False)\n\n        print(f\"Added: {surname}, {name}\")\n\n    # Define ipython widgets\n    name_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a name (optional)',\n        description='Name',               \n    )\n\n    surname_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a surname',\n        description='Surname',             \n    )\n\n    recording = ipw.Button(\n        description='Record creator',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the creator info in the objet_creators.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        name = name_widget.value.strip()\n        surname = surname_widget.value.strip()\n\n        with button_record_output:\n\n            if surname: # ensure the surname field is complete\n                update_text_file(name, surname)\n            else:\n\n                print(\"Please enter at least a surname.\")\n\n\n    recording.on_click(button_record_pressed)\n\n    display(surname_widget,name_widget)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_device","title":"<code>add_device()</code>","text":"<p>Record a new device in the devices.txt file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_device(self):\n    \"\"\"Record a new device in the devices.txt file\n    \"\"\"\n\n    # Function to update the text file if the initials are unique\n    def update_text_file(id, name, description):  \n\n        df_devices = self.get_devices()\n\n        existing_devices = df_devices['ID'].values\n\n        if id in existing_devices:\n            print(f'The ID you entered ({id}) has already been attributed to another device:')   \n            print(df_devices[df_devices['ID'] == id])  \n\n        else:\n            df_devices = pd.concat([df_devices, pd.DataFrame(data=[id,name,description], index=['ID','name','description']).T])\n            df_devices = df_devices.sort_values(by='ID')\n            df_devices.to_csv(self.folder_db / 'devices.txt',index=False)\n\n            print(f\"Device added: {id}, {name}\")\n\n    # Define ipython widgets\n    wg_id = ipw.Text(        \n        value='',\n        placeholder='Enter an ID',\n        description='Device ID',               \n    )\n\n    wg_name = ipw.Text(        \n        value='',\n        placeholder='Enter name',\n        description='Device name',             \n    )\n\n    wg_description = ipw.Text(        \n        value='',\n        placeholder='Briefly describe the device purpose (Optional)',\n        description='Device description',             \n    )\n\n    recording = ipw.Button(\n        description='Record device',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the device info in the devices.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        id = wg_id.value.strip()\n        name = wg_name.value.strip()\n        description = wg_description.value.strip()\n\n        with button_record_output:\n\n            if id and name: # ensure the id and name fields are complete\n                update_text_file(id, name, description)\n            else:                    \n                print(\"Please enter at least an ID and a name.\")\n\n\n    recording.on_click(button_record_pressed)\n\n    display(wg_id,wg_name,wg_description)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_institution","title":"<code>add_institution()</code>","text":"<p>Record a new institution in the institutions.txt file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_institution(self):        \n    \"\"\"Record a new institution in the institutions.txt file\n    \"\"\"\n\n    # Function to get the existing initials from the file\n    def get_existing_acronyms(file_path):\n        try:\n            df_institutions = self.get_institutions()\n            existing_acronyms = df_institutions['acronym'].values                \n            return existing_acronyms\n        except FileNotFoundError:\n            # If the file does not exist, return an empty set\n            return set()\n\n    # Function to update the text file if the initials are unique\n    def update_text_file(file_path, name, acronym):\n        # Check if the acronym already exists\n        existing_acronyms = get_existing_acronyms(file_path)\n\n        if acronym in existing_acronyms:\n            print(f\"Acronym '{acronym}' already exists. Please use a different acronym.\")\n        else:\n            df_institutions = self.get_institutions()\n            df_institutions = pd.concat([df_institutions, pd.DataFrame(data=[name,acronym], index=['name','acronym']).T])\n            df_institutions = df_institutions.sort_values(by='name')\n            df_institutions.to_csv(self.folder_db/'institutions.txt',index=False)\n\n            print(f\"Added: {name} : {acronym}\")\n\n    # Define ipython widgets\n    name_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a name',\n        description='Name',               \n    )\n\n    acronym_widget = ipw.Text(        \n        value='',\n        placeholder='Enter an acronym',\n        description='Acronym',             \n    )\n\n    recording = ipw.Button(\n        description='Record institution',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the person info in the persons.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        name = name_widget.value.strip()            \n        acronym = acronym_widget.value.strip()\n\n        with button_record_output:\n\n            if name and acronym: # ensure all fields are filled\n                update_text_file(self.folder_db / 'institutions.txt', name, acronym)\n            else:\n\n                print(\"Please enter all fields (Name, Acronym)\")\n\n    recording.on_click(button_record_pressed)\n\n    display(name_widget,acronym_widget)\n    display(ipw.HBox([recording, button_record_output]))       \n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_material","title":"<code>add_material(name=None)</code>","text":"<p>Register a new object material.</p>"},{"location":"references/#msdb.msdb.DB.add_material--returns","title":"Returns","text":"<p>ipywdigets     fill in the name of the material to be registered.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_material(self, name:Optional[str] = None):\n    \"\"\"Register a new object material.\n\n    Returns\n    -------\n    ipywdigets\n        fill in the name of the material to be registered. \n    \"\"\"\n\n    # Define ipython widgets\n\n    wg_material = ipw.Text(        \n        value=name,\n        placeholder='Enter a name',\n        description='Material',               \n    )    \n\n    recording = ipw.Button(\n        description='Record material',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_record_output = ipw.Output()\n\n\n    # Define the path of the users database file\n\n    databases_folder = self.folder_db\n    materials_filename = 'object_materials.txt'\n\n\n    # Define some functions\n    def update_text_file(new_value):\n\n        # Check if the material has already been registered \n        existing_materials = self.get_materials()  \n\n        if new_value in existing_materials:\n            print(f'The material \"{new_value}\" has already been registered.')\n\n        else:\n            existing_materials.append(str(new_value).lower())         \n            existing_materials = sorted(existing_materials)\n\n            with open(databases_folder / materials_filename, 'w') as f:\n                    f.write('\\n'.join(existing_materials))\n\n            f.close()            \n\n            print(f\"Material added: {new_value}\")\n\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the type name in the object_materials.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n        material_name = wg_material.value.strip()\n\n        with button_record_output:            \n\n            if material_name: # ensure all fields are filled\n                update_text_file(material_name)\n            else:                    \n                print(\"Please enter a material name\")\n\n\n    # Link the widget button to the function\n    recording.on_click(button_record_pressed)\n\n    # Display the widgets\n    display(wg_material)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_method","title":"<code>add_method()</code>","text":"<p>Record a new analytical method in the analytical_methods.txt file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_method(self):        \n    \"\"\"Record a new analytical method in the analytical_methods.txt file\n    \"\"\"\n\n    # Function to get the existing acronym from the file\n    def get_existing_acronyms():\n        try:\n            df_methods = self.get_methods()\n            existing_acronyms = df_methods['acronym'].values                \n            return existing_acronyms\n        except FileNotFoundError:\n            # If the file does not exist, return an empty set\n            return set()\n\n    # Function to update the text file if the initials are unique\n    def update_text_file(acronym, name):\n        # Check if the acronym already exists\n        existing_acronyms = list(get_existing_acronyms())\n\n        if acronym in existing_acronyms:\n            print(f\"Acronym '{acronym}' already exists. Please use a different acronym.\")\n        else:\n            df_methods = self.get_methods()\n            df_methods = pd.concat([df_methods, pd.DataFrame(data=[acronym, name], index=['acronym', 'name']).T])\n            df_methods = df_methods.sort_values(by='acronym')\n            df_methods.to_csv(self.folder_db/'analytical_methods.txt',index=False)\n\n            print(f\"Added: {acronym} : {name}\")\n\n    # Define ipython widgets\n    name_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a name',\n        description='Name',               \n    )\n\n    acronym_widget = ipw.Text(        \n        value='',\n        placeholder='Enter an acronym',\n        description='Acronym',             \n    )\n\n    recording = ipw.Button(\n        description='Record method',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the person info in the persons.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        name = name_widget.value.strip()            \n        acronym = acronym_widget.value.strip()\n\n        with button_record_output:\n\n            if name and acronym: # ensure all fields are filled\n                update_text_file(acronym,name)\n            else:\n\n                print(\"Please enter all fields (Name, Acronym)\")\n\n    recording.on_click(button_record_pressed)\n\n    display(acronym_widget,name_widget)\n    display(ipw.HBox([recording, button_record_output])) \n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_object","title":"<code>add_object()</code>","text":"<p>Add a new object in the objects_info.csv file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_object(self):\n    \"\"\"Add a new object in the objects_info.csv file\"\"\"\n\n    db_projects = self.get_db(db='projects')\n    projects_list = ['noProject'] + list(db_projects['project_id'].values)\n\n    db_objects = self.get_db(db='objects')\n    existing_columns = list(db_objects.columns)\n\n    creators_file = pd.read_csv(self.folder_db / 'object_creators.txt')\n    creators = [f'{x[0]}, {x[1]}' if isinstance(x[1],str) else x[0] for x in creators_file.values]\n\n    types_file = open(self.folder_db / r'object_types.txt', 'r').read()\n    types = types_file.split(\"\\n\")        \n\n    techniques_file = open(self.folder_db / r'object_techniques.txt', 'r').read()\n    techniques = techniques_file.split(\"\\n\")        \n\n    materials_file = open(self.folder_db  / r'object_materials.txt', 'r').read()\n    materials = materials_file.split(\"\\n\")        \n\n    owners_file = pd.read_csv(self.folder_db / 'institutions.txt')\n    owners = tuple(owners_file['name'].values)\n\n\n    # Define ipython widgets\n\n    project_id = ipw.Combobox(\n        #value = ' ',\n        placeholder='Project',\n        options = projects_list,\n        description = 'Project id',\n        ensure_option=False,\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"30px\"),\n        style=style,\n    )\n\n    object_id = ipw.Text(        \n        value='',\n        placeholder='Inv. N\u00b0',\n        description='Id',\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"30px\"),\n        style=style,   \n    )\n\n    object_category = ipw.Dropdown(\n        options=['heritage','model','reference','sample'],\n        value='heritage',\n        description='Category',\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"30px\"),\n        style=style,\n    )    \n\n    object_creator = ipw.Combobox(\n        placeholder = 'Surname, Name',\n        options = creators,\n        description = 'Creator',\n        ensure_option=False,\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"30px\"),\n        style=style,\n    ) \n\n    object_date = ipw.Text(\n        value='',\n        placeholder='Enter a date',\n        description='Date',\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"30px\"),\n        style=style,         \n    )  \n\n    object_owner = ipw.Combobox(\n        placeholder = 'Enter an institution/owner',\n        options = owners,\n        description = 'Object owner',\n        ensure_option = False,\n        disabled = False,\n        layout=Layout(width='99%',height=\"30px\"),\n        style = style\n\n    )\n\n    object_title = ipw.Textarea(        \n        value='',\n        placeholder='Enter the title',\n        description='Title',\n        disabled=False,\n        layout=Layout(width='99%',height=\"100%\"),\n        style=style,   \n    )  \n\n    object_name = ipw.Text(        \n        value='',\n        placeholder='Enter a short object (no space, no underscore)',\n        description='Name',\n        disabled=False,\n        layout=Layout(width='99%',height=\"30px\"),\n        style=style,   \n    )\n\n    object_type = ipw.Combobox(\n        placeholder = 'General classification',\n        options = types,\n        description = 'Type',\n        ensure_option=False,\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"30px\"),\n        style=style,\n    )\n\n    object_technique = ipw.SelectMultiple(            \n        options = techniques,\n        description = 'Technique',\n        ensure_option=False,\n        rows=10,\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"180px\"),\n        style=style,\n    )   \n\n    object_material = ipw.SelectMultiple(            \n        options = materials,\n        description = 'Materials',\n        ensure_option=False,\n        rows=10,\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"180px\"),\n        style=style,\n    )\n\n    recording = ipw.Button(\n        description='Record object',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',\n        #layout=Layout(width=\"50%\", height=\"30px\"),\n        #style=style,\n        #icon='check' # (FontAwesome names without the `fa-` prefix)\n    )        \n\n\n    button_record_output = ipw.Output()       \n\n\n    object_color = ipw.Combobox(\n        description = 'Color',\n        placeholder = 'Optional',\n        ensure_option=False,\n        disabled=False,\n        layout=Layout(width=\"78%\", height=\"30px\"),\n        style=style,\n    )        \n\n    # Combobox for additional parameters (if any)\n    additional_params = [col for col in existing_columns if col not in [\n        'project_id',\n        'object_id',\n        'object_category',\n        'object_type',\n        'object_technique',\n        'object_title',\n        'object_name',\n        'object_creator',\n        'object_date',\n        'object_owner',\n        'object_material']]\n\n    additional_param_widgets = {}\n    for param in additional_params:\n        additional_param_widgets[param] = ipw.Combobox(\n            description=param,\n            options=[],  # You can populate this with options if needed\n            placeholder=f\"Enter {param} value\",\n            style=style\n        )        \n\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the object info in the object database file (objects_info.csv).\n        \"\"\"\n\n        with button_record_output:\n            button_record_output.clear_output(wait=True)\n\n            db_objects_file = self.folder_db / 'objects_info.csv'\n            db_objects = pd.read_csv(db_objects_file)            \n\n            creators = [f'{x[0]}, {x[1]}' if isinstance(x[1],str) else x[0] for x in self.get_creators().values]\n\n            owners_file = open(self.folder_db  / r'institutions.txt', 'r').read().splitlines()\n            owners = owners_file             \n\n            types_file = open(self.folder_db / r'object_types.txt', 'r').read().splitlines()\n            types = types_file       \n\n\n            new_row = pd.DataFrame({                    \n                'project_id': project_id.value,\n                'object_id' : object_id.value,                   \n                'object_category': object_category.value, \n                'object_type': object_type.value, \n                \"object_technique\": \"_\".join(object_technique.value),\n                \"object_title\": object_title.value,\n                'object_name': object_name.value,\n                'object_creator': object_creator.value,                        \n                'object_date': object_date.value,\n                'object_owner': object_owner.value,\n                'object_material': \"_\".join(object_material.value)},                       \n                index=[0] \n                ) \n\n\n            if object_creator.value not in creators:                    \n\n                creator_surname = object_creator.value.split(',')[0].strip()\n                try:\n                    creator_name = object_creator.value.split(',')[1].strip()\n                except IndexError:\n                    creator_name = ''\n\n                df_creators = pd.read_csv(self.folder_db / 'object_creators.txt')\n                df_creators = pd.concat([df_creators, pd.DataFrame(data=[creator_surname,creator_name], index=['surname','name']).T])\n                df_creators.to_csv(self.folder_db / 'object_creators.txt', index=False)\n\n\n            if object_type.value not in types:\n                types.append(str(object_type.value))\n                types = sorted(types, key=str.casefold)\n\n                with open(self.folder_db / 'object_types.txt', 'w') as f:\n                    f.write('\\n'.join(types).strip())\n                f.close()                                 \n\n\n            # Add additional parameters to the new record\n            for param, widget in additional_param_widgets.items():\n                new_row[param] = widget.value\n\n            db_objects_new = pd.concat([db_objects, new_row],)\n            db_objects_new.to_csv(db_objects_file, index= False)\n            print(f'Object {object_id.value} added to database.')\n\n    recording.on_click(button_record_pressed)\n\n    display(\n        ipw.HBox([\n            ipw.VBox([object_id,project_id,object_creator,object_date,object_owner,object_category,object_type,object_title, object_name], layout=Layout(width=\"30%\", height=\"370px\"), style=style,),\n            ipw.VBox([object_technique,object_material], layout=Layout(width=\"30%\", height=\"370px\"), style=style),\n            ipw.VBox([object_color, *[widget for widget in additional_param_widgets.values()]], layout=Layout(width=\"30%\", height=\"370px\"), style=style)\n            ]))\n\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_project","title":"<code>add_project(project_id=None)</code>","text":"<p>Add a new project in the projects_info.csv file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_project(self, project_id:Optional[str] = None):\n    \"\"\"Add a new project in the projects_info.csv file\"\"\"\n\n    db_projects = self.get_projects()\n    existing_columns = list(db_projects.columns)\n    institutions = tuple(self.get_institutions()['name'].values)    \n    persons = tuple([f'{x[0]}, {x[1]}' for x in self.get_users()[['name','surname']].values])    \n    methods = list(self.get_methods()['acronym'].values)\n\n    # Define ipython widgets\n    project_Id = ipw.Text(        \n        value=project_id,\n        placeholder='Type something',\n        description='Project Id',\n        disabled=False,\n        layout=Layout(width=\"95%\", height=\"30px\"),\n        style=style,   \n    )\n\n    institution = ipw.Combobox(\n        placeholder = 'Enter an institution',\n        options = institutions,              \n        description = 'Institution',\n        ensure_option=False,\n        disabled=False,\n        layout=Layout(width=\"95%\", height=\"30px\"),\n        style=style,\n    )\n\n    startDate = ipw.DatePicker(\n        description='Start date',\n        disabled=False,\n        layout=Layout(width=\"90%\", height=\"30px\"),\n        style=style,\n    )\n\n    endDate = ipw.DatePicker(\n        description='End date',\n        disabled=False,\n        layout=Layout(width=\"90%\", height=\"30px\"),\n        style=style,\n    )\n\n    project_leader = ipw.Combobox(\n        placeholder = 'Enter a name or a surname',\n        options=persons,            \n        description='Project leader',\n        disabled=False,\n        layout=Layout(width=\"90%\", height=\"30px\"),\n        style=style,\n    )\n\n    coresearchers = ipw.SelectMultiple(\n        value=['none'],\n        options=['none'] + list(persons), \n        description='Co-researchers',\n        rows=10,\n        disabled=False,\n        layout=Layout(width=\"90%\", height=\"135px\"),\n        style=style,\n    )\n\n    wg_methods = ipw.SelectMultiple(\n        value=['none'],\n        options=['none'] + list(methods), \n        description='Methods',\n        rows=10,\n        disabled=False,\n        layout=Layout(width=\"90%\", height=\"170px\"),\n        style=style,\n    )\n\n\n    recording = ipw.Button(\n        description='Record project',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',\n        #layout=Layout(width=\"50%\", height=\"30px\"),\n        #style=style,\n        #icon='check' # (FontAwesome names without the `fa-` prefix)\n    )\n\n\n    project_keyword = ipw.Text(\n        placeholder = 'Describe project in 1 or 2 words',\n        description = 'Project keywords',\n        disabled = False,\n        layout=Layout(width=\"95%\", height=\"30px\"),\n        style = style,\n    )\n\n    # Combobox for additional parameters (if any)\n    additional_params = [col for col in existing_columns if col not in ['project_id', 'institution', 'start_date', 'end_date', 'project_leader', 'co-researchers', 'keywords', 'methods']]\n    additional_param_widgets = {}\n    for param in additional_params:\n        additional_param_widgets[param] = ipw.Combobox(\n            description=param,\n            options=[],  # You can populate this with options if needed\n            placeholder=f\"Enter {param} value\"\n        )\n\n    button_record_output = ipw.Output()\n\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the project info in the project database file (projects_info.csv).\n        \"\"\"\n\n        with button_record_output:\n            button_record_output.clear_output(wait=True)\n\n            Projects_DB_file = self.folder_db / 'projects_info.csv'\n            Projects_DB = pd.read_csv(Projects_DB_file)  \n            persons = self.get_users()\n\n            institutions = pd.read_csv(self.folder_db / 'institutions.txt')['name'].values\n\n\n            project_leader_name = project_leader.value.split(',')[0].strip()\n            project_leader_surname = project_leader.value.split(',')[1].strip()\n            project_leader_initials = persons.query(f'name == \"{project_leader_name}\" and surname == \"{project_leader_surname}\"')['initials'].values[0]\n\n            if coresearchers.value[0] == 'none':\n                coresearchers_initials = 'none'\n\n            else:\n                coresearchers_initials = []\n                for coresearcher in [x for x in coresearchers.value]:\n                    coresearcher_name = coresearcher.split(',')[0].strip()\n                    coresearcher_surname = coresearcher.split(',')[1].strip()\n                    coresearcher_initials = persons.query(f'name == \"{coresearcher_name}\" and surname == \"{coresearcher_surname}\"')['initials'].values[0]\n                    coresearchers_initials.append(coresearcher_initials)\n\n\n                coresearchers_initials = '-'.join(coresearchers_initials)\n\n            if wg_methods.value == 'none':\n                methods_acronym = 'none'\n\n            else:\n                methods_acronym = \"_\".join(wg_methods.value)\n\n            new_row = pd.DataFrame({'project_id':project_Id.value,\n                    'institution':institution.value, \n                    'start_date':startDate.value, \n                    'end_date':endDate.value,\n                    'project_leader':project_leader_initials,  \n                    'co-researchers':coresearchers_initials,                       \n                    'keywords':project_keyword.value,\n                    'methods':methods_acronym},                                               \n                    index=[0] \n                    )  \n\n            if institution.value not in institutions:                       \n                institutions.append(str(institution.value))         \n                institutions = sorted(institutions)   \n\n                with open(self.folder_db / 'institutions.txt', 'w') as f:\n                    f.write('\\n'.join(institutions).strip())  \n                f.close()                \n\n\n            # Add additional parameters to the new record\n            for param, widget in additional_param_widgets.items():\n                new_row[param] = widget.value\n\n            Projects_DB_new = pd.concat([Projects_DB, new_row],)\n            Projects_DB_new.to_csv(Projects_DB_file, index= False)\n            print(f'Project {project_Id.value} added to database.')\n\n    recording.on_click(button_record_pressed)\n\n\n    # Display the widgets\n    display(ipw.HBox([\n        ipw.VBox([\n            ipw.HBox([\n                ipw.VBox([project_Id,institution, project_keyword, startDate, endDate],layout=Layout(width=\"60%\", height=\"100%\")),\n                ipw.VBox([project_leader, coresearchers],layout=Layout(width=\"60%\", height=\"100%\")),\n                ipw.VBox([wg_methods],layout=Layout(width=\"60%\", height=\"100%\"))\n                ]),                \n            ], layout=Layout(width=\"70%\", height=\"100%\")),                        \n        ], layout=Layout(width=\"100%\", height=\"100%\"))\n    ) \n\n    display(*[widget for widget in additional_param_widgets.values()])\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_technique","title":"<code>add_technique()</code>","text":"<p>Register a new object technique.</p>"},{"location":"references/#msdb.msdb.DB.add_technique--returns","title":"Returns","text":"<p>ipywdigets     fill in the name of the technique to be registered.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_technique(self):\n    \"\"\"Register a new object technique.\n\n    Returns\n    -------\n    ipywdigets\n        fill in the name of the technique to be registered. \n    \"\"\"\n\n    # Define ipython widgets\n\n    technique_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a name',\n        description='Technique',               \n    )    \n\n    recording = ipw.Button(\n        description='Record technique',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_record_output = ipw.Output()\n\n\n    # Define the path of the users database file\n\n    databases_folder = self.folder_db\n    techniques_filename = 'object_techniques.txt'\n\n\n    # Define some functions    \n\n    def get_existing_techniques(file_path):\n        try:\n            return self.get_techniques()        \n\n        except FileNotFoundError:            \n            return\n\n\n    def update_text_file(file_path, name):\n\n        # Check if the technique has already been registered        \n        existing_techniques = get_existing_techniques(file_path)\n\n        if technique_widget.value in existing_techniques:\n            print(f'The technique {technique_widget.value} has already been registered.')\n\n        else:\n            existing_techniques.append(str(technique_widget.value).lower())         \n            existing_techniques = sorted(existing_techniques)\n\n            with open(databases_folder / techniques_filename, 'w') as f:\n                    f.write('\\n'.join(existing_techniques))\n\n            f.close()            \n\n            print(f\"Technique added: {name}\")\n\n\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the technique name in the object_techniques.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        name = technique_widget.value.strip()\n\n\n        with button_record_output:            \n\n            if name: # ensure all fields are filled\n                update_text_file(databases_folder / techniques_filename, name)\n            else:                    \n                print(\"Please enter all fields (Name)\")\n\n\n    # Link the widget button to the function\n    recording.on_click(button_record_pressed)\n\n    # Display the widgets\n    display(technique_widget)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_type","title":"<code>add_type(name=None)</code>","text":"<p>Register a new object type.</p>"},{"location":"references/#msdb.msdb.DB.add_type--returns","title":"Returns","text":"<p>ipywdigets     fill in the name of the type to be registered.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_type(self, name:Optional[str] = None):\n    \"\"\"Register a new object type.\n\n    Returns\n    -------\n    ipywdigets\n        fill in the name of the type to be registered. \n    \"\"\"\n\n    # Define ipython widgets\n\n    wg_type = ipw.Text(        \n        value=name,\n        placeholder='Enter a name',\n        description='Type',               \n    )    \n\n    recording = ipw.Button(\n        description='Record type',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_record_output = ipw.Output()\n\n\n    # Define the path of the users database file\n\n    databases_folder = self.folder_db\n    types_filename = 'object_types.txt'\n\n\n    # Define some functions\n    def update_text_file(new_value):\n\n        # Check if the type has already been registered        \n        existing_types = self.get_types()\n\n        if new_value in existing_types:\n            print(f'The type \"{new_value}\" has already been registered.')\n\n        else:\n            existing_types.append(str(new_value).lower())         \n            existing_types = sorted(existing_types)\n\n            with open(databases_folder / types_filename, 'w') as f:\n                    f.write('\\n'.join(existing_types))\n\n            f.close()            \n\n            print(f\"Type added: {new_value}\")\n\n\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the type name in the object_types.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n        type_name = wg_type.value.strip()\n\n        with button_record_output:            \n\n            if type_name: # ensure all fields are filled\n                update_text_file(type_name)\n            else:                    \n                print(\"Please enter a type name\")\n\n\n    # Link the widget button to the function\n    recording.on_click(button_record_pressed)\n\n    # Display the widgets\n    display(wg_type)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_user","title":"<code>add_user()</code>","text":"<p>Record a new person in the users_info.txt file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_user(self):\n    \"\"\"Record a new person in the users_info.txt file\n    \"\"\"\n\n    # Function to get the existing initials from the file\n    def get_existing_initials(file_path):\n        try:\n            df_persons = self.get_users()\n            existing_initials = df_persons['initials']                \n            return existing_initials\n        except FileNotFoundError:\n            # If the file does not exist, return an empty set\n            return set()\n\n    # Function to update the text file if the initials are unique\n    def update_text_file(file_path, name, surname, initials):\n        # Check if the initials already exist\n        existing_initials = get_existing_initials(file_path)\n\n        if initials in existing_initials:\n            print(f\"Initials '{initials}' already exist. Please use different initials.\")\n        else:\n            df_persons = self.get_users()\n            df_persons = pd.concat([df_persons, pd.DataFrame(data=[name,surname,initials], index=['name','surname','initials']).T])\n            df_persons = df_persons.sort_values(by='name')\n            df_persons.to_csv(self.folder_db/'users_info.txt',index=False)\n\n            print(f\"Added: {name}, {surname} : {initials}\")\n\n\n    # Define ipython widgets\n    name_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a name',\n        description='Name',               \n    )\n\n    surname_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a surname',\n        description='Surname',             \n    )\n\n    initials_widget = ipw.Text(        \n        value='',\n        placeholder='Enter initials in capital letters',\n        description='Initials',             \n    )\n\n    recording = ipw.Button(\n        description='Record user',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the person info in the users_info.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        name = name_widget.value.strip()\n        surname = surname_widget.value.strip()\n        initials = initials_widget.value.strip()\n\n        with button_record_output:\n\n            if name and surname and initials: # ensure all fields are filled\n                update_text_file(self.folder_db / 'users_info.txt', name, surname, initials)\n            else:\n\n                print(\"Please enter all fields (Name, Surname, Initials)\")\n\n\n\n    recording.on_click(button_record_pressed)\n\n    display(name_widget,surname_widget,initials_widget)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_white_standard","title":"<code>add_white_standard()</code>","text":"<p>Record a new white standard in the white_standards.txt file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_white_standard(self):\n    \"\"\"Record a new white standard in the white_standards.txt file\n    \"\"\"\n\n    # Function to get the existing standards ID from the file\n    def get_existing_standards():\n        try:\n            df_standards = self.get_white_standards()\n            existing_standards = df_standards['ID'].values                \n            return existing_standards\n        except FileNotFoundError:\n            # If the file does not exist, return an empty set\n            return set()\n\n    # Function to update the text file if the ID is unique\n    def update_text_file(ID, description):\n        # Check if the ID already exists\n        existing_standards = get_existing_standards()\n\n        if ID in existing_standards:\n            print(f\"ID '{ID}' already exists. Please use a different ID.\")\n        else:\n            df_standards = self.get_white_standards()\n            df_standards = pd.concat([df_standards, pd.DataFrame(data=[ID,description], index=['ID','description']).T])\n            df_standards = df_standards.sort_values(by='ID')\n            df_standards.to_csv(self.folder_db/'white_standards.txt',index=False)\n\n            print(f\"Added: {ID} : {description}\")\n\n    # Define ipython widgets\n    wg_ID = ipw.Text(        \n        value='',\n        placeholder='Enter an ID',\n        description='ID', \n        layout=Layout(width=\"40%\", height=\"30px\"),\n        style=style,              \n    )\n\n    wg_description = ipw.Text(        \n        value='',\n        placeholder='Enter a brief description',\n        description='Description', \n        layout=Layout(width=\"40%\", height=\"30px\"),\n        style=style,            \n    )\n\n    recording = ipw.Button(\n        description='Record standard',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the standard info in the white_standards.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        id = wg_ID.value.strip()            \n        description = wg_description.value.strip()\n\n        with button_record_output:\n\n            if id and description: # ensure all fields are filled\n                update_text_file(id, description)\n            else:                    \n                print(\"Please enter all fields (ID, description)\")\n\n    recording.on_click(button_record_pressed)\n\n    display(wg_ID,wg_description)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_db_config","title":"<code>get_db_config()</code>","text":"<p>Retrieve the content of the db_config.json file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_db_config(self):\n    \"Retrieve the content of the db_config.json file\"\n\n    with open(self.config_file, 'r') as file:\n        config = json.load(file)\n        return config  \n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_materials","title":"<code>get_materials()</code>","text":"<p>Retrieve the object materials.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_materials(self):\n    \"\"\"Retrieve the object materials.\n    \"\"\"\n\n    materials_filename = 'object_materials.txt'\n\n    if not (self.folder_db / materials_filename).exists():\n        print(f'Please create an empty file called \"{materials_filename}\" in the the following folder: {self.folder_db}')\n        return\n\n    else:            \n        materials_df = pd.read_csv(self.folder_db / materials_filename, header=None)\n        materials = list(materials_df.values.flatten())              \n        return materials\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_methods","title":"<code>get_methods()</code>","text":"<p>Retrieve the scientific methods to analyze objects.</p>"},{"location":"references/#msdb.msdb.DB.get_methods--returns","title":"Returns","text":"<p>pandas dataframe     info about registered methods.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_methods(self):\n    \"\"\"Retrieve the scientific methods to analyze objects.\n\n    Returns\n    -------\n    pandas dataframe\n        info about registered methods.\n    \"\"\"\n\n    databases_folder = self.folder_db\n    methods_filename = 'analytical_methods.txt'\n\n    if not (databases_folder / methods_filename).exists():\n        print(f'Please create an empty file called \"{methods_filename}\" in the the following folder: {databases_folder}')\n        return\n\n    else:\n        df_methods = pd.read_csv((databases_folder / methods_filename))            \n        return df_methods\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_objects","title":"<code>get_objects(object_category=None, object_type=None, object_technique=None, object_owner=None, project_id=None, object_id=None, match_all=False)</code>","text":"<p>Retrieve the objects info.</p>"},{"location":"references/#msdb.msdb.DB.get_objects--returns","title":"Returns","text":"<p>pandas dataframe     info about registered objects.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_objects(self,object_category:Union[str,list]=None, object_type:Union[str,list]=None, object_technique:Union[str,list]=None, object_owner:Union[str,list] = None, project_id:Union[str,list] = None, object_id:Union[str,list] = None, match_all:Optional[bool]=False):\n    \"\"\"Retrieve the objects info.\n\n    Returns\n    -------\n    pandas dataframe\n        info about registered objects.\n    \"\"\"\n\n    databases_folder = self.folder_db\n    objects_filename = 'objects_info.csv'\n    df_objects = pd.read_csv((databases_folder / objects_filename)).fillna('none')\n\n    if not (databases_folder / objects_filename).exists():\n        print(f'Please create a .csv file called \"{objects_filename}\" in the the following folder: {databases_folder} ')\n        return\n\n\n    if object_category == None and object_type == None and object_technique == None and object_owner == None and project_id == None and object_id == None:\n        return df_objects\n\n    if isinstance(object_category, str):\n        object_category = [object_category]\n\n    if isinstance(object_type, str):\n        object_type = [object_type]\n\n    if isinstance(object_technique, str):\n        object_technique = [object_technique]    \n\n    if isinstance(object_owner, str):\n        object_owner = [object_owner]\n\n    if isinstance(project_id, str):\n        project_id = [project_id]\n\n    if isinstance(object_id, str):\n        object_id = [object_id]\n\n\n\n\n    df_institutions = self.get_institutions()\n    list_acronyms = df_institutions['acronym'].values\n\n    if object_owner != None:\n        object_owner = [df_institutions.query(f'acronym == \"{x}\"')['name'].values[0] if x in list_acronyms else 'none' for x in object_owner]\n        object_owner = [x for x in object_owner if x != 'none']\n\n\n\n    parameters = ['object_category','object_type','object_technique','object_owner','project_id', 'object_id']\n    input_values = [object_category, object_type, object_technique, object_owner, project_id, object_id]\n\n    filters = {}\n\n\n    for x,y in zip(parameters, input_values):\n        if y != None:\n            filters[x] = y\n\n\n    def match_criteria(row):\n        results = []\n        for col, values in filters.items():\n            if col in df_objects.columns:\n                matches = [bool(re.search(fr'(^|_){v}(_|$)', row[col])) for v in values]\n                results.append(all(matches) if match_all else any(matches))\n\n        return all(results) if match_all else any(results)\n\n    return df_objects[df_objects.apply(match_criteria, axis=1)]\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_projects","title":"<code>get_projects(PL=None, coresearchers=None, methods=None, institutions=None, project_id=None, match_all=False)</code>","text":"<p>Retrieve information about the registered projects</p>"},{"location":"references/#msdb.msdb.DB.get_projects--parameters","title":"Parameters","text":"<p>PL : Union[str,list], optional     The initials of the main researcher, by default None     If only one initials is entered, you may enter it as a string, otherwise use a list.</p> Union[str,list], optional <p>The initials of the co-researchers, by default None If only one initials is entered, you may enter it as a string, otherwise use a list.</p> Union[str,list], optional <p>Acronym of the method, by default None If only one method is entered, you may enter it as a string, otherwise use a list.</p> Union[str,list], optional <p>Acronym of the institutions, by default None If only one institution is entered, you may enter it as a string, otherwise use a list.</p> Union[str,list], optional <p>ID of the project, by default None If only one ID is entered, you may enter it as a string, otherwise use a list.</p> Optional[bool], optional <p>Whether all the wanted queries should match, by default False</p>"},{"location":"references/#msdb.msdb.DB.get_projects--returns","title":"Returns","text":"<p>pandas dataframe     It return the desired info about registered projects.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_projects(self, PL:Union[str,list]=None, coresearchers:Union[str,list]=None, methods:Union[str,list]=None, institutions:Union[str,list] = None, project_id:Union[str,list] = None, match_all:Optional[bool]=False):\n    \"\"\"Retrieve information about the registered projects\n\n    Parameters\n    ----------\n    PL : Union[str,list], optional\n        The initials of the main researcher, by default None\n        If only one initials is entered, you may enter it as a string, otherwise use a list.\n\n    coresearchers : Union[str,list], optional\n        The initials of the co-researchers, by default None\n        If only one initials is entered, you may enter it as a string, otherwise use a list.\n\n    methods : Union[str,list], optional\n        Acronym of the method, by default None\n        If only one method is entered, you may enter it as a string, otherwise use a list.\n\n    institutions : Union[str,list], optional\n        Acronym of the institutions, by default None\n        If only one institution is entered, you may enter it as a string, otherwise use a list.\n\n    project_id : Union[str,list], optional\n        ID of the project, by default None\n        If only one ID is entered, you may enter it as a string, otherwise use a list.\n\n    match_all : Optional[bool], optional\n        Whether all the wanted queries should match, by default False\n\n    Returns\n    -------\n    pandas dataframe\n        It return the desired info about registered projects.\n    \"\"\" \n\n    databases_folder = self.folder_db\n    projects_filename = 'projects_info.csv'\n    df_projects = pd.read_csv((databases_folder / projects_filename))\n\n    if not (databases_folder / projects_filename).exists():\n        print(f'Please create a file called \"projects_info.csv\" in the the following folder: {databases_folder}')\n        return\n\n\n    if PL == None and methods == None and institutions == None and project_id == None:\n        return df_projects\n\n    if isinstance(PL, str):\n        PL = [PL]\n\n    if isinstance(coresearchers, str):\n        coresearchers = [coresearchers]\n\n    if isinstance(methods, str):\n        methods = [methods]    \n\n    if isinstance(institutions, str):\n        institutions = [institutions]\n\n\n    df_institutions = self.get_institutions()\n    list_acronyms = df_institutions['acronym'].values\n\n    if institutions != None:\n        institutions = [df_institutions.query(f'acronym == \"{x}\"')['name'].values[0] if x in list_acronyms else 'none' for x in institutions]\n        institutions = [x for x in institutions if x != 'none']\n\n\n    parameters = ['project_leader', 'co-researchers', 'methods', 'institution', 'project_id']\n    input_values = [PL, coresearchers, methods, institutions, project_id]\n\n    filters = {}\n\n    for x,y in zip(parameters, input_values):\n        if y != None:\n            filters[x] = y\n\n\n    def match_criteria(row):\n        results = []\n        for col, values in filters.items():\n            if col in df_projects.columns:\n                matches = [bool(re.search(fr'(^|_){v}(_|$)', row[col])) for v in values]\n\n                results.append(all(matches) if match_all else any(matches))\n\n        return all(results) if match_all else any(results)\n\n    return df_projects[df_projects.apply(match_criteria, axis=1)]\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_techniques","title":"<code>get_techniques()</code>","text":"<p>Retrieve the techniques used to create the objects.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_techniques(self):\n    \"\"\"Retrieve the techniques used to create the objects.\n    \"\"\"\n\n    techniques_filename = 'object_techniques.txt'\n\n    if not (self.folder_db / techniques_filename).exists():\n        print(f'Please create an empty file called \"object_techniques.txt\" in the the following folder: {self.folder_db}')\n        return\n\n    else:            \n        techniques_df = pd.read_csv(self.folder_db / 'object_techniques.txt', header=None)\n        techniques = list(techniques_df.values.flatten())              \n        return techniques\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_types","title":"<code>get_types()</code>","text":"<p>Retrieve the object types.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_types(self):\n    \"\"\"Retrieve the object types.\n    \"\"\"\n\n    types_filename = 'object_types.txt'\n\n    if not (self.folder_db / types_filename).exists():\n        print(f'Please create an empty file called \"object_types.txt\" in the the following folder: {self.folder_db}')\n        return\n\n    else:            \n        types_df = pd.read_csv(self.folder_db / 'object_types.txt', header=None)\n        types = list(types_df.values.flatten())              \n        return types\n</code></pre>"},{"location":"references/#msdb.msdb.DB.remove_creators","title":"<code>remove_creators()</code>","text":"<p>Remove one of several creators from the database file.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def remove_creators(self):\n    \"\"\"Remove one of several creators from the database file.\n    \"\"\"\n\n    creators_df = self.get_creators()\n    creators_list = [f'{x[0]}, {x[1]}' if isinstance(x[1],str) else x[0] for x in creators_df.values]       \n\n    wg_creators = ipw.SelectMultiple(          \n        options=  creators_list,\n        description='Creators',\n        rows=10             \n    )\n\n    deleting = ipw.Button(\n        description='Delete creators',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the institution info in the institutions.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        creators_filename = 'object_creators.txt'\n        creators_df = self.get_creators()            \n\n        for creator in list(wg_creators.value):\n\n            if ',' in creator:\n                surname = creator.split(',')[0].strip()\n                name = creator.split(',')[1].strip()\n                creators_df = creators_df.drop(creators_df[(creators_df['surname'] == surname) &amp; (creators_df['name'] == name)].index)\n\n            else:                                   \n                creators_df = creators_df.drop(creators_df[(creators_df['surname'] == creator)].index)\n\n\n        creators_df.to_csv(self.folder_db / creators_filename, index=False)\n\n        with button_delete_output:\n            print(f'Creators deleted: {wg_creators.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(wg_creators)\n    display(ipw.HBox([deleting, button_delete_output]))  \n</code></pre>"},{"location":"references/#msdb.msdb.DB.remove_devices","title":"<code>remove_devices(ID=None)</code>","text":"<p>Remove devices from the database file.</p>"},{"location":"references/#msdb.msdb.DB.remove_devices--parameters","title":"Parameters","text":"<p>ID : Optional[str,list], optional     ID of the devices, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def remove_devices(self, ID:Optional[str] = None):\n    \"\"\"Remove devices from the database file.\n\n    Parameters\n    ----------\n    ID : Optional[str,list], optional\n        ID of the devices, by default None\n    \"\"\"\n\n    devices_ID = list(self.get_devices()['ID'])\n\n    if ID == None:\n        ID = [devices_ID[0]]\n\n    elif isinstance(ID,str):\n        ID = [ID]\n\n\n    wg_devices = ipw.SelectMultiple(        \n        value=ID,\n        options=  devices_ID,\n        description='devices ID', \n        rows=10            \n    )\n\n\n    deleting = ipw.Button(\n        description='Delete devices',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the institution info in the institutions.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        devices_filename = 'devices.txt'\n        df_devices = self.get_devices()\n\n        for id in list(wg_devices.value):\n            df_devices = df_devices.drop(df_devices[df_devices['ID'] == id].index)\n\n        df_devices.to_csv(self.folder_db / devices_filename, index=False)\n\n        with button_delete_output:\n            print(f'Devices deleted: {wg_devices.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(wg_devices)\n    display(ipw.HBox([deleting, button_delete_output]))  \n</code></pre>"},{"location":"references/#msdb.msdb.DB.remove_institutions","title":"<code>remove_institutions(acronym=None)</code>","text":"<p>Remove an institution from the database file.</p>"},{"location":"references/#msdb.msdb.DB.remove_institutions--parameters","title":"Parameters","text":"<p>acronym : Optional[str], optional     Acronym of the institution, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def remove_institutions(self, acronym:Optional[str] = None):\n    \"\"\"Remove an institution from the database file.\n\n    Parameters\n    ----------\n    acronym : Optional[str], optional\n        Acronym of the institution, by default None\n    \"\"\"\n\n    if acronym == None:\n        acronym = 'Select an acronym'\n\n    df_institutions = self.get_institutions()\n    institution_acronyms = list(df_institutions['acronym'])\n\n    if acronym not in  ['Select an acronym'] + institution_acronyms:\n        print(f'The acronym you entered \"{acronym}\" has not been registered in the database.')\n        acronym = 'Select an acronym'\n\n    wg_acronym = ipw.Dropdown(        \n        value=acronym,\n        options=  ['Select an acronym'] + institution_acronyms,\n        description='Acronym',\n        style=style,\n        layout=Layout(width=\"17%\", height=\"30px\")        \n    )\n\n    wg_institution_name = ipw.Text(\n        value='',\n        description='',\n        disabled=False         \n    )\n\n    deleting = ipw.Button(\n        description='Delete institution',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def change_acronym(change):            \n        new_acronym = change.new\n        name = df_institutions.query(f'acronym == \"{new_acronym}\"')['name'].values[0]            \n        wg_institution_name.value = name\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the institution info in the institutions.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        institutions_filename = 'institutions.txt'\n        df_institutions = self.get_institutions()\n        df_institutions = df_institutions.drop(df_institutions[df_institutions['acronym'] == wg_acronym.value].index)\n\n        df_institutions.to_csv(self.folder_db / institutions_filename, index=False)\n\n        with button_delete_output:\n            print(f'Institution deleted: {wg_acronym.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n    wg_acronym.observe(change_acronym, names='value')\n\n    # Display the widgets\n    display(ipw.HBox([wg_acronym, wg_institution_name]))\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.remove_materials","title":"<code>remove_materials()</code>","text":"<p>Remove one or several object materials from the database file.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def remove_materials(self):\n    \"\"\"Remove one or several object materials from the database file.\n    \"\"\"\n\n    materials = self.get_materials()        \n\n    wg_materials = ipw.SelectMultiple(            \n        options=  materials,\n        description='Materials',  \n        rows=10,           \n    )\n\n    deleting = ipw.Button(\n        description='Delete materials',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the materials in the object_materials.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        materials_filename = 'object_materials.txt'\n        materials = self.get_materials()\n\n        for material in list(wg_materials.value):\n            materials.remove(material)\n\n        pd.Series(materials).to_csv(self.folder_db / materials_filename, index=False, header=False)\n\n        with button_delete_output:\n            print(f'Materials deleted: {wg_materials.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(wg_materials)\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.remove_methods","title":"<code>remove_methods(acronym=None)</code>","text":"<p>Remove an analytical method from the database file.</p>"},{"location":"references/#msdb.msdb.DB.remove_methods--parameters","title":"Parameters","text":"<p>acronym : Optional[str], optional     Acronym of the method, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def remove_methods(self, acronym:Optional[str] = None):\n    \"\"\"Remove an analytical method from the database file.\n\n    Parameters\n    ----------\n    acronym : Optional[str], optional\n        Acronym of the method, by default None\n    \"\"\"\n\n    if acronym == None:\n        acronym = 'Select an acronym'\n\n    df_methods = self.get_methods()\n    method_acronyms = list(df_methods['acronym'])\n\n    if acronym not in  ['Select an acronym'] + method_acronyms:\n        print(f'The acronym you entered \"{acronym}\" has not been registered in the database.')\n        acronym = 'Select an acronym'\n\n    wg_acronym = ipw.Dropdown(        \n        value=acronym,\n        options=  ['Select an acronym'] + method_acronyms,\n        description='Acronym',\n        style=style,\n        layout=Layout(width=\"17%\", height=\"30px\")        \n    )\n\n    wg_method_name = ipw.Text(\n        value='',\n        description='',\n        disabled=False         \n    )\n\n    deleting = ipw.Button(\n        description='Delete method',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def change_acronym(change):            \n        new_acronym = change.new\n        name = df_methods.query(f'acronym == \"{new_acronym}\"')['name'].values[0]            \n        wg_method_name.value = name\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the method info in the analytical_methods.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        methods_filename = 'analytical_methods.txt'\n        df_methods = self.get_methods()\n        df_methods = df_methods.drop(df_methods[df_methods['acronym'] == wg_acronym.value].index)\n\n        df_methods.to_csv(self.folder_db / methods_filename, index=False)\n\n        with button_delete_output:\n            print(f'Method deleted: {wg_acronym.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n    wg_acronym.observe(change_acronym, names='value')\n\n    # Display the widgets\n    display(ipw.HBox([wg_acronym, wg_method_name]))\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.remove_objects","title":"<code>remove_objects(object_id=None)</code>","text":"<p>Remove a  object from the database file.</p>"},{"location":"references/#msdb.msdb.DB.remove_objects--parameters","title":"Parameters","text":"<p>object_id : Optional[str], optional     ID number of the object, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def remove_objects(self, object_id:Optional[str] = None):\n    \"\"\"Remove a  object from the database file.\n\n    Parameters\n    ----------\n    object_id : Optional[str], optional\n        ID number of the object, by default None\n    \"\"\"\n\n    if object_id == None:\n        object_id = 'Select an object ID'\n\n    object_ids = sorted(list(self.get_objects()['object_id']))\n\n    if object_id not in  ['Select an object ID'] + object_ids:\n        print(f'The object ID you entered \"{object_id}\" has not been registered in the database.')\n        object_id = 'Select an object ID'\n\n    objectId_widget = ipw.Dropdown(        \n        value=object_id,\n        options=['Select an object ID'] + object_ids,\n        description='Object ID',             \n    )\n\n\n    deleting = ipw.Button(\n        description='Delete object',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the object info in the objects_info.csv file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        objects_folder = self.folder_db\n        objects_filename = 'objects_info.csv'\n\n        df_objects = self.get_objects()\n        df_objects = df_objects.drop(df_objects[df_objects['object_id'] == objectId_widget.value].index)\n\n        df_objects.to_csv(objects_folder/objects_filename, index=False)\n\n        with button_delete_output:\n            print(f'Object deleted: {objectId_widget.value}')\n\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(objectId_widget)\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.remove_projects","title":"<code>remove_projects(project_id=None)</code>","text":"<p>Remove a  project from the database file.</p>"},{"location":"references/#msdb.msdb.DB.remove_projects--parameters","title":"Parameters","text":"<p>project_id : Optional[str], optional     ID number of the project, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def remove_projects(self, project_id:Optional[str] = None):\n    \"\"\"Remove a  project from the database file.\n\n    Parameters\n    ----------\n    project_id : Optional[str], optional\n        ID number of the project, by default None\n    \"\"\"\n\n    if project_id == None:\n        project_id = 'Select a project ID'\n\n    project_ids = list(self.get_projects()['project_id'])\n\n    if project_id not in  ['Select a project ID'] + project_ids:\n        print(f'The project ID you entered \"{project_id}\" has not been registered in the database.')\n        project_id = 'Select a project ID'\n\n    projectId_widget = ipw.Dropdown(        \n        value=project_id,\n        options=['Select a project ID'] + project_ids,\n        description='Project ID',             \n    )\n\n\n    deleting = ipw.Button(\n        description='Delete project',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the project info in the projects_info.csv file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        projects_folder = self.folder_db\n        projects_filename = 'projects_info.csv'\n\n        df_projects = self.get_projects()\n        df_projects = df_projects.drop(df_projects[df_projects['project_id'] == projectId_widget.value].index)\n\n        df_projects.to_csv(projects_folder/projects_filename, index=False)\n\n        with button_delete_output:\n            print(f'Project deleted: {projectId_widget.value}')\n\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(projectId_widget)\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.remove_techniques","title":"<code>remove_techniques()</code>","text":"<p>Remove one or several object techniques from the database file.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def remove_techniques(self):\n    \"\"\"Remove one or several object techniques from the database file.\n    \"\"\"\n\n    techniques = self.get_techniques()        \n\n    wg_techniques = ipw.SelectMultiple(            \n        options=  techniques,\n        description='Techniques',  \n        rows=10,           \n    )\n\n    deleting = ipw.Button(\n        description='Delete techniques',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the techniques in the object_techniques.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        techniques_filename = 'object_techniques.txt'\n        techniques = self.get_techniques()\n\n        for technique in list(wg_techniques.value):\n            techniques.remove(technique)\n\n        pd.Series(techniques).to_csv(self.folder_db / techniques_filename, index=False, header=False)\n\n        with button_delete_output:\n            print(f'Techniques deleted: {wg_techniques.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(wg_techniques)\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.remove_types","title":"<code>remove_types()</code>","text":"<p>Remove one or several object types from the database file.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def remove_types(self):\n    \"\"\"Remove one or several object types from the database file.\n    \"\"\"\n\n    types = self.get_types()        \n\n    wg_types = ipw.SelectMultiple(            \n        options=  types,\n        description='Types',  \n        rows=10,           \n    )\n\n    deleting = ipw.Button(\n        description='Delete types',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the types in the object_types.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        types_filename = 'object_types.txt'\n        types = self.get_types()\n\n        for type in list(wg_types.value):\n            types.remove(type)\n\n        pd.Series(types).to_csv(self.folder_db / types_filename, index=False, header=False)\n\n        with button_delete_output:\n            print(f'Types deleted: {wg_types.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(wg_types)\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.remove_users","title":"<code>remove_users(initials=None)</code>","text":"<p>Remove a user from the database file.</p>"},{"location":"references/#msdb.msdb.DB.remove_users--parameters","title":"Parameters","text":"<p>initials : Optional[str], optional     Initials of the user, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def remove_users(self,initials:Optional[str] = None):\n    \"\"\"Remove a user from the database file.\n\n    Parameters\n    ----------\n    initials : Optional[str], optional\n        Initials of the user, by default None\n    \"\"\"\n\n    if initials == None:\n        initials = 'Select the initials'\n\n    df_users = self.get_users()\n    initials_list = list(df_users['initials'])\n\n    if initials not in  ['Select the initials'] + initials_list:\n        print(f'The initials you entered \"{initials}\" has not been registered in the database.')\n        initials = 'Select the initials'\n\n    wg_initials = ipw.Dropdown(        \n        value=initials,\n        options=['Select the initials'] + initials_list,\n        description='Initials',    \n        layout=Layout(width=\"20%\", height=\"30px\"),\n        style=style,         \n    )\n\n    wg_name_surname = ipw.Text(\n        value='',\n        description='',\n        disabled=False,\n        layout=Layout(width=\"30%\", height=\"30px\"),\n        style=style,\n    )           \n\n    deleting = ipw.Button(\n        description='Delete user',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def change_initials(change):\n        new_initials = change.new\n        name = df_users.query(f'initials == \"{new_initials}\"')['name'].values[0]\n        surname = df_users.query(f'initials == \"{new_initials}\"')['surname'].values[0]\n        wg_name_surname.value = f'{name} {surname}'\n\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the person info in the users_info.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        users_folder = self.folder_db\n        users_filename = 'users_info.txt'\n\n        df_users = self.get_users()\n        df_users = df_users.drop(df_users[df_users['initials'] == wg_initials.value].index)\n\n        df_users.to_csv(users_folder/users_filename, index=False)\n\n        with button_delete_output:\n            print(f'User {wg_initials.value} deleted.')\n\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n    wg_initials.observe(change_initials, names='value')\n\n    # Display the widgets\n    display(ipw.HBox([wg_initials, wg_name_surname]))\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.remove_white_standards","title":"<code>remove_white_standards(id=None)</code>","text":"<p>Remove a white standard from the database file.</p>"},{"location":"references/#msdb.msdb.DB.remove_white_standards--parameters","title":"Parameters","text":"<p>id : Optional[str], optional     ID number of the white standard, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def remove_white_standards(self,id:Optional[str] = None):\n    \"\"\"Remove a white standard from the database file.\n\n    Parameters\n    ----------\n    id : Optional[str], optional\n        ID number of the white standard, by default None\n    \"\"\"\n\n    if id == None:\n        id = 'Select an ID'\n\n    df_standards = self.get_white_standards()\n    id_list = list(df_standards['ID'])\n\n    if id not in  ['Select an ID'] + id_list:\n        print(f'The ID you entered \"{id}\" has not been registered in the database.')\n        id = 'Select an ID'\n\n    wg_id = ipw.Dropdown(        \n        value=id,\n        options=['Select an ID'] + id_list,\n        description='ID',   \n        layout=Layout(width=\"15%\", height=\"30px\"),\n        style=style,          \n    )\n\n    wg_description = ipw.Text(\n        value='',\n        description='',\n        disabled=False,\n        layout=Layout(width=\"70%\", height=\"30px\"),\n        style=style,\n    )           \n\n    deleting = ipw.Button(\n        description='Delete standard',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def change_id(change):\n        new_id = change.new\n        description = df_standards.query(f'ID == \"{new_id}\"')['description'].values[0]            \n        wg_description.value = description\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the standard info in the white_standards.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        standards_folder = self.folder_db\n        standards_filename = 'white_standards.txt'\n\n        df_standards = self.get_white_standards()\n        df_standards = df_standards.drop(df_standards[df_standards['ID'] == wg_id.value].index)\n\n        df_standards.to_csv(standards_folder/standards_filename, index=False)\n\n        with button_delete_output:\n            print(f'ID {wg_id.value} deleted.')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n    wg_id.observe(change_id, names='value')\n\n    # Display the widgets\n    display(ipw.HBox([wg_id, wg_description]))\n    display(ipw.HBox([deleting, button_delete_output]))  \n</code></pre>"},{"location":"references/#msdb.msdb.add_db_name","title":"<code>add_db_name()</code>","text":"<p>Add the name and the folder location of databases in the db_config.json file. Use this function when you already have the databases files on your computer but not registered inside the msdb package.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_db_name():\n    \"\"\"Add the name and the folder location of databases in the db_config.json file. Use this function when you already have the databases files on your computer but not registered inside the msdb package.\n    \"\"\"\n\n    wg_path_folder = ipw.Text(\n        description = 'Path folder',\n        placeholder = 'Location of the databases folder on your computer',\n        value = '',\n        style = style, \n        layout=Layout(width=\"50%\", height=\"30px\"),\n    )\n\n    wg_name_db = ipw.Text(\n        description = 'DB name',\n        placeholder = \"Enter a db name\",\n        value = '',        \n        style = style,\n        layout=Layout(width=\"20%\", height=\"30px\"),\n    )        \n\n    recording = ipw.Button(\n        description='Save',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )\n\n    button_record_output = ipw.Output()\n\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the databases info in the db_config.json file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        # check whether the path folder is valid\n        if not Path(wg_path_folder.value).exists():\n            with button_record_output:\n                print(f'The path you entered {wg_path_folder.value} is not valid.')\n            return      \n\n        # Retrieve the config info\n        config = get_config_file()\n\n        # Existing databases\n        databases = config[\"databases\"]\n\n        # Update config with user data\n        databases[wg_name_db.value] = {'path_folder':wg_path_folder.value}\n        config['databases'] = databases            \n\n        # Save the updated config back to the JSON file\n        with open(config_file, \"w\") as f:\n            json.dump(config, f, indent=4)\n\n        with button_record_output:\n            print(f'Database info ({wg_name_db.value}) recorded in the db_config.json file.')\n\n\n    recording.on_click(button_record_pressed)\n\n    display(ipw.VBox([wg_name_db, wg_path_folder]))\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.get_config_file","title":"<code>get_config_file()</code>","text":"<p>Retrieve the content of the db_config.json file.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_config_file():\n    \"\"\"Retrieve the content of the db_config.json file.\"\"\"\n\n    with open(config_file, 'r') as file:\n            config = json.load(file)\n            return config\n</code></pre>"},{"location":"references/#msdb.msdb.get_db_names","title":"<code>get_db_names()</code>","text":"<p>Retrieve the names of the registered databases.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_db_names():\n    \"\"\"Retrieve the names of the registered databases.\"\"\"\n\n    config_file = Path(__file__).parent / 'db_config.json'\n\n    with open(config_file, 'r') as file:\n            config = json.load(file)\n            db_names = list(config['databases'].keys())\n            if len(db_names) &gt; 0:\n                return db_names\n            else:\n                print('No databases have been registered.')\n                return None  \n</code></pre>"},{"location":"references/#msdb.msdb.remove_db","title":"<code>remove_db(db_name=None)</code>","text":"<p>Remove a database from the db_config.json file.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def remove_db(db_name:Optional[str] = None):\n    \"\"\"Remove a database from the db_config.json file.\"\"\"\n\n    wg_name_db = ipw.Dropdown(\n        description = 'DB name',\n        value = db_name,\n        options = get_db_names(),\n        style = style,\n        layout=Layout(width=\"20%\", height=\"30px\"),\n    )\n\n    config_file = Path(__file__).parent / 'db_config.json'\n\n    recording = ipw.Button(\n        description='Delete DB',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Delete the database info in the db_config.json file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        with open(config_file, \"r\") as f:\n            config = json.load(f)\n\n        # Existing databases\n        databases = config[\"databases\"]\n\n        # Delete the database\n        del databases[wg_name_db.value]        \n        config['databases'] = databases            \n\n        # Save the updated config back to the JSON file\n        with open(config_file, \"w\") as f:\n            json.dump(config, f, indent=4)\n\n\n        with button_record_output:\n            print(f'Database info ({wg_name_db.value}) removed from the db_config.json file.')\n\n    recording.on_click(button_record_pressed)\n\n    display(ipw.VBox([wg_name_db]))\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.update_db_folder","title":"<code>update_db_folder(db_name=None, path_folder=None, widgets=True)</code>","text":"<p>Modify the database info stored in the db_config.json file. Only works if some databases are already registered.</p>"},{"location":"references/#msdb.msdb.update_db_folder--parameters","title":"Parameters","text":"<p>db_name : Optional[str], optional     Name of the database for which the info will change, by default None</p> Optional[str], optional <p>Location of the databases folder on your computer, by default None</p> Optional[bool], optional <p>Whether to use the ipywidgets, by default True When False, it automatically modify the database info based on the given parameter values.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def update_db_folder(db_name:Optional[str] = None, path_folder:Optional[str] = None, widgets:Optional[bool] = True):\n    \"\"\"Modify the database info stored in the db_config.json file. Only works if some databases are already registered.\n\n    Parameters\n    ----------\n    db_name : Optional[str], optional\n        Name of the database for which the info will change, by default None\n\n    path_folder : Optional[str], optional\n        Location of the databases folder on your computer, by default None\n\n    wdigets : Optional[bool], optional\n        Whether to use the ipywidgets, by default True\n        When False, it automatically modify the database info based on the given parameter values.\n    \"\"\"\n\n    existing_db_names = get_config_file()['databases']\n\n    if len(existing_db_names) == 0:\n        db_names = []\n    else:\n        db_names = list(existing_db_names.keys())\n\n    wg_path_folder = ipw.Text(\n        description = 'Path folder',\n        placeholder = 'Location of the databases folder on your computer',\n        value = path_folder,\n        style = style, \n        layout=Layout(width=\"50%\", height=\"30px\"),\n    )\n\n    wg_name_db = ipw.Combobox(\n        description = 'DB name',\n        placeholder = \"Enter a db name\",\n        value = db_name,\n        options = db_names,\n        style = style,\n        layout=Layout(width=\"20%\", height=\"30px\"),\n    )        \n\n    recording = ipw.Button(\n        description='Save',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )\n\n    button_record_output = ipw.Output()\n\n\n\n\n\n\n    if widgets:\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the databases info in the db_config.json file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            with open(config_file, \"r\") as f:\n                config = json.load(f)\n\n            # Existing databases\n            databases = config[\"databases\"]\n\n            # Update config with user data\n            databases[wg_name_db.value] = {'path_folder':wg_path_folder.value}\n            config['databases'] = databases            \n\n            # Save the updated config back to the JSON file\n            with open(config_file, \"w\") as f:\n                json.dump(config, f, indent=4)\n\n            with button_record_output:\n                print(f'Database info ({wg_name_db.value}) recorded in the db_config.json file.')\n\n\n        recording.on_click(button_record_pressed)\n\n        display(ipw.VBox([wg_name_db, wg_path_folder]))\n        display(ipw.HBox([recording, button_record_output]))\n\n    else:\n        with open(config_file, \"r\") as f:\n            config = json.load(f)\n\n        # Existing databases\n        databases = config[\"databases\"]\n\n        # Update config with user data\n        databases[wg_name_db.value] = {'path_folder':wg_path_folder.value}\n        config['databases'] = databases\n\n        # Save the updated config back to the JSON file\n        with open(config_file, \"w\") as f:\n            json.dump(config, f, indent=4)\n</code></pre>"}]}