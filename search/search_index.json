{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome !","text":"<p>Welcome on the documentation website of the material science database (msdb) python package: an open source and FAIR database framework for the analyses of materials. You will find on this website information and tutorials on how to install and use the <code>msdb</code> package.</p>"},{"location":"#new-users","title":"New users","text":"<p>If you are a new user, look at the Get started section. It provides all the basic information you need to know about the package.</p>"},{"location":"#contributions","title":"Contributions","text":"<p>We are welcoming any contributions, comments (positive and negative), ideas, etc. This is important to improve the quality of the package and its documentation. If you have encountered a bug or spotted an error, please don't hesitate to contact us by email (see below).</p>"},{"location":"#contacts","title":"Contacts","text":"<p>Email: microfading@mailo.com </p>"},{"location":"#what-is-this-package-about","title":"What is this package about ?","text":"<p>This package has been designed for users that perform scientific analyses on materials. It aims to provide a generic working environment that can be used to store information about the objects, the materials, the analytical methods, the users, etc. The idea is to have a central location - a folder on your computer - that contains several databases files (.txt and .csv files) from which information can be easily retrieved and connected to analytical data. This package aims to support the creation and management of such database environment.   </p>"},{"location":"#what-does-this-package-provide","title":"What does this package provide ?","text":"<p>The package provides two main resources:</p> <ul> <li> <p>database files: create txt and csv files to store any relevant information regarding your analytical tasks.</p> </li> <li> <p>CRUD functions: a set of functions to create, read, update, and delete the content of the database files.</p> </li> </ul>"},{"location":"#website-structure","title":"Website structure","text":"<p>The documentation follows the structure described by Daniele Procida, which organizes documentation into four different groups (Tutorials, How-to, Explanations, References).</p>"},{"location":"#cite-package","title":"Cite package","text":"<p>If you are using this package for a publication, please cite the package as follows: </p> <ul> <li>Patin, G., 2025, material science database, Python Package, v.0.0.7, https://github.com/g-patin/msdb</li> </ul>"},{"location":"create-DB-class-instance/","title":"Create a DB class instance","text":"<p>The functions provided by the msdb package only work on an instance of a <code>DB</code> class. The creation of an instance of a <code>DB</code> class is a two-steps procedure and is described below:</p>"},{"location":"create-DB-class-instance/#1-create-the-database-files","title":"1. Create the database files","text":"<p>In this step, you will create the database files inside a given folder on your local computer. You will need to pass in two values:</p> <ol> <li> <p>The name of your database.  </p> </li> <li> <p>The absolute path of the folder on your local computer where the database files will be created. </p> </li> </ol> <pre><code>import msdb\n</code></pre> <pre><code># When running this command, ipywidget objects will appear (see figure below)\n# inside which you will be able to pass in information\nmsdb.create_db()\n</code></pre> <p></p> <p>Ipywidgets to be filled when creating the databases files</p> <p>Once you have filled the ipywidgets (as illustrated below), you can click on the button 'Create databases' which will automatically create the databases files inside the designated folder.</p> <p></p> <p>Ipywidgets filled with the requested info</p>"},{"location":"create-DB-class-instance/#2-create-db-class-instance","title":"2. Create DB class instance","text":"<p>Create the instance using the name of the database.</p> <pre><code>db = msdb.DB(db_name='test')\ndb\n</code></pre> <pre>\nDB data class\n</pre>"},{"location":"create-databases/","title":"Create databases","text":"<p>In this section, you will learn how to create the databases files on your local computer. Use the following code for creating the databases. </p> <pre><code>import msdb\n</code></pre> <pre><code>msdb.create_db()\n</code></pre> <p>It will display some ipywdigets inside which you can enter the info (db name and folder path) required to create the databases files (see figure below).</p> <p></p> <p>Ipywidgets to be filled when creating the databases files</p> <p>Once you have filled the ipywidgets with valid info, clicking on the button 'Create databases' will lead to the creation of the databases files in the registered folder. Additionally, it will register the database in the db_config.json file. </p>"},{"location":"databases-files/","title":"Databases files","text":"<p>In this section, you will learn more about the databases files. The latter consists of txt and csv files in which information related to the analyses of materials can be stored. A short description of each file is provided in Table 1. </p> <p>The txt files are more basic and usually consist of a list of information. The two csv files are a bit more complex, they gather many information about the objects and projects and often make use of the information available in the txt files. The latter can be viewed as \"ressources\" that you keep up-to-date and that can be used and combined to describe your objects and projects. </p> <p>The databases files are stored in a folder on your local computer for which you will need to provide a name when creating the files. In other words, we assign a name to a path object so that we only need to refer to the name for the program to find the databases files on your computer.</p> <p>Table 1. Description of the databases files.</p> File names Description devices.txt Information about the analytical devices institutions.txt Information about the institution performing the analyses lamps.txt Information about the lamps used to perform the analyses object_creators.txt Name and surname of the persons who created the objects analyzed object_materials.txt A list of materials that can be found in objects objects_info.csv Information about the objects analyzed object_techniques.txt A list of techniques used to create the objects object_types.txt A list of general object types projects_info.csv Information about the projects within which objects are analyzed users_info.txt Name, surname, and initials of persons performing the analyses white_standards.txt Information about the white standards used for the analyses"},{"location":"databases-usage/","title":"Databases usage","text":"<p>In this section, you will learn how to manipulate the databases files. Four types of operations on the files are provided by the <code>msdb</code> package and are described in the following paragraphs:</p> <ol> <li> <p>Read info : retrieve or get the content stored inside the databases files</p> </li> <li> <p>Add info : add new content inside the databases files</p> </li> <li> <p>Update info : modify existing content stored inside the databases files</p> </li> <li> <p>Delete info : delete the content stored inside the databases files</p> </li> </ol> <p>These operations can be accessed through python functions that can only be used on an instance of a <code>DB</code> class. In other words, you will need to create an instance of the <code>DB</code> class (see create instance class). </p> <pre><code>import msdb\n\n# Create an instance of the DB class\n# I previously created a database called \"test\" with corresponding databases\n# files on which the operations mentioned above can be performed\n\ndb = msdb.DB(db_name='test')\ndb\n</code></pre> <pre>\nDB class - name  = test - folder = /home/johhn/Documents/databases\n</pre>"},{"location":"databases-usage/#1-get-read-info","title":"1. Get / read info","text":"<p>To retrieve the content stored inside the databases files, use the functions that start with the word 'get'. They are 12 get functions for which a short description is provided in Table 1.</p> <p> </p> <p>Table 1. Description of the get functions.</p> Function names Description get_creators Get the name and surname of persons that created the objects analyzed get_devices Get information about the analytical devices used to analyze objects get_institutions Get information about the institution performing analyses get_lamps Get information about the lamps used to perform analyses get_materials Get a list of materials found in objects get_methods Get information about the analytical methods used to investigate objects get_objects Get the information about the objects analyzed get_projects Get information about the projects within which objects are analyzed get_techniques Get a list of techniques used to create objects get_types Get a list of general object types get_users Get the name, surname, and initials of persons performing the analyses get_white_standards Get information about the white standards used for the analyses <p>For the time being, only two functions (<code>get_objects</code> and <code>get_projects</code>) allow for arguments to be passed in to perform queries on the returned dataframe (see figure below for an example).</p> <p></p> <p>get_projects() function without and with arguments.</p>"},{"location":"databases-usage/#2-add-create-info","title":"2. Add / create info","text":"<p>To add new content inside the databases files, use the functions that start with the word 'add'. They are 12 add functions for which a short description is provided in Table 2.</p> <p>Table 2. Description of the add functions.</p> Function names Description add_creators Add a new person that created the objects analyzed add_devices Add a new analytical device used to analyze objects add_institutions Add a new institution performing analyses add_lamps Add a new lamp used to perform analyses add_materials Add a new material found in objects add_methods Add a new analytical method to investigate objects add_objects Add a new objects to be analyzed add_projects Add a new project within which objects are analyzed add_techniques Add a new technique used to create objects add_types Add a new type of objects add_users Add a new person performing the analyses add_white_standards Add a new white standard used for the analyses <p>All the add functions return ipywidgets inside which you can enter the requested info before saving them by clicking on the 'record' button (see figure below for an example).</p> <p></p> <p>add_users() function.</p>"},{"location":"databases-usage/#3-update-info","title":"3. Update info","text":"<p>For the time being, one can only update the content of the two csv files (objects_info.csv and projects_info.csv), using the functions <code>update_objects()</code> and <code>update_projects()</code> respectively. These two functions works similarly and the way to use them is described below. There are two ways you can use these functions : with or with ipywidgets. Simply, set the parameters \"widgets\" fo each function to True or False to use one or the other way. </p> <p>Method with ipywidgets</p> <p></p> <p>update_objects() function using ipywidgets.</p> <p>Method without ipywidgets</p> <pre><code># For two projects ('2023-011' and '2023-555'), I assigned\n# the value 'JD' (initials for John Doe) for the 'project_leader' column.\n\ndb.update_projects(\n    column='project_leader',\n    new_value='JD', \n    project_id=['2023-011', '2025-555']\n)\n</code></pre>"},{"location":"databases-usage/#4-delete-info","title":"4. Delete info","text":"<p>To delete content from the databases files, use the functions that start with the word 'delete'. They are 12 delete functions for which a short description is provided in Table 4.</p> <p>Table 4. Description of the delete functions.</p> Function names Description delete_creators Delete a person that created the objects analyzed delete_devices Delete an analytical device used to analyze objects delete_institutions Delete an institution performing analyses delete_lamps Delete a lamp used to perform analyses delete_materials Delete a material found in objects delete_methods Delete am analytical method to investigate objects delete_objects Delete an object to be analyzed delete_projects Delete a project within which objects are analyzed delete_techniques Delete a technique used to create objects delete_types Delete a type of objects delete_users Delete a person performing the analyses delete_white_standards Delete a white standard used for the analyses <p>You can always run the delete function directly without passing arguments. It will always display ipywidgets allowing you to select the item(s) to be deleted and then to click on the 'delete' button to effectively remove the item(s) from the databases files (see figure below for an example). </p> <p></p> <p>delete_methods() function. In this case, the 'MFT' method will be removed.</p>"},{"location":"db_config/","title":"db_config file","text":""},{"location":"db_config/#1-description","title":"1. Description","text":"<p>The db_config file is a json file inside which basic information related to the databases are being stored. Currently, only the name and location of the databases are being stored inside the json file. This file enables the <code>msdb</code> package to find the location of the databases files so that basic operations (create, read, update, delete)  on the files can be performed. </p> <p>The json file is located inside the folder of the <code>msdb</code> package. To know where it is on your local computer, import the <code>msdb</code> package inside a jupyter notebook and simply run the name of the package, as illustrated below. It will return the location of the __init__.py file. The db_config file is in the same folder as the  __init__.py file.</p> <pre><code>import msdb\n</code></pre> <pre><code>msdb\n</code></pre> <pre>\n&lt; module 'msdb' from '/home/john/anaconda3/lib/python3.11/site-packages/msdb/__init__.py'&gt;\n</pre>"},{"location":"db_config/#2-read-content","title":"2. Read content","text":"<p>To read the content of the db_config file, use the following lines of code:</p> <pre><code>import msdb\n</code></pre> <pre><code># display the content of the db_config.json file\n# we can see that I created two databases : 'db' and 'MFT'\nmsdb.get_config_file()\n</code></pre> <pre>\n{'databases': {'db': {'path_folder': '/home/john/Documents/databases'},    \n  'MFT': {'path_folder': '/home/john/Documents/MFT/databases'}}}\n</pre> <p> </p> <p>For more information on how to manage the content of the db_config file, consult the Manage the db_config file section.</p>"},{"location":"get-started/","title":"Get started","text":"<p>In this section, we will give you all the essential information to correctly start using the <code>msdb</code> package.</p>"},{"location":"get-started/#1-create-databases-files","title":"1. Create databases files","text":"<p>If this is the first time that you are using the <code>msdb</code> be package, you will need to create the databases files. The latter consist of txt and csv files in which you will be able to store information about the analyses of materials. Check the databases files section for more information about it.</p> <p>To create the databases files, follow the lines of code given below. </p> <pre><code># first import the msdb package\nimport msdb\n</code></pre> <pre><code># execute this line to display the ipywidgets showed below.\n# fill in the database name and folder location\n# click on the \"Create databases\" button\nmsdb.create_db()\n</code></pre> <p> </p> <p></p> <p>Ipywidgets to be filled when creating the databases files</p> <p></p> <p>Ipywidgets filled with the databases information</p> <p> </p>"},{"location":"get-started/#2-central-role-of-the-db-class","title":"2. Central role of the <code>DB</code> class","text":"<p>Once you have created databases and registered them in the msdb config file, you will be able to create an instance of the <code>DB</code> class, passing the name of a registered database as argument (see code below). Most of the functions provided by the package can only be accessed through the <code>DB</code> class. </p> <pre><code>import msdb\n</code></pre> <pre><code>db = msdb.DB(db_name='test_db')\n# where 'test_db' is the name of a database that I previously created\n</code></pre> <p> </p>"},{"location":"get-started/#3-four-keywords-function-add-get-update-delete","title":"3. Four keywords function: add, get, update, delete","text":"<p>Once you have created an instance of the <code>DB</code> class, you can access the functions. The name of each function starts by a verb: add, get, update, or delete. Enter one of the verbs and use the auto-completion tool (<code>Tab</code> button) to display a list of available functions.</p> <p></p> <p>List of all the \"get\" functions.</p> <p>All the functions can be run without passing any arguments, this behaviour will output the default values. For some functions, you have the possibility to pass in some arguments that it will enable you to adjust the output according to your needs. For example, running the function <code>get_projects</code>without any arguments will return information about all the registered projects. But you can ask the function to return only the projects that match some requirements. For instance, in the exemple illustrated below, only the projects lead by Gauthier Patin (GP) and for which microfading (MFT) and photos were performed are being returned. </p> <p></p> <p>Play with the argument values of functions </p>"},{"location":"get-started/#4-use-the-docstrings","title":"4. Use the docstrings","text":"<p>Whenever you will use functions from the <code>msdb</code> package, you will always be able to access the docstrings. These contain valuable information that will help you to adequately use the functions. To open the dosctrings, you have two possibilites:</p> <ol> <li> <p>Write the name of a function (without parentheses) followed by a question mark (see example below).</p> <p></p> <p>Opening a docstring with a question mark.</p> </li> <li> <p>Write the name of a function (with parentheses), place the cursor inside the parentheses and press <code>Ctrl + Caps Lock</code> (see example below).</p> </li> </ol> <p></p> <p>Opening a tooltip docstring window.</p>"},{"location":"installation/","title":"Installation","text":"<p>To install the latest version of the msdb package, open a terminal and enter the following command:</p> <pre><code>pip install msdb\n</code></pre> <p>If you wish to install a specific version of the msdb package, the version number can be added to the pip command as illustrated in the following example:</p> <pre><code>pip install msdb==0.0.4\n</code></pre> <p> </p> <p>To upgrade the package, open a terminal and enter the following command</p> <pre><code>pip install --upgrade msdb\n</code></pre>"},{"location":"manage_db_config/","title":"Manage the db_config file","text":"<p>In this section, you will learn how to manage the content of the db_config.json file. We will show you how to:</p> <ul> <li>read content</li> <li>add content</li> <li>update content</li> <li>delete content</li> </ul> <p>For a description of the json file, consult the db_config file section.</p>"},{"location":"manage_db_config/#1-read-content","title":"1. Read content","text":"<p>To read the content of the db_config file, use the following lines of code:</p> <pre><code>import msdb\n</code></pre> <pre><code># display the content of the db_config.json file\n# we can see that I created two databases : 'db' and 'MFT'\nmsdb.get_config_file()\n</code></pre> <pre>\n{'databases': {'db': {'path_folder': '/home/john/Documents/databases'},    \n  'MFT': {'path_folder': '/home/john/Documents/MFT/databases'}}}\n</pre>"},{"location":"manage_db_config/#2-add-content","title":"2. Add content","text":"<p>There are two possibilities to add content to the db_config file:</p> <ol> <li> <p>You can either create a new database along with the txt and csv files. This will automatically register the database in the db_config file (see create databases).</p> </li> <li> <p>The databases files have already been created on your local computer and you simply want to register the database inside in the db_config file. In that case, you can use the <code>register_db_name()</code> function, as illustrated below.</p> </li> </ol> <pre><code>import msdb\n</code></pre> <pre><code># This command will display two ipywidgets inside which you will be able\n# to register the database name and folder location.\nmsdb.register_db_name()\n</code></pre>"},{"location":"manage_db_config/#3-update-content","title":"3. Update content","text":"<p>Updating the content of the db_config.json file consists of changing the folder location of an existing database. To perform that operation, use the <code>update_db_folder()</code> function, as illustrated below.</p> <p></p> <p>Update the folder location of an existing database</p>"},{"location":"manage_db_config/#4-delete-content","title":"4. Delete content","text":"<p>To delete a given database from the db_config.json file, use the <code>delete_db()</code> function, as illustrated below. It will only remove the database from db_config.json file. The txt and csv databases files have to delete be manually. </p> <p></p> <p>Delete databases from the db_config.json file</p>"},{"location":"references/","title":"References","text":""},{"location":"references/#commands","title":"Commands","text":""},{"location":"references/#msdb-management","title":"msdb management","text":"<ul> <li><code>create_DB [folder]</code> - Create two empty databases (projects and objects).</li> <li><code>get_creators</code> - Retrieve a list of names corresponding to the persons that created the microfaded objects.</li> <li><code>get_DB [db]</code> - Retrieve the databases.</li> <li><code>get_institutions</code> - Retrieve a list of institutions owning the microfaded objects.</li> <li><code>get_path_DB</code> - Retrieve the absolute path of the folder where the databases are stored.</li> <li><code>get_persons</code> - Retrieve a list of persons that performed microfading analyses.</li> <li><code>add_new_institution</code> - Add a new institution to the database.</li> <li><code>add_new_person</code> - Add a new person to the list of persons doing microfading analyses.</li> <li><code>add_new_project</code> - Add a new project to the database.</li> <li><code>add_new_object</code> - Add a new object to the database.</li> <li><code>update_DB_project [new, old]</code> - Modify or add a new parameter to the project database.</li> <li><code>update_DB_object [new, old]</code> - Modify or add a new parameter to the object database.</li> </ul>"},{"location":"references/#db-class","title":"DB class","text":""},{"location":"references/#msdb.msdb.DB","title":"<code>DB</code>","text":"Source code in <code>src/msdb/msdb.py</code> <pre><code>class DB:\n\n    def __init__(self, db_name:Optional[str] = None, config_file:Optional[str] = Path(__file__).parent / 'db_config.json') -&gt; None:\n        \"\"\"Instantiate a DB class object.\n\n        Parameters\n        ----------\n\n        db_name : Optional[str]\n            Name of the databases, by default None\n            When None, it retrieves the first databases info registered in the db_config.json file\n\n        config_file : Optional[str|Path]\n            Location of the configuration file, by default Path(__file__).parent/'db_config.json'\n\n        \"\"\"\n\n        self.db_name = db_name       \n        self.config_file = config_file\n\n        # Check whether the db_config.json file exists\n        self._init_config()                  \n\n        # Check whether databases were created\n        if len(get_config_file()['databases']) == 0:\n            print('There are no databases registered. Create a database to start using the functions available through the DB class.')\n            return None\n\n        # Check whether the name_db value is valid or select the first registered database name\n        existing_dbs = get_db_names()\n\n        if db_name == None:\n            self.db_name = get_db_names()[0]    # Select the first registered database name    \n\n        elif self.db_name not in existing_dbs:\n            print(f'The name_db value you entered ({self.db_name}) has not been registered. Please select a registered database name.')\n            return\n\n        self.folder_db = Path(get_config_file()['databases'][self.db_name]['path_folder'])\n\n\n    def _init_config(self):\n        \"\"\"Check whether the db_config.json exists.\n        \"\"\"\n\n        if not os.path.exists(self.config_file):\n            print(f'The file {self.config_file} has been deleted ! Please re-install the msdb package.')\n            return None\n\n\n    def __repr__(self):\n        return f'DB class - name = {self.db_name}  - folder = {self.folder_db}'\n\n\n    def add_creators(self):\n        \"\"\"Record a new object creator in the object_creators.txt file\n        \"\"\"\n\n        # Function to update the text file if the initials are unique\n        def update_text_file(name, surname):            \n\n            df_creators = self.get_creators()\n            df_creators = pd.concat([df_creators, pd.DataFrame(data=[name,surname], index=['name','surname']).T])\n            df_creators = df_creators.sort_values(by='surname')\n            df_creators.to_csv(self.folder_db/'object_creators.txt',index=False)\n\n            print(f\"Added: {surname}, {name}\")\n\n        # Define ipython widgets\n        name_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a name (optional)',\n            description='Name', \n            style=style              \n        )\n\n        surname_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a surname',\n            description='Surname',    \n            style=style         \n        )\n\n        recording = ipw.Button(\n            description='Record creator',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the creator info in the objet_creators.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            name = name_widget.value.strip()\n            surname = surname_widget.value.strip()\n\n            with button_record_output:\n\n                if surname: # ensure the surname field is complete\n                    update_text_file(name, surname)\n                else:\n\n                    print(\"Please enter at least a surname.\")\n\n\n        recording.on_click(button_record_pressed)\n\n        display(surname_widget,name_widget)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_devices(self):\n        \"\"\"Record a new analytical device in the devices.txt file\n        \"\"\"\n\n        # Function to update the text file if the initials are unique\n        def update_text_file(id, name, description):  \n\n            df_devices = self.get_devices()\n\n            existing_devices = df_devices['ID'].values\n\n            if id in existing_devices:\n                print(f'The ID you entered ({id}) has already been attributed to another device:')   \n                print(df_devices[df_devices['ID'] == id])  \n\n            else:\n                df_devices = pd.concat([df_devices, pd.DataFrame(data=[id,name,description], index=['ID','name','description']).T])\n                df_devices = df_devices.sort_values(by='ID')\n                df_devices.to_csv(self.folder_db / 'devices.txt',index=False)\n\n                print(f\"Device added: {id}, {name}\")\n\n        # Define ipython widgets\n        wg_id = ipw.Text(        \n            value='',\n            placeholder='Enter an ID',\n            description='Device ID',  \n            style=style,\n            layout=Layout(width=\"40%\", height=\"30px\")             \n        )\n\n        wg_name = ipw.Text(        \n            value='',\n            placeholder='Enter name',\n            description='Device name',\n            style=style,\n            layout=Layout(width=\"40%\", height=\"30px\")             \n        )\n\n        wg_description = ipw.Text(        \n            value='',\n            placeholder='Briefly describe the device purpose (Optional)',\n            description='Device description',   \n            style=style,\n            layout=Layout(width=\"40%\", height=\"30px\")       \n        )\n\n        recording = ipw.Button(\n            description='Record device',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the device info in the devices.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            id = wg_id.value.strip()\n            name = wg_name.value.strip()\n            description = wg_description.value.strip()\n\n            with button_record_output:\n\n                if id and name: # ensure the id and name fields are complete\n                    update_text_file(id, name, description)\n                else:                    \n                    print(\"Please enter at least an ID and a name.\")\n\n\n        recording.on_click(button_record_pressed)\n\n        display(wg_id,wg_name,wg_description)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_institutions(self):        \n        \"\"\"Record a new institution in the institutions.txt file\n        \"\"\"\n\n        # Function to get the existing initials from the file\n        def get_existing_acronyms(file_path):\n            try:\n                df_institutions = self.get_institutions()\n                existing_acronyms = df_institutions['acronym'].values                \n                return existing_acronyms\n            except FileNotFoundError:\n                # If the file does not exist, return an empty set\n                return set()\n\n        # Function to update the text file if the initials are unique\n        def update_text_file(file_path, name, acronym):\n            # Check if the acronym already exists\n            existing_acronyms = get_existing_acronyms(file_path)\n\n            if acronym in existing_acronyms:\n                print(f\"Acronym '{acronym}' already exists. Please use a different acronym.\")\n            else:\n                df_institutions = self.get_institutions()\n                df_institutions = pd.concat([df_institutions, pd.DataFrame(data=[name,acronym], index=['name','acronym']).T])\n                df_institutions = df_institutions.sort_values(by='name')\n                df_institutions.to_csv(self.folder_db/'institutions.txt',index=False)\n\n                print(f\"Added: {name} : {acronym}\")\n\n        # Define ipython widgets\n        name_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a name',\n            description='Name', \n            style=style,\n            layout=Layout(width=\"40%\", height=\"30px\")              \n        )\n\n        acronym_widget = ipw.Text(        \n            value='',\n            placeholder='Enter an acronym',\n            description='Acronym', \n            style=style,\n            layout=Layout(width=\"40%\", height=\"30px\")            \n        )\n\n        recording = ipw.Button(\n            description='Record institution',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the person info in the persons.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            name = name_widget.value.strip()            \n            acronym = acronym_widget.value.strip()\n\n            with button_record_output:\n\n                if name and acronym: # ensure all fields are filled\n                    update_text_file(self.folder_db / 'institutions.txt', name, acronym)\n                else:\n\n                    print(\"Please enter all fields (Name, Acronym)\")\n\n        recording.on_click(button_record_pressed)\n\n        display(name_widget,acronym_widget)\n        display(ipw.HBox([recording, button_record_output]))       \n\n\n    def add_lamps(self):\n        \"\"\"Record a new lamp in the lamps.txt file\n        \"\"\"\n\n        # Function to get the existing lamps ID from the file\n        def get_existing_lamps():\n            try:\n                df_lamps = self.get_lamps()\n                existing_lamps = df_lamps['ID'].values                \n                return existing_lamps\n            except FileNotFoundError:\n                # If the file does not exist, return an empty set\n                return set()\n\n        # Function to update the text file if the ID is unique\n        def update_text_file(ID, description):\n            # Check if the ID already exists\n            existing_lamps = get_existing_lamps()\n\n            if ID in existing_lamps:\n                print(f\"ID '{ID}' already exists. Please use a different ID.\")\n            else:\n                df_lamps = self.get_lamps()\n                df_lamps = pd.concat([df_lamps, pd.DataFrame(data=[ID,description], index=['ID','description']).T])\n                df_lamps = df_lamps.sort_values(by='ID')\n                df_lamps.to_csv(self.folder_db/'lamps.txt',index=False)\n\n                print(f\"Added: {ID} : {description}\")\n\n        # Define ipython widgets\n        wg_ID = ipw.Text(        \n            value='',\n            placeholder='Enter an ID',\n            description='ID', \n            layout=Layout(width=\"40%\", height=\"30px\"),\n            style=style,              \n        )\n\n        wg_description = ipw.Text(        \n            value='',\n            placeholder='Enter a brief description',\n            description='Description', \n            layout=Layout(width=\"40%\", height=\"30px\"),\n            style=style,            \n        )\n\n        recording = ipw.Button(\n            description='Record lamp',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the lamp info in the lamps.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            id = wg_ID.value.strip()            \n            description = wg_description.value.strip()\n\n            with button_record_output:\n\n                if id and description: # ensure all fields are filled\n                    update_text_file(id, description)\n                else:                    \n                    print(\"Please enter all fields (ID, description)\")\n\n        recording.on_click(button_record_pressed)\n\n        display(wg_ID,wg_description)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_materials(self, name:Optional[str] = None):\n        \"\"\"Register a new object material.\n\n        Returns\n        -------\n        ipywdigets\n            fill in the name of the material to be registered. \n        \"\"\"\n\n        # Define ipython widgets\n\n        wg_material = ipw.Text(        \n            value=name,\n            placeholder='Enter a name',\n            description='Material',  \n            style=style,\n            layout=Layout(width=\"40%\", height=\"30px\")             \n        )    \n\n        recording = ipw.Button(\n            description='Record material',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_record_output = ipw.Output()\n\n\n        # Define the path of the users database file\n\n        databases_folder = self.folder_db\n        materials_filename = 'object_materials.txt'\n\n\n        # Define some functions\n        def update_text_file(new_value):\n\n            # Check if the material has already been registered \n            existing_materials = self.get_materials()  \n\n            if new_value in existing_materials:\n                print(f'The material \"{new_value}\" has already been registered.')\n\n            else:\n                existing_materials.append(str(new_value).lower())         \n                existing_materials = sorted(existing_materials)\n\n                with open(databases_folder / materials_filename, 'w') as f:\n                        f.write('\\n'.join(existing_materials))\n\n                f.close()            \n\n                print(f\"Material added: {new_value}\")\n\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the type name in the object_materials.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n            material_name = wg_material.value.strip()\n\n            with button_record_output:            \n\n                if material_name: # ensure all fields are filled\n                    update_text_file(material_name)\n                else:                    \n                    print(\"Please enter a material name\")\n\n\n        # Link the widget button to the function\n        recording.on_click(button_record_pressed)\n\n        # Display the widgets\n        display(wg_material)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_methods(self):        \n        \"\"\"Record a new analytical method in the analytical_methods.txt file\n        \"\"\"\n\n        # Function to get the existing acronym from the file\n        def get_existing_acronyms():\n            try:\n                df_methods = self.get_methods()\n                existing_acronyms = df_methods['acronym'].values                \n                return existing_acronyms\n            except FileNotFoundError:\n                # If the file does not exist, return an empty set\n                return set()\n\n        # Function to update the text file if the initials are unique\n        def update_text_file(acronym, name):\n            # Check if the acronym already exists\n            existing_acronyms = list(get_existing_acronyms())\n\n            if acronym in existing_acronyms:\n                print(f\"Acronym '{acronym}' already exists. Please use a different acronym.\")\n            else:\n                df_methods = self.get_methods()\n                df_methods = pd.concat([df_methods, pd.DataFrame(data=[acronym, name], index=['acronym', 'name']).T])\n                df_methods = df_methods.sort_values(by='acronym')\n                df_methods.to_csv(self.folder_db/'analytical_methods.txt',index=False)\n\n                print(f\"Added: {acronym} : {name}\")\n\n        # Define ipython widgets\n        name_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a name',\n            description='Name', \n            style=style,\n            layout=Layout(width=\"40%\", height=\"30px\")              \n        )\n\n        acronym_widget = ipw.Text(        \n            value='',\n            placeholder='Enter an acronym',\n            description='Acronym',   \n            style=style,\n            layout=Layout(width=\"40%\", height=\"30px\")          \n        )\n\n        recording = ipw.Button(\n            description='Record method',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the person info in the persons.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            name = name_widget.value.strip()            \n            acronym = acronym_widget.value.strip()\n\n            with button_record_output:\n\n                if name and acronym: # ensure all fields are filled\n                    update_text_file(acronym,name)\n                else:\n\n                    print(\"Please enter all fields (Name, Acronym)\")\n\n        recording.on_click(button_record_pressed)\n\n        display(acronym_widget,name_widget)\n        display(ipw.HBox([recording, button_record_output])) \n\n\n    def add_objects(self, project_id:Optional[str] = ''):\n        \"\"\"Add a new object in the objects_info.csv file\"\"\"\n\n        db_projects = self.get_projects()\n        projects_list = ['noProject'] + list(db_projects['project_id'].values)\n\n        db_objects = self.get_objects()\n        existing_columns = list(db_objects.columns)\n\n        creators_file = pd.read_csv(self.folder_db / 'object_creators.txt')\n        creators = [f'{x[0]}, {x[1]}' if isinstance(x[1],str) else x[0] for x in creators_file.values]\n\n        types_file = open(self.folder_db / r'object_types.txt', 'r').read()\n        types = types_file.split(\"\\n\")        \n\n        techniques_file = open(self.folder_db / r'object_techniques.txt', 'r').read().strip()\n        techniques = sorted(techniques_file.split(\"\\n\"), key=str.lower)        \n\n        materials_file = open(self.folder_db  / r'object_materials.txt', 'r').read()\n        materials = sorted(materials_file.split(\"\\n\"), key=str.lower)        \n\n        owners_file = pd.read_csv(self.folder_db / 'institutions.txt')\n        owners = tuple(owners_file['name'].values)\n\n\n        # Define ipython widgets\n\n        project_id = ipw.Combobox(\n            value = project_id,\n            placeholder='Project',\n            options = projects_list,\n            description = 'Project id',\n            ensure_option=False,\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"30px\"),\n            style=style,\n        )\n\n        object_id = ipw.Text(        \n            value='',\n            placeholder='Inv. N\u00b0',\n            description='Id',\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"30px\"),\n            style=style,   \n        )\n\n        object_category = ipw.Dropdown(\n            options=['heritage','model','reference','sample'],\n            value='heritage',\n            description='Category',\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"30px\"),\n            style=style,\n        )    \n\n        object_creator = ipw.Combobox(\n            placeholder = 'Surname, Name',\n            options = creators,\n            description = 'Creator',\n            ensure_option=False,\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"30px\"),\n            style=style,\n        ) \n\n        object_date = ipw.Text(\n            value='',\n            placeholder='Enter a date',\n            description='Date',\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"30px\"),\n            style=style,         \n        )  \n\n        object_owner = ipw.Combobox(\n            placeholder = 'Enter an institution/owner',\n            options = owners,\n            description = 'Object owner',\n            ensure_option = False,\n            disabled = False,\n            layout=Layout(width='99%',height=\"30px\"),\n            style = style\n\n        )\n\n        object_title = ipw.Textarea(        \n            value='',\n            placeholder='Enter the title',\n            description='Title',\n            disabled=False,\n            layout=Layout(width='99%',height=\"100%\"),\n            style=style,   \n        )  \n\n        object_name = ipw.Text(        \n            value='',\n            placeholder='Enter a short object (no space, no underscore)',\n            description='Name',\n            disabled=False,\n            layout=Layout(width='99%',height=\"30px\"),\n            style=style,   \n        )\n\n        object_type = ipw.Combobox(\n            placeholder = 'General classification',\n            options=types,\n            description='Type',\n            ensure_option=False,\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"30px\"),\n            style=style,\n        )\n\n        object_techniques = ipw.Combobox(  \n            placeholder='Choose a technique',          \n            options = techniques,\n            description = '',\n            ensure_option=False,       \n            layout=Layout(width=\"65%\", height=\"180px\"),\n            style=style,\n        )  \n\n        object_techniques_selected = ipw.SelectMultiple(            \n            options=[], \n            description='Techniques',           \n            ensure_option=False,\n            rows=6,\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"140px\"),\n            style=style,\n        ) \n\n        object_materials = ipw.Combobox(\n            placeholder='Choose a material',\n            options=materials,\n            description='',\n            ensure_option=True,\n            layout=Layout(width=\"65%\", height=\"180px\"),\n            style=style,\n        )\n\n        object_materials_selected = ipw.SelectMultiple(            \n            options=[], \n            description='Materials',           \n            ensure_option=False,\n            rows=6,\n            disabled=False,\n            layout=Layout(width=\"99%\", height=\"140px\"),\n            style=style,\n        )\n\n        recording = ipw.Button(\n            description='Record object',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n            #icon='check' # (FontAwesome names without the `fa-` prefix)\n        )        \n\n\n        button_record_output = ipw.Output()    \n\n        # Create a button to remove selected techniques\n        remove_technique_button = ipw.Button(\n            description='Remove selected',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me to remove the selected techniques',\n            icon='check',\n            layout=Layout(width=\"35%\", height=\"30px\"),\n            style=style,\n        )   \n\n        # Create a button to remove selected materials\n        remove_material_button = ipw.Button(\n            description='Remove selected',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me to remove the selected materials',\n            icon='check',\n            layout=Layout(width=\"35%\", height=\"30x\"),\n            style=style,\n        ) \n\n\n\n        # Combobox for additional parameters (if any)\n        additional_params = [col for col in existing_columns if col not in [\n            'project_id',\n            'object_id',\n            'object_category',\n            'object_type',\n            'object_technique',\n            'object_title',\n            'object_name',\n            'object_creator',\n            'object_date',\n            'object_owner',\n            'object_material']]\n\n        additional_param_widgets = {}\n        for param in additional_params:\n            additional_param_widgets[param] = ipw.Combobox(\n                description=param,\n                options=[],  # You can populate this with options if needed\n                placeholder=f\"Enter {param} value\",\n                style=style\n            )  \n\n        # Function to add selected material to the SelectMultiple\n        def object_materials_change(change):\n            if change['type'] == 'change' and change['name'] == 'value':\n                selected_material = change['new']\n                if selected_material and selected_material not in object_materials_selected.value:\n                    object_materials_selected.options = list(object_materials_selected.options) + [selected_material]  \n\n        # Function to add selected technique to the SelectMultiple\n        def object_techniques_change(change):\n            if change['type'] == 'change' and change['name'] == 'value':\n                selected_technique = change['new']\n                if selected_technique and selected_technique not in object_techniques_selected.value:\n                    object_techniques_selected.options = list(object_techniques_selected.options) + [selected_technique]     \n\n        # Function to remove selected techniques\n        def on_remove_technique_button_click(b):\n            # Get the indices of the selected options\n            selected_indices = object_techniques_selected.index\n            # Remove the selected options from the SelectMultiple\n            object_techniques_selected.options = [option for i, option in enumerate(object_techniques_selected.options) if i not in selected_indices]\n\n        # Function to remove selected materials\n        def on_remove_material_button_click(b):\n            # Get the indices of the selected options\n            selected_indices = object_materials_selected.index\n            # Remove the selected options from the SelectMultiple\n            object_materials_selected.options = [option for i, option in enumerate(object_materials_selected.options) if i not in selected_indices]\n\n\n        # Observe changes in the Combobox widgets\n        object_materials.observe(object_materials_change)\n        object_techniques.observe(object_techniques_change)\n\n        # Set the button click event handler\n        remove_technique_button.on_click(on_remove_technique_button_click)\n        remove_material_button.on_click(on_remove_material_button_click)\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the object info in the object database file (objects_info.csv).\n            \"\"\"\n\n            with button_record_output:\n                button_record_output.clear_output(wait=True)\n\n                db_objects_file = self.folder_db / 'objects_info.csv'\n                db_objects = pd.read_csv(db_objects_file)            \n\n                creators = [f'{x[0]}, {x[1]}' if isinstance(x[1],str) else x[0] for x in self.get_creators().values]\n\n                owners_file = open(self.folder_db  / r'institutions.txt', 'r').read().splitlines()\n                owners = owners_file             \n\n                types_file = open(self.folder_db / r'object_types.txt', 'r').read().splitlines()\n                types = types_file       \n\n\n                new_row = pd.DataFrame({                    \n                    'project_id': project_id.value,\n                    'object_id' : object_id.value,                   \n                    'object_category': object_category.value, \n                    'object_type': object_type.value, \n                    \"object_technique\": \"_\".join(object_techniques_selected.options),\n                    \"object_title\": object_title.value,\n                    'object_name': object_name.value,\n                    'object_creator': object_creator.value,                        \n                    'object_date': object_date.value,\n                    'object_owner': object_owner.value,\n                    'object_material': \"_\".join(object_materials_selected.options)},                       \n                    index=[0] \n                    ) \n\n\n                if object_creator.value not in creators:                    \n\n                    creator_surname = object_creator.value.split(',')[0].strip()\n                    try:\n                        creator_name = object_creator.value.split(',')[1].strip()\n                    except IndexError:\n                        creator_name = ''\n\n                    df_creators = pd.read_csv(self.folder_db / 'object_creators.txt')\n                    df_creators = pd.concat([df_creators, pd.DataFrame(data=[creator_surname,creator_name], index=['surname','name']).T])\n                    df_creators.to_csv(self.folder_db / 'object_creators.txt', index=False)\n\n\n                if object_type.value not in types:\n                    types.append(str(object_type.value))\n                    types = sorted(types, key=str.casefold)\n\n                    with open(self.folder_db / 'object_types.txt', 'w') as f:\n                        f.write('\\n'.join(types).strip())\n                    f.close()                                 \n\n\n                # Add additional parameters to the new record\n                for param, widget in additional_param_widgets.items():\n                    new_row[param] = widget.value\n\n                db_objects_new = pd.concat([db_objects, new_row],)\n                db_objects_new.to_csv(db_objects_file, index= False)\n                print(f'Object {object_id.value} added to database.')\n\n        recording.on_click(button_record_pressed)\n\n        display(\n            ipw.HBox([\n                ipw.VBox([object_id,project_id,object_creator,object_date,object_owner,object_category,object_type,object_title, object_name], layout=Layout(width=\"30%\", height=\"370px\"), style=style,),\n                ipw.VBox([ipw.HBox([object_techniques,remove_technique_button]),object_techniques_selected,ipw.HBox([object_materials,remove_material_button]),object_materials_selected], layout=Layout(width=\"30%\", height=\"370px\"), style=style),\n                ipw.VBox([*[widget for widget in additional_param_widgets.values()]], layout=Layout(width=\"30%\", height=\"370px\"), style=style)\n                ]))\n\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_users(self):\n        \"\"\"Record a new person in the users_info.txt file\n        \"\"\"\n\n        # Function to get the existing initials from the file\n        def get_existing_initials(file_path):\n            try:\n                df_persons = self.get_users()\n                existing_initials = df_persons['initials']                \n                return existing_initials\n            except FileNotFoundError:\n                # If the file does not exist, return an empty set\n                return set()\n\n        # Function to update the text file if the initials are unique\n        def update_text_file(file_path, name, surname, initials):\n            # Check if the initials already exist\n            existing_initials = get_existing_initials(file_path)\n\n            if initials in existing_initials:\n                print(f\"Initials '{initials}' already exist. Please use different initials.\")\n            else:\n                df_persons = self.get_users()\n                df_persons = pd.concat([df_persons, pd.DataFrame(data=[name,surname,initials], index=['name','surname','initials']).T])\n                df_persons = df_persons.sort_values(by='name')\n                df_persons.to_csv(self.folder_db/'users_info.txt',index=False)\n\n                print(f\"Added: {name}, {surname} : {initials}\")\n\n\n        # Define ipython widgets\n        name_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a name',\n            description='Name',               \n        )\n\n        surname_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a surname',\n            description='Surname',             \n        )\n\n        initials_widget = ipw.Text(        \n            value='',\n            placeholder='Enter initials in capital letters',\n            description='Initials',             \n        )\n\n        recording = ipw.Button(\n            description='Record user',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the person info in the users_info.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            name = name_widget.value.strip()\n            surname = surname_widget.value.strip()\n            initials = initials_widget.value.strip()\n\n            with button_record_output:\n\n                if name and surname and initials: # ensure all fields are filled\n                    update_text_file(self.folder_db / 'users_info.txt', name, surname, initials)\n                else:\n\n                    print(\"Please enter all fields (Name, Surname, Initials)\")\n\n\n\n        recording.on_click(button_record_pressed)\n\n        display(name_widget,surname_widget,initials_widget)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_projects(self, project_id:Optional[str] = None):\n        \"\"\"Add a new project in the projects_info.csv file\"\"\"\n\n        db_projects = self.get_projects()\n        existing_columns = list(db_projects.columns)\n        institutions = tuple(self.get_institutions()['name'].values)    \n        persons = tuple([f'{x[0]}, {x[1]}' for x in self.get_users()[['name','surname']].values])    \n        methods = list(self.get_methods()['acronym'].values)\n\n        # Define ipython widgets\n        project_Id = ipw.Text(        \n            value=project_id,\n            placeholder='Type something',\n            description='Project Id',\n            disabled=False,\n            layout=Layout(width=\"95%\", height=\"30px\"),\n            style=style,   \n        )\n\n        institution = ipw.Combobox(\n            placeholder = 'Enter an institution',\n            options = institutions,              \n            description = 'Institution',\n            ensure_option=False,\n            disabled=False,\n            layout=Layout(width=\"95%\", height=\"30px\"),\n            style=style,\n        )\n\n        startDate = ipw.DatePicker(\n            description='Start date',\n            disabled=False,\n            layout=Layout(width=\"90%\", height=\"30px\"),\n            style=style,\n        )\n\n        endDate = ipw.DatePicker(\n            description='End date',\n            disabled=False,\n            layout=Layout(width=\"90%\", height=\"30px\"),\n            style=style,\n        )\n\n        project_leader = ipw.Combobox(\n            placeholder = 'Enter a name or a surname',\n            options=persons,            \n            description='Project leader',\n            disabled=False,\n            layout=Layout(width=\"90%\", height=\"30px\"),\n            style=style,\n        )\n\n        coresearchers = ipw.SelectMultiple(\n            value=['none'],\n            options=['none'] + list(persons), \n            description='Co-researchers',\n            rows=10,\n            disabled=False,\n            layout=Layout(width=\"90%\", height=\"135px\"),\n            style=style,\n        )\n\n        wg_methods = ipw.SelectMultiple(\n            value=['none'],\n            options=['none'] + list(methods), \n            description='Methods',\n            rows=10,\n            disabled=False,\n            layout=Layout(width=\"90%\", height=\"170px\"),\n            style=style,\n        )\n\n\n        recording = ipw.Button(\n            description='Record project',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',\n            #layout=Layout(width=\"50%\", height=\"30px\"),\n            #style=style,\n            #icon='check' # (FontAwesome names without the `fa-` prefix)\n        )\n\n\n        project_keyword = ipw.Text(\n            placeholder = 'Describe project in 1 or 2 words',\n            description = 'Project keywords',\n            disabled = False,\n            layout=Layout(width=\"95%\", height=\"30px\"),\n            style = style,\n        )\n\n        # Combobox for additional parameters (if any)\n        additional_params = [col for col in existing_columns if col not in ['project_id', 'institution', 'start_date', 'end_date', 'project_leader', 'co-researchers', 'keywords', 'methods']]\n        additional_param_widgets = {}\n        for param in additional_params:\n            additional_param_widgets[param] = ipw.Combobox(\n                description=param,\n                options=[],  # You can populate this with options if needed\n                placeholder=f\"Enter {param} value\"\n            )\n\n        button_record_output = ipw.Output()\n\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the project info in the project database file (projects_info.csv).\n            \"\"\"\n\n            with button_record_output:\n                button_record_output.clear_output(wait=True)\n\n                Projects_DB_file = self.folder_db / 'projects_info.csv'\n                Projects_DB = pd.read_csv(Projects_DB_file)  \n                persons = self.get_users()\n\n                institutions = pd.read_csv(self.folder_db / 'institutions.txt')['name'].values\n\n\n                project_leader_name = project_leader.value.split(',')[0].strip()\n                project_leader_surname = project_leader.value.split(',')[1].strip()\n                project_leader_initials = persons.query(f'name == \"{project_leader_name}\" and surname == \"{project_leader_surname}\"')['initials'].values[0]\n\n                if coresearchers.value[0] == 'none':\n                    coresearchers_initials = 'none'\n\n                else:\n                    coresearchers_initials = []\n                    for coresearcher in [x for x in coresearchers.value]:\n                        coresearcher_name = coresearcher.split(',')[0].strip()\n                        coresearcher_surname = coresearcher.split(',')[1].strip()\n                        coresearcher_initials = persons.query(f'name == \"{coresearcher_name}\" and surname == \"{coresearcher_surname}\"')['initials'].values[0]\n                        coresearchers_initials.append(coresearcher_initials)\n\n\n                    coresearchers_initials = '-'.join(coresearchers_initials)\n\n                if wg_methods.value == 'none':\n                    methods_acronym = 'none'\n\n                else:\n                    methods_acronym = \"_\".join(wg_methods.value)\n\n                new_row = pd.DataFrame({'project_id':project_Id.value,\n                        'institution':institution.value, \n                        'start_date':startDate.value, \n                        'end_date':endDate.value,\n                        'project_leader':project_leader_initials,  \n                        'co-researchers':coresearchers_initials,                       \n                        'keywords':project_keyword.value,\n                        'methods':methods_acronym},                                               \n                        index=[0] \n                        )  \n\n                if institution.value not in institutions:                       \n                    institutions.append(str(institution.value))         \n                    institutions = sorted(institutions)   \n\n                    with open(self.folder_db / 'institutions.txt', 'w') as f:\n                        f.write('\\n'.join(institutions).strip())  \n                    f.close()                \n\n\n                # Add additional parameters to the new record\n                for param, widget in additional_param_widgets.items():\n                    new_row[param] = widget.value\n\n                Projects_DB_new = pd.concat([Projects_DB, new_row],)\n                Projects_DB_new.to_csv(Projects_DB_file, index= False)\n                print(f'Project {project_Id.value} added to database.')\n\n        recording.on_click(button_record_pressed)\n\n\n        # Display the widgets\n        display(ipw.HBox([\n            ipw.VBox([\n                ipw.HBox([\n                    ipw.VBox([project_Id,institution, project_keyword, startDate, endDate],layout=Layout(width=\"60%\", height=\"100%\")),\n                    ipw.VBox([project_leader, coresearchers],layout=Layout(width=\"60%\", height=\"100%\")),\n                    ipw.VBox([wg_methods],layout=Layout(width=\"60%\", height=\"100%\"))\n                    ]),                \n                ], layout=Layout(width=\"70%\", height=\"100%\")),                        \n            ], layout=Layout(width=\"100%\", height=\"100%\"))\n        ) \n\n        display(*[widget for widget in additional_param_widgets.values()])\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_techniques(self):\n        \"\"\"Register a new object technique.\n\n        Returns\n        -------\n        ipywdigets\n            fill in the name of the technique to be registered. \n        \"\"\"\n\n        # Define ipython widgets\n\n        technique_widget = ipw.Text(        \n            value='',\n            placeholder='Enter a name',\n            description='Technique',   \n            style=style,\n            layout=Layout(width=\"40%\", height=\"30px\")            \n        )    \n\n        recording = ipw.Button(\n            description='Record technique',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_record_output = ipw.Output()\n\n\n        # Define the path of the users database file\n\n        databases_folder = self.folder_db\n        techniques_filename = 'object_techniques.txt'\n\n\n        # Define some functions    \n\n        def get_existing_techniques(file_path):\n            try:\n                return self.get_techniques()        \n\n            except FileNotFoundError:            \n                return\n\n\n        def update_text_file(file_path, name):\n\n            # Check if the technique has already been registered        \n            existing_techniques = get_existing_techniques(file_path)\n\n            if technique_widget.value in existing_techniques:\n                print(f'The technique {technique_widget.value} has already been registered.')\n\n            else:\n                existing_techniques.append(str(technique_widget.value).lower())         \n                existing_techniques = sorted(existing_techniques)\n\n                with open(databases_folder / techniques_filename, 'w') as f:\n                        f.write('\\n'.join(existing_techniques))\n\n                f.close()            \n\n                print(f\"Technique added: {name}\")\n\n\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the technique name in the object_techniques.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            name = technique_widget.value.strip()\n\n\n            with button_record_output:            \n\n                if name: # ensure all fields are filled\n                    update_text_file(databases_folder / techniques_filename, name)\n                else:                    \n                    print(\"Please enter all fields (Name)\")\n\n\n        # Link the widget button to the function\n        recording.on_click(button_record_pressed)\n\n        # Display the widgets\n        display(technique_widget)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_types(self, name:Optional[str] = None):\n        \"\"\"Register a new object type.\n\n        Returns\n        -------\n        ipywdigets\n            fill in the name of the type to be registered. \n        \"\"\"\n\n        # Define ipython widgets\n\n        wg_type = ipw.Text(        \n            value=name,\n            placeholder='Enter a name',\n            description='Type',\n            style=style,\n            layout=Layout(width=\"40%\", height=\"30px\")               \n        )    \n\n        recording = ipw.Button(\n            description='Record type',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_record_output = ipw.Output()\n\n\n        # Define the path of the users database file\n\n        databases_folder = self.folder_db\n        types_filename = 'object_types.txt'\n\n\n        # Define some functions\n        def update_text_file(new_value):\n\n            # Check if the type has already been registered        \n            existing_types = self.get_types()\n\n            if new_value in existing_types:\n                print(f'The type \"{new_value}\" has already been registered.')\n\n            else:\n                existing_types.append(str(new_value).lower())         \n                existing_types = sorted(existing_types)\n\n                with open(databases_folder / types_filename, 'w') as f:\n                        f.write('\\n'.join(existing_types))\n\n                f.close()            \n\n                print(f\"Type added: {new_value}\")\n\n\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the type name in the object_types.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n            type_name = wg_type.value.strip()\n\n            with button_record_output:            \n\n                if type_name: # ensure all fields are filled\n                    update_text_file(type_name)\n                else:                    \n                    print(\"Please enter a type name\")\n\n\n        # Link the widget button to the function\n        recording.on_click(button_record_pressed)\n\n        # Display the widgets\n        display(wg_type)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def add_white_standards(self):\n        \"\"\"Record a new white standard in the white_standards.txt file\n        \"\"\"\n\n        # Function to get the existing standards ID from the file\n        def get_existing_standards():\n            try:\n                df_standards = self.get_white_standards()\n                existing_standards = df_standards['ID'].values                \n                return existing_standards\n            except FileNotFoundError:\n                # If the file does not exist, return an empty set\n                return set()\n\n        # Function to update the text file if the ID is unique\n        def update_text_file(ID, description):\n            # Check if the ID already exists\n            existing_standards = get_existing_standards()\n\n            if ID in existing_standards:\n                print(f\"ID '{ID}' already exists. Please use a different ID.\")\n            else:\n                df_standards = self.get_white_standards()\n                df_standards = pd.concat([df_standards, pd.DataFrame(data=[ID,description], index=['ID','description']).T])\n                df_standards = df_standards.sort_values(by='ID')\n                df_standards.to_csv(self.folder_db/'white_standards.txt',index=False)\n\n                print(f\"Added: {ID} : {description}\")\n\n        # Define ipython widgets\n        wg_ID = ipw.Text(        \n            value='',\n            placeholder='Enter an ID',\n            description='ID', \n            layout=Layout(width=\"40%\", height=\"30px\"),\n            style=style,              \n        )\n\n        wg_description = ipw.Text(        \n            value='',\n            placeholder='Enter a brief description',\n            description='Description', \n            layout=Layout(width=\"40%\", height=\"30px\"),\n            style=style,            \n        )\n\n        recording = ipw.Button(\n            description='Record standard',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the standard info in the white_standards.txt file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            id = wg_ID.value.strip()            \n            description = wg_description.value.strip()\n\n            with button_record_output:\n\n                if id and description: # ensure all fields are filled\n                    update_text_file(id, description)\n                else:                    \n                    print(\"Please enter all fields (ID, description)\")\n\n        recording.on_click(button_record_pressed)\n\n        display(wg_ID,wg_description)\n        display(ipw.HBox([recording, button_record_output]))\n\n\n    def get_creators(self):\n        \"\"\"Retrieve the registered creators of objects.\n\n        Returns\n        -------\n        pandas dataframe\n            It returns the surname and name of the creators inside a two-columns dataframe.\n        \"\"\"\n\n        if (Path(self.folder_db) / 'object_creators.txt').exists():\n            df_creators = pd.read_csv(Path(self.folder_db) / 'object_creators.txt')\n            return df_creators\n\n        else:\n            print(f'The file {Path(self.folder_db) / \"object_creators.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n            return\n\n\n    def get_users(self):\n        \"\"\"Retrieve the registered users.\n\n        Returns\n        -------\n        pandas dataframe\n            It returns the name,surname, and initials of the users inside a three-columns dataframe.\n        \"\"\"\n\n        filename = 'users_info.txt'\n        if (Path(self.folder_db) / filename).exists():\n            df_persons = pd.read_csv(Path(self.folder_db) / filename)\n            return df_persons\n\n        else:\n            print(f'The file {Path(self.folder_db) / filename} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n            return\n\n\n    def get_institutions(self):\n        \"\"\"Retrieve the registered institutions.\n\n        Returns\n        -------\n        pandas dataframe\n            It returns the name and acronym of the institutions inside a two-columns dataframe.\n        \"\"\"\n\n        if (Path(self.folder_db) / 'institutions.txt').exists():\n            df_institutions = pd.read_csv(Path(self.folder_db) / 'institutions.txt')\n            return df_institutions\n\n        else:\n            print(f'The file {Path(self.folder_db) / \"institutions.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n            return\n\n\n    def get_devices(self):\n        \"\"\"Retrieve the registered analytical devices.\n\n        Returns\n        -------\n        pandas dataframe\n            It returns the information regarding the devices inside a dataframe.\n        \"\"\"\n\n        if (Path(self.folder_db) / 'devices.txt').exists():\n            df_devices = pd.read_csv(Path(self.folder_db) / 'devices.txt')\n            return df_devices\n\n        else:\n            print(f'The file {Path(self.folder_db) / \"devices.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n            return\n\n\n    def get_lamps(self):\n        \"\"\"Retrieve the registered lamps.\n\n        Returns\n        -------\n        pandas dataframe\n            It returns the ID and description of the lamps inside a two-columns dataframe.\n        \"\"\"\n\n        if (Path(self.folder_db) / 'lamps.txt').exists():\n            df_lamps = pd.read_csv(Path(self.folder_db) / 'lamps.txt')\n            return df_lamps\n\n        else:\n            print(f'The file {Path(self.folder_db) / \"lamps.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n            return  \n\n\n    def get_materials(self):\n        \"\"\"Retrieve the registered materials.\n\n        Returns\n        -------\n        List\n            It returns the materials as strings inside a list.\n        \"\"\"\n\n        materials_filename = 'object_materials.txt'\n\n        if not (self.folder_db / materials_filename).exists():\n            print(f'Please create an empty file called \"{materials_filename}\" in the the following folder: {self.folder_db}')\n            return\n\n        else:            \n            materials_df = pd.read_csv(self.folder_db / materials_filename, header=None)\n            materials = sorted(list(materials_df.values.flatten()), key=str.lower)              \n            return materials\n\n\n    def get_methods(self):\n        \"\"\"Retrieve the registered scientific methods used to analyze objects.\n\n        Returns\n        -------\n        pandas dataframe\n            It returns the name and acronym of the analytical methods inside a two-columns dataframe.\n        \"\"\"\n\n        databases_folder = self.folder_db\n        methods_filename = 'analytical_methods.txt'\n\n        if not (databases_folder / methods_filename).exists():\n            print(f'Please create an empty file called \"{methods_filename}\" in the the following folder: {databases_folder}')\n            return\n\n        else:\n            df_methods = pd.read_csv((databases_folder / methods_filename))            \n            return df_methods\n\n\n    def get_objects(self,object_category:Union[str,list]=None, object_type:Union[str,list]=None, object_technique:Union[str,list]=None, object_owner:Union[str,list] = None, project_id:Union[str,list] = None, object_id:Union[str,list] = None, match_all:Optional[bool]=False):\n        \"\"\"Retrieve information about the objects\n\n        Parameters\n        ----------\n        object_category : Union[str,list], optional\n            Category of objects, by default None\n            There are only four categories of objects ('heritage', 'model', 'reference', 'sample')\n            If only one category is entered, you may enter it as a string, otherwise use a list.\n\n        object_type : Union[str,list], optional\n            Object type(s) for describing objects, by default None\n            If only one type is entered, you may enter it as a string, otherwise use a list.\n            For a list of all the types mentioned, use the function \"get_types()\".\n\n        object_technique : Union[str,list], optional\n            Technique(s) used to create the objects, by default None\n            If only one technique is entered, you may enter it as a string, otherwise use a list.\n            For a list of all the techniques mentioned, use the function \"get_techniques()\".\n\n        object_owner : Union[str,list], optional\n            Institution(s) that own the objects, by default None\n            If only one institution is entered, you may enter it as a string, otherwise use a list.\n\n        project_id : Union[str,list], optional\n            ID number of one or several projects, by default None\n            If only one ID is entered, you may enter it as a string, otherwise use a list.\n\n        object_id : Union[str,list], optional\n            _description_, by default None\n\n        match_all : Optional[bool], optional\n            Whether all the wanted queries should match, by default False\n\n        Returns\n        -------\n        pandas dataframe\n            It returns the object info inside a dataframe where each line corresponds to a single object.\n        \"\"\"       \n\n        databases_folder = self.folder_db\n        objects_filename = 'objects_info.csv'\n        df_objects = pd.read_csv((databases_folder / objects_filename)).fillna('none')\n\n        if not (databases_folder / objects_filename).exists():\n            print(f'Please create a .csv file called \"{objects_filename}\" in the the following folder: {databases_folder} ')\n            return\n\n\n        if object_category == None and object_type == None and object_technique == None and object_owner == None and project_id == None and object_id == None:\n            return df_objects\n\n        if isinstance(object_category, str):\n            object_category = [object_category]\n\n        if isinstance(object_type, str):\n            object_type = [object_type]\n\n        if isinstance(object_technique, str):\n            object_technique = [object_technique]    \n\n        if isinstance(object_owner, str):\n            object_owner = [object_owner]\n\n        if isinstance(project_id, str):\n            project_id = [project_id]\n\n        if isinstance(object_id, str):\n            object_id = [object_id]\n\n\n\n\n        df_institutions = self.get_institutions()\n        list_acronyms = df_institutions['acronym'].values\n\n        if object_owner != None:\n            object_owner = [df_institutions.query(f'acronym == \"{x}\"')['name'].values[0] if x in list_acronyms else 'none' for x in object_owner]\n            object_owner = [x for x in object_owner if x != 'none']\n\n\n\n        parameters = ['object_category','object_type','object_technique','object_owner','project_id', 'object_id']\n        input_values = [object_category, object_type, object_technique, object_owner, project_id, object_id]\n\n        filters = {}\n\n\n        for x,y in zip(parameters, input_values):\n            if y != None:\n                filters[x] = y\n\n\n        def match_criteria(row):\n            results = []\n            for col, values in filters.items():\n                if col in df_objects.columns:\n                    matches = [bool(re.search(fr'(^|_){v}(_|$)', row[col])) for v in values]\n                    results.append(all(matches) if match_all else any(matches))\n\n            return all(results) if match_all else any(results)\n\n        return df_objects[df_objects.apply(match_criteria, axis=1)]\n\n\n    def get_projects(self, PL:Union[str,list]=None, coresearchers:Union[str,list]=None, methods:Union[str,list]=None, institutions:Union[str,list] = None, project_id:Union[str,list] = None, match_all:Optional[bool]=False):\n        \"\"\"Retrieve information about the registered projects\n\n        Parameters\n        ----------\n        PL : Union[str,list], optional\n            The initials of the main researcher, by default None\n            If only one initials is entered, you may enter it as a string, otherwise use a list.\n\n        coresearchers : Union[str,list], optional\n            The initials of the co-researchers, by default None\n            If only one initials is entered, you may enter it as a string, otherwise use a list.\n\n        methods : Union[str,list], optional\n            Acronym of the method, by default None\n            If only one method is entered, you may enter it as a string, otherwise use a list.\n\n        institutions : Union[str,list], optional\n            Acronym of the institutions, by default None\n            If only one institution is entered, you may enter it as a string, otherwise use a list.\n\n        project_id : Union[str,list], optional\n            ID of the project, by default None\n            If only one ID is entered, you may enter it as a string, otherwise use a list.\n\n        match_all : Optional[bool], optional\n            Whether all the wanted queries should match, by default False\n\n        Returns\n        -------\n        pandas dataframe\n            It return the desired info about registered projects.\n        \"\"\" \n\n        databases_folder = self.folder_db\n        projects_filename = 'projects_info.csv'\n        df_projects = pd.read_csv((databases_folder / projects_filename))\n\n        if not (databases_folder / projects_filename).exists():\n            print(f'Please create a file called \"projects_info.csv\" in the the following folder: {databases_folder}')\n            return\n\n\n        if PL == None and methods == None and institutions == None and project_id == None:\n            return df_projects\n\n        if isinstance(PL, str):\n            PL = [PL]\n\n        if isinstance(coresearchers, str):\n            coresearchers = [coresearchers]\n\n        if isinstance(methods, str):\n            methods = [methods]    \n\n        if isinstance(institutions, str):\n            institutions = [institutions]\n\n\n        df_institutions = self.get_institutions()\n        list_acronyms = df_institutions['acronym'].values\n\n        if institutions != None:\n            institutions = [df_institutions.query(f'acronym == \"{x}\"')['name'].values[0] if x in list_acronyms else 'none' for x in institutions]\n            institutions = [x for x in institutions if x != 'none']\n\n\n        parameters = ['project_leader', 'co-researchers', 'methods', 'institution', 'project_id']\n        input_values = [PL, coresearchers, methods, institutions, project_id]\n\n        filters = {}\n\n        for x,y in zip(parameters, input_values):\n            if y != None:\n                filters[x] = y\n\n\n        def match_criteria(row):\n            results = []\n            for col, values in filters.items():\n                if col in df_projects.columns:\n                    matches = [bool(re.search(fr'(^|_){v}(_|$)', row[col])) for v in values]\n\n                    results.append(all(matches) if match_all else any(matches))\n\n            return all(results) if match_all else any(results)\n\n        return df_projects[df_projects.apply(match_criteria, axis=1)]\n\n\n    def get_white_standards(self):\n        \"\"\"Retrieve the registered white standards.\n\n        Returns\n        -------\n        pandas dataframe\n            It returns the ID and description of the white standards inside a two-columns dataframe.\n        \"\"\"\n\n        if (Path(self.folder_db) / 'white_standards.txt').exists():\n            df_references = pd.read_csv(Path(self.folder_db) / 'white_standards.txt')\n            return df_references\n\n        else:\n            print(f'The file {Path(self.folder_db) / \"white_standards.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n            return\n\n\n    def get_techniques(self):\n        \"\"\"Retrieve the registered techniques used to create the objects.\n\n        Returns\n        -------\n        List\n            It returns the techniques as strings inside a list.\n        \"\"\"\n\n        techniques_filename = 'object_techniques.txt'\n\n        if not (self.folder_db / techniques_filename).exists():\n            print(f'Please create an empty file called \"object_techniques.txt\" in the the following folder: {self.folder_db}')\n            return\n\n        else:            \n            techniques_df = pd.read_csv(self.folder_db / 'object_techniques.txt', header=None)\n            techniques = sorted(list(techniques_df.values.flatten()), key=str.lower)             \n            return techniques\n\n\n    def get_types(self):\n        \"\"\"Retrieve the registered types of objects.\n\n        Returns\n        -------\n        List\n            It returns the types as strings inside a list.\n        \"\"\"\n\n        types_filename = 'object_types.txt'\n\n        if not (self.folder_db / types_filename).exists():\n            print(f'Please create an empty file called \"object_types.txt\" in the the following folder: {self.folder_db}')\n            return\n\n        else:            \n            types_df = pd.read_csv(self.folder_db / 'object_types.txt', header=None)\n            types = sorted(list(types_df.values.flatten()), key=str.lower)              \n            return types\n\n\n    def update_projects(self, project_id:Union[str,list] = 'all', column:Optional[str] = None, new_value:Optional[str] = None, widgets:Optional[bool] = True):\n        \"\"\"Update the content of the projects_info.csv file.\n\n        Parameters\n        ----------\n\n        project_id : Union[str,list], optional\n            Select which project_id(s) (i.e. row(s)) should be updated, by default 'all'\n            If you only wish to update the value for a single project, you can enter the project_id as a string.\n            If you wish to update the value for several projects, enter the project_ids as strings inside a list\n            When 'all', it will the update the value for all the projects.\n\n        column : Optional[str], optional\n            Select which column (parameter) should be updated, by default None\n\n        new_value : Optional[str], optional\n            New value to be written in the projects_info.csv file, by default None\n\n        widgets : Optional[bool], optional\n            Whether to display widgets to update the projects database file, by default True\n            When False, you will have to pass in arguments for the project_id, the column, and the new_value\n\n\n        Returns\n        -------\n        ipywdigets or string\n        If the parameter \"widgets\" is set to True, it will return several ipywidgets from which you you will be able to update the content of the projects database file. When \"widgets\" is set to False, it will automatically update the content of the file with requested input (project_id, column, and new_value) and it will return a string.\n        \"\"\"   \n\n        if not (Path(self.folder_db) / 'projects_info.csv').exists():\n            print(f'The file \"projects_info.csv\" is missing in your databases folder ({self.folder_db}). Either add the file to the folder or recreate the database.')\n\n            return\n\n        db_projects = self.get_projects().set_index('project_id')\n        project_ids = tuple(db_projects.index)\n\n\n        def update_project_info(project_id:str, parameter:str, new_value:str):\n\n            if project_id not in project_ids:\n                print(f'Error ! The project ID ({project_id}) is not registered in the projects_info.csv file.')\n                return\n\n            db_projects.loc[project_id, parameter] = new_value \n            db_projects.to_csv(Path(self.folder_db) / 'projects_info.csv',index=True)\n\n\n        if widgets:\n\n            wg_project_ids = ipw.Combobox(\n                placeholder='Select a project id',\n                options=project_ids,              \n                description='Project id',\n                ensure_option=False,\n                disabled=False,\n                layout=Layout(width=\"50%\", height=\"30px\"),\n                style=style,\n            )\n\n            wg_project_columns = ipw.Dropdown(\n                placeholder='Select a parameter',\n                options= db_projects.columns,              \n                description='Project parameter',\n                ensure_option=False,\n                disabled=False,\n                layout=Layout(width=\"50%\", height=\"30px\"),\n                style=style,\n            )\n\n            wg_new_value = ipw.Text(\n                description='New value',\n                placeholder='Enter a new value for the selected parameter',\n                layout=Layout(width=\"50%\", height=\"30px\"),\n                style=style,\n\n            )\n\n            wg_updating = ipw.Button(\n                description='Update project',\n                disabled=False,\n                button_style='', # 'success', 'info', 'warning', 'danger' or ''\n                tooltip='Click me',            \n            )\n\n            button_record_output = ipw.Output()\n\n            def button_record_pressed(b):\n                \"\"\"\n                Update the project info.\n                \"\"\"\n\n                button_record_output.clear_output(wait=True)\n\n                update_project_info(wg_project_ids.value, wg_project_columns.value, wg_new_value.value)\n\n\n                with button_record_output:\n\n                    print(f'A new value \"{wg_new_value.value}\" has been successfully reassigned to the parameter \"{wg_project_columns.value}\" of the project \"{wg_project_ids.value}\".')\n\n            wg_updating.on_click(button_record_pressed)\n\n            display(wg_project_ids,wg_project_columns, wg_new_value)\n            display(ipw.HBox([wg_updating, button_record_output]))\n\n\n\n        else:    \n\n            if project_id == 'all':\n                project_id = db_projects.index\n\n            elif isinstance(project_id, str):\n                project_id = [project_id]\n\n\n            for project in project_id:\n\n                if project not in db_projects.index:\n                    print(f'Error ! The project ID {project} is not registered in the projects_info.csv file.')\n                    return\n\n                db_projects.loc[project, column] = new_value         \n\n\n            db_projects.to_csv(Path(self.folder_db) / 'projects_info.csv',index=True)\n            print('projects_info.csv file successfully updated.')\n\n\n\n    def update_objects(self, object_id:Union[str,list] = 'all', column:Optional[str] = None, new_value:Optional[str] = None,  widgets:Optional[bool] = True):\n        \"\"\"Update the content of the objects_info.csv file.\n\n        Parameters\n        ----------\n        object_id : Union[str,list], optional\n            Select which object_id(s) (i.e. row(s)) should be updated, by default 'all'\n            If you only wish to update the value for a single object, you can enter the object_id as a string.\n            If you wish to update the value for several objects, enter the object_ids as strings inside a list\n            When 'all', it will the update the value for all the objects.\n\n        column : Optional[str], optional\n            Select which column (parameter) should be updated, by default None\n\n        new_value : Optional[str], optional\n            New value to be written in the objects_info.csv file, by default None\n\n        widgets : Optional[bool], optional\n            Whether to display widgets to update the objects database file, by default True\n            When False, you will have to pass in arguments for the object_id, the column, and the new_value\n\n\n        Returns\n        -------\n        ipywdigets or string\n        If the parameter \"widgets\" is set to True, it will return several ipywidgets from which you you will be able to update the content of the objects database file. When \"widgets\" is set to False, it will automatically update the content of the file with requested input (object_id, column, and new_value) and it will return a string.\n\n        \"\"\"  \n\n        if not (Path(self.folder_db) / 'objects_info.csv').exists():\n            print(f'The file \"objects_info.csv\" is missing in your databases folder ({self.folder_db}). Either add the file to the folder or recreate the database.')\n\n            return\n\n        db_objects = self.get_objects().set_index('object_id')\n        object_ids = tuple(db_objects.index)\n\n\n        def update_object_info(object_id:str, parameter:str, new_value:str):\n\n            if object_id not in object_ids:\n                print(f'Error ! The object ID ({object_id}) is not registered in the objects_info.csv file.')\n                return\n\n            db_objects.loc[object_id, parameter] = new_value \n            db_objects.to_csv(Path(self.folder_db) / 'objects_info.csv', index=True)\n\n\n        if widgets:\n\n            wg_object_ids = ipw.Combobox(\n                placeholder='Select an object id',\n                options=object_ids,              \n                description='Object id',\n                ensure_option=False,\n                disabled=False,\n                layout=Layout(width=\"50%\", height=\"30px\"),\n                style=style,\n            )\n\n            wg_object_columns = ipw.Dropdown(\n                placeholder='Select a parameter',\n                options= db_objects.columns,              \n                description='Object parameter',\n                ensure_option=False,\n                disabled=False,\n                layout=Layout(width=\"50%\", height=\"30px\"),\n                style=style,\n            )\n\n            wg_new_value = ipw.Text(\n                description='New value',\n                placeholder='Enter a new value for the selected parameter',\n                layout=Layout(width=\"50%\", height=\"30px\"),\n                style=style,\n\n            )\n\n            wg_updating = ipw.Button(\n                description='Update Object',\n                disabled=False,\n                button_style='', # 'success', 'info', 'warning', 'danger' or ''\n                tooltip='Click me',            \n            )\n\n            button_record_output = ipw.Output()\n\n            def button_record_pressed(b):\n                \"\"\"\n                Update the object info.\n                \"\"\"\n\n                button_record_output.clear_output(wait=True)\n\n                update_object_info(wg_object_ids.value, wg_object_columns.value, wg_new_value.value)\n\n\n                with button_record_output:\n\n                    print(f'A new value \"{wg_new_value.value}\" has been successfully reassigned to the parameter \"{wg_object_columns.value}\" of the object \"{wg_object_ids.value}\".')\n\n            wg_updating.on_click(button_record_pressed)\n\n            display(wg_object_ids,wg_object_columns, wg_new_value)\n            display(ipw.HBox([wg_updating, button_record_output]))\n\n\n        else:        \n\n            if object_id == 'all':\n                object_id = db_objects.index\n            elif isinstance(object_id, str):\n                object_id = [object_id]\n\n\n            for object in object_id:\n\n                if object not in db_objects.index:\n                    print(f'Error ! The object ID {object} is not registered in the objects_info.csv file.')\n                    return\n\n                db_objects.loc[object, column] = new_value         \n\n\n            db_objects.to_csv(Path(self.folder_db) / 'objects_info.csv', index=True)\n            print('objects_info.csv file successfully updated.')\n\n\n    def delete_creators(self):\n        \"\"\"Remove one of several creators from the database file.\n        \"\"\"\n\n        creators_df = self.get_creators()\n        creators_list = [f'{x[0]}, {x[1]}' if isinstance(x[1],str) else x[0] for x in creators_df.values]       \n\n        wg_creators = ipw.SelectMultiple(          \n            options=  creators_list,\n            description='Creators',\n            rows=10             \n        )\n\n        deleting = ipw.Button(\n            description='Delete creators',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the institution info in the institutions.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            creators_filename = 'object_creators.txt'\n            creators_df = self.get_creators()            \n\n            for creator in list(wg_creators.value):\n\n                if ',' in creator:\n                    surname = creator.split(',')[0].strip()\n                    name = creator.split(',')[1].strip()\n                    creators_df = creators_df.drop(creators_df[(creators_df['surname'] == surname) &amp; (creators_df['name'] == name)].index)\n\n                else:                                   \n                    creators_df = creators_df.drop(creators_df[(creators_df['surname'] == creator)].index)\n\n\n            creators_df.to_csv(self.folder_db / creators_filename, index=False)\n\n            with button_delete_output:\n                print(f'Creators deleted: {wg_creators.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(wg_creators)\n        display(ipw.HBox([deleting, button_delete_output]))  \n\n\n    def delete_devices(self, ID:Optional[str] = None):\n        \"\"\"Remove devices from the database file.\n\n        Parameters\n        ----------\n        ID : Optional[str,list], optional\n            ID of the devices, by default None\n        \"\"\"\n\n        devices_ID = list(self.get_devices()['ID'])\n\n        if ID == None:\n            ID = [devices_ID[0]]\n\n        elif isinstance(ID,str):\n            ID = [ID]\n\n\n        wg_devices = ipw.SelectMultiple(        \n            value=ID,\n            options=  devices_ID,\n            description='devices ID', \n            rows=10            \n        )\n\n\n        deleting = ipw.Button(\n            description='Delete devices',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the institution info in the institutions.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            devices_filename = 'devices.txt'\n            df_devices = self.get_devices()\n\n            for id in list(wg_devices.value):\n                df_devices = df_devices.drop(df_devices[df_devices['ID'] == id].index)\n\n            df_devices.to_csv(self.folder_db / devices_filename, index=False)\n\n            with button_delete_output:\n                print(f'Devices deleted: {wg_devices.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(wg_devices)\n        display(ipw.HBox([deleting, button_delete_output]))  \n\n\n    def delete_institutions(self, acronym:Optional[str] = None):\n        \"\"\"Remove an institution from the database file.\n\n        Parameters\n        ----------\n        acronym : Optional[str], optional\n            Acronym of the institution, by default None\n        \"\"\"\n\n        if acronym == None:\n            acronym = 'Select an acronym'\n\n        df_institutions = self.get_institutions()\n        institution_acronyms = list(df_institutions['acronym'])\n\n        if acronym not in  ['Select an acronym'] + institution_acronyms:\n            print(f'The acronym you entered \"{acronym}\" has not been registered in the database.')\n            acronym = 'Select an acronym'\n\n        wg_acronym = ipw.Dropdown(        \n            value=acronym,\n            options=  ['Select an acronym'] + institution_acronyms,\n            description='Acronym',\n            style=style,\n            layout=Layout(width=\"17%\", height=\"30px\")        \n        )\n\n        wg_institution_name = ipw.Text(\n            value='',\n            description='',\n            disabled=False         \n        )\n\n        deleting = ipw.Button(\n            description='Delete institution',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def change_acronym(change):            \n            new_acronym = change.new\n            name = df_institutions.query(f'acronym == \"{new_acronym}\"')['name'].values[0]            \n            wg_institution_name.value = name\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the institution info in the institutions.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            institutions_filename = 'institutions.txt'\n            df_institutions = self.get_institutions()\n            df_institutions = df_institutions.drop(df_institutions[df_institutions['acronym'] == wg_acronym.value].index)\n\n            df_institutions.to_csv(self.folder_db / institutions_filename, index=False)\n\n            with button_delete_output:\n                print(f'Institution deleted: {wg_acronym.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n        wg_acronym.observe(change_acronym, names='value')\n\n        # Display the widgets\n        display(ipw.HBox([wg_acronym, wg_institution_name]))\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def delete_lamps(self, id:Optional[str] = None):\n        \"\"\"Remove a lamp from the database file.\n\n        Parameters\n        ----------\n        id : Optional[str], optional\n            ID number of the lamp, by default None\n        \"\"\"\n\n        if id == None:\n            id = 'Select an ID'\n\n        df_lamps = self.get_lamps()\n        id_list = list(df_lamps['ID'])\n\n        if id not in  ['Select an ID'] + id_list:\n            print(f'The ID you entered \"{id}\" has not been registered in the database.')\n            id = 'Select an ID'\n\n        wg_id = ipw.Dropdown(        \n            value=id,\n            options=['Select an ID'] + id_list,\n            description='ID',   \n            layout=Layout(width=\"15%\", height=\"30px\"),\n            style=style,          \n        )\n\n        wg_description = ipw.Text(\n            value='',\n            description='',\n            disabled=False,\n            layout=Layout(width=\"70%\", height=\"30px\"),\n            style=style,\n        )           \n\n        deleting = ipw.Button(\n            description='Delete lamp',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def change_id(change):\n            new_id = change.new\n            description = df_lamps.query(f'ID == \"{new_id}\"')['description'].values[0]            \n            wg_description.value = description\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the lamp info in the lamps.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            lamps_folder = self.folder_db\n            lamps_filename = 'lamps.txt'\n\n            df_lamps = self.get_lamps()\n            df_lamps = df_lamps.drop(df_lamps[df_lamps['ID'] == wg_id.value].index)\n\n            df_lamps.to_csv(lamps_folder/lamps_filename, index=False)\n\n            with button_delete_output:\n                print(f'ID {wg_id.value} deleted.')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n        wg_id.observe(change_id, names='value')\n\n        # Display the widgets\n        display(ipw.HBox([wg_id, wg_description]))\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def delete_materials(self):\n        \"\"\"Remove one or several object materials from the database file.\n        \"\"\"\n\n        materials = self.get_materials()        \n\n        wg_materials = ipw.SelectMultiple(            \n            options=  materials,\n            description='Materials',  \n            rows=10,           \n        )\n\n        deleting = ipw.Button(\n            description='Delete materials',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the materials in the object_materials.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            materials_filename = 'object_materials.txt'\n            materials = self.get_materials()\n\n            for material in list(wg_materials.value):\n                materials.remove(material)\n\n            pd.Series(materials).to_csv(self.folder_db / materials_filename, index=False, header=False)\n\n            with button_delete_output:\n                print(f'Materials deleted: {wg_materials.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(wg_materials)\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def delete_methods(self, acronym:Optional[str] = None):\n        \"\"\"Remove an analytical method from the database file.\n\n        Parameters\n        ----------\n        acronym : Optional[str], optional\n            Acronym of the method, by default None\n        \"\"\"\n\n        if acronym == None:\n            acronym = 'Select an acronym'\n\n        df_methods = self.get_methods()\n        method_acronyms = list(df_methods['acronym'])\n\n        if acronym not in  ['Select an acronym'] + method_acronyms:\n            print(f'The acronym you entered \"{acronym}\" has not been registered in the database.')\n            acronym = 'Select an acronym'\n\n        wg_acronym = ipw.Dropdown(        \n            value=acronym,\n            options=  ['Select an acronym'] + method_acronyms,\n            description='Acronym',\n            style=style,\n            layout=Layout(width=\"17%\", height=\"30px\")        \n        )\n\n        wg_method_name = ipw.Text(\n            value='',\n            description='',\n            disabled=False         \n        )\n\n        deleting = ipw.Button(\n            description='Delete method',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def change_acronym(change):            \n            new_acronym = change.new\n            name = df_methods.query(f'acronym == \"{new_acronym}\"')['name'].values[0]            \n            wg_method_name.value = name\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the method info in the analytical_methods.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            methods_filename = 'analytical_methods.txt'\n            df_methods = self.get_methods()\n            df_methods = df_methods.drop(df_methods[df_methods['acronym'] == wg_acronym.value].index)\n\n            df_methods.to_csv(self.folder_db / methods_filename, index=False)\n\n            with button_delete_output:\n                print(f'Method deleted: {wg_acronym.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n        wg_acronym.observe(change_acronym, names='value')\n\n        # Display the widgets\n        display(ipw.HBox([wg_acronym, wg_method_name]))\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def delete_objects(self, object_id:Optional[str] = None):\n        \"\"\"Remove a  object from the database file.\n\n        Parameters\n        ----------\n        object_id : Optional[str], optional\n            ID number of the object, by default None\n        \"\"\"\n\n        if object_id == None:\n            object_id = 'Select an object ID'\n\n        object_ids = sorted(list(self.get_objects()['object_id']), key=str.lower)\n\n        if object_id not in  ['Select an object ID'] + object_ids:\n            print(f'The object ID you entered \"{object_id}\" has not been registered in the database.')\n            object_id = 'Select an object ID'\n\n        objectId_widget = ipw.Dropdown(        \n            value=object_id,\n            options=['Select an object ID'] + object_ids,\n            description='Object ID',             \n        )\n\n\n        deleting = ipw.Button(\n            description='Delete object',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the object info in the objects_info.csv file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            objects_folder = self.folder_db\n            objects_filename = 'objects_info.csv'\n\n            df_objects = self.get_objects()\n            df_objects = df_objects.drop(df_objects[df_objects['object_id'] == objectId_widget.value].index)\n\n            df_objects.to_csv(objects_folder/objects_filename, index=False)\n\n            with button_delete_output:\n                print(f'Object deleted: {objectId_widget.value}')\n\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(objectId_widget)\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def delete_projects(self, project_id:Optional[str] = None):\n        \"\"\"Remove a  project from the database file.\n\n        Parameters\n        ----------\n        project_id : Optional[str], optional\n            ID number of the project, by default None\n        \"\"\"\n\n        if project_id == None:\n            project_id = 'Select a project ID'\n\n        project_ids = list(self.get_projects()['project_id'])\n\n        if project_id not in  ['Select a project ID'] + project_ids:\n            print(f'The project ID you entered \"{project_id}\" has not been registered in the database.')\n            project_id = 'Select a project ID'\n\n        projectId_widget = ipw.Dropdown(        \n            value=project_id,\n            options=['Select a project ID'] + project_ids,\n            description='Project ID',             \n        )\n\n\n        deleting = ipw.Button(\n            description='Delete project',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the project info in the projects_info.csv file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            projects_folder = self.folder_db\n            projects_filename = 'projects_info.csv'\n\n            df_projects = self.get_projects()\n            df_projects = df_projects.drop(df_projects[df_projects['project_id'] == projectId_widget.value].index)\n\n            df_projects.to_csv(projects_folder/projects_filename, index=False)\n\n            with button_delete_output:\n                print(f'Project deleted: {projectId_widget.value}')\n\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(projectId_widget)\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def delete_techniques(self):\n        \"\"\"Remove one or several object techniques from the database file.\n        \"\"\"\n\n        techniques = self.get_techniques()        \n\n        wg_techniques = ipw.SelectMultiple(            \n            options=  techniques,\n            description='Techniques',  \n            rows=10,           \n        )\n\n        deleting = ipw.Button(\n            description='Delete techniques',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the techniques in the object_techniques.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            techniques_filename = 'object_techniques.txt'\n            techniques = self.get_techniques()\n\n            for technique in list(wg_techniques.value):\n                techniques.remove(technique)\n\n            pd.Series(techniques).to_csv(self.folder_db / techniques_filename, index=False, header=False)\n\n            with button_delete_output:\n                print(f'Techniques deleted: {wg_techniques.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(wg_techniques)\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def delete_types(self):\n        \"\"\"Remove one or several object types from the database file.\n        \"\"\"\n\n        types = self.get_types()        \n\n        wg_types = ipw.SelectMultiple(            \n            options=  types,\n            description='Types',  \n            rows=10,           \n        )\n\n        deleting = ipw.Button(\n            description='Delete types',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the types in the object_types.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            types_filename = 'object_types.txt'\n            types = self.get_types()\n\n            for type in list(wg_types.value):\n                types.remove(type)\n\n            pd.Series(types).to_csv(self.folder_db / types_filename, index=False, header=False)\n\n            with button_delete_output:\n                print(f'Types deleted: {wg_types.value}')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n\n        # Display the widgets\n        display(wg_types)\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def delete_users(self,initials:Optional[str] = None):\n        \"\"\"Remove a user from the database file.\n\n        Parameters\n        ----------\n        initials : Optional[str], optional\n            Initials of the user, by default None\n        \"\"\"\n\n        if initials == None:\n            initials = 'Select the initials'\n\n        df_users = self.get_users()\n        initials_list = list(df_users['initials'])\n\n        if initials not in  ['Select the initials'] + initials_list:\n            print(f'The initials you entered \"{initials}\" has not been registered in the database.')\n            initials = 'Select the initials'\n\n        wg_initials = ipw.Dropdown(        \n            value=initials,\n            options=['Select the initials'] + initials_list,\n            description='Initials',    \n            layout=Layout(width=\"20%\", height=\"30px\"),\n            style=style,         \n        )\n\n        wg_name_surname = ipw.Text(\n            value='',\n            description='',\n            disabled=False,\n            layout=Layout(width=\"30%\", height=\"30px\"),\n            style=style,\n        )           \n\n        deleting = ipw.Button(\n            description='Delete user',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def change_initials(change):\n            new_initials = change.new\n            name = df_users.query(f'initials == \"{new_initials}\"')['name'].values[0]\n            surname = df_users.query(f'initials == \"{new_initials}\"')['surname'].values[0]\n            wg_name_surname.value = f'{name} {surname}'\n\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the person info in the users_info.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            users_folder = self.folder_db\n            users_filename = 'users_info.txt'\n\n            df_users = self.get_users()\n            df_users = df_users.drop(df_users[df_users['initials'] == wg_initials.value].index)\n\n            df_users.to_csv(users_folder/users_filename, index=False)\n\n            with button_delete_output:\n                print(f'User {wg_initials.value} deleted.')\n\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n        wg_initials.observe(change_initials, names='value')\n\n        # Display the widgets\n        display(ipw.HBox([wg_initials, wg_name_surname]))\n        display(ipw.HBox([deleting, button_delete_output]))\n\n\n    def delete_white_standards(self,id:Optional[str] = None):\n        \"\"\"Remove a white standard from the database file.\n\n        Parameters\n        ----------\n        id : Optional[str], optional\n            ID number of the white standard, by default None\n        \"\"\"\n\n        if id == None:\n            id = 'Select an ID'\n\n        df_standards = self.get_white_standards()\n        id_list = list(df_standards['ID'])\n\n        if id not in  ['Select an ID'] + id_list:\n            print(f'The ID you entered \"{id}\" has not been registered in the database.')\n            id = 'Select an ID'\n\n        wg_id = ipw.Dropdown(        \n            value=id,\n            options=['Select an ID'] + id_list,\n            description='ID',   \n            layout=Layout(width=\"15%\", height=\"30px\"),\n            style=style,          \n        )\n\n        wg_description = ipw.Text(\n            value='',\n            description='',\n            disabled=False,\n            layout=Layout(width=\"70%\", height=\"30px\"),\n            style=style,\n        )           \n\n        deleting = ipw.Button(\n            description='Delete standard',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )        \n\n        button_delete_output = ipw.Output()\n\n\n        def change_id(change):\n            new_id = change.new\n            description = df_standards.query(f'ID == \"{new_id}\"')['description'].values[0]            \n            wg_description.value = description\n\n\n        def button_delete_pressed(b):\n            \"\"\"\n            Delete the standard info in the white_standards.txt file.\n            \"\"\"\n\n            button_delete_output.clear_output(wait=True)\n\n            standards_folder = self.folder_db\n            standards_filename = 'white_standards.txt'\n\n            df_standards = self.get_white_standards()\n            df_standards = df_standards.drop(df_standards[df_standards['ID'] == wg_id.value].index)\n\n            df_standards.to_csv(standards_folder/standards_filename, index=False)\n\n            with button_delete_output:\n                print(f'ID {wg_id.value} deleted.')\n\n\n        # Link the widget button to the function\n        deleting.on_click(button_delete_pressed)\n        wg_id.observe(change_id, names='value')\n\n        # Display the widgets\n        display(ipw.HBox([wg_id, wg_description]))\n        display(ipw.HBox([deleting, button_delete_output]))  \n</code></pre>"},{"location":"references/#msdb.msdb.DB.__init__","title":"<code>__init__(db_name=None, config_file=Path(__file__).parent / 'db_config.json')</code>","text":"<p>Instantiate a DB class object.</p>"},{"location":"references/#msdb.msdb.DB.__init__--parameters","title":"Parameters","text":"Optional[str] <p>Name of the databases, by default None When None, it retrieves the first databases info registered in the db_config.json file</p> Optional[str|Path] <p>Location of the configuration file, by default Path(file).parent/'db_config.json'</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def __init__(self, db_name:Optional[str] = None, config_file:Optional[str] = Path(__file__).parent / 'db_config.json') -&gt; None:\n    \"\"\"Instantiate a DB class object.\n\n    Parameters\n    ----------\n\n    db_name : Optional[str]\n        Name of the databases, by default None\n        When None, it retrieves the first databases info registered in the db_config.json file\n\n    config_file : Optional[str|Path]\n        Location of the configuration file, by default Path(__file__).parent/'db_config.json'\n\n    \"\"\"\n\n    self.db_name = db_name       \n    self.config_file = config_file\n\n    # Check whether the db_config.json file exists\n    self._init_config()                  \n\n    # Check whether databases were created\n    if len(get_config_file()['databases']) == 0:\n        print('There are no databases registered. Create a database to start using the functions available through the DB class.')\n        return None\n\n    # Check whether the name_db value is valid or select the first registered database name\n    existing_dbs = get_db_names()\n\n    if db_name == None:\n        self.db_name = get_db_names()[0]    # Select the first registered database name    \n\n    elif self.db_name not in existing_dbs:\n        print(f'The name_db value you entered ({self.db_name}) has not been registered. Please select a registered database name.')\n        return\n\n    self.folder_db = Path(get_config_file()['databases'][self.db_name]['path_folder'])\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_creators","title":"<code>add_creators()</code>","text":"<p>Record a new object creator in the object_creators.txt file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_creators(self):\n    \"\"\"Record a new object creator in the object_creators.txt file\n    \"\"\"\n\n    # Function to update the text file if the initials are unique\n    def update_text_file(name, surname):            \n\n        df_creators = self.get_creators()\n        df_creators = pd.concat([df_creators, pd.DataFrame(data=[name,surname], index=['name','surname']).T])\n        df_creators = df_creators.sort_values(by='surname')\n        df_creators.to_csv(self.folder_db/'object_creators.txt',index=False)\n\n        print(f\"Added: {surname}, {name}\")\n\n    # Define ipython widgets\n    name_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a name (optional)',\n        description='Name', \n        style=style              \n    )\n\n    surname_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a surname',\n        description='Surname',    \n        style=style         \n    )\n\n    recording = ipw.Button(\n        description='Record creator',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the creator info in the objet_creators.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        name = name_widget.value.strip()\n        surname = surname_widget.value.strip()\n\n        with button_record_output:\n\n            if surname: # ensure the surname field is complete\n                update_text_file(name, surname)\n            else:\n\n                print(\"Please enter at least a surname.\")\n\n\n    recording.on_click(button_record_pressed)\n\n    display(surname_widget,name_widget)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_devices","title":"<code>add_devices()</code>","text":"<p>Record a new analytical device in the devices.txt file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_devices(self):\n    \"\"\"Record a new analytical device in the devices.txt file\n    \"\"\"\n\n    # Function to update the text file if the initials are unique\n    def update_text_file(id, name, description):  \n\n        df_devices = self.get_devices()\n\n        existing_devices = df_devices['ID'].values\n\n        if id in existing_devices:\n            print(f'The ID you entered ({id}) has already been attributed to another device:')   \n            print(df_devices[df_devices['ID'] == id])  \n\n        else:\n            df_devices = pd.concat([df_devices, pd.DataFrame(data=[id,name,description], index=['ID','name','description']).T])\n            df_devices = df_devices.sort_values(by='ID')\n            df_devices.to_csv(self.folder_db / 'devices.txt',index=False)\n\n            print(f\"Device added: {id}, {name}\")\n\n    # Define ipython widgets\n    wg_id = ipw.Text(        \n        value='',\n        placeholder='Enter an ID',\n        description='Device ID',  \n        style=style,\n        layout=Layout(width=\"40%\", height=\"30px\")             \n    )\n\n    wg_name = ipw.Text(        \n        value='',\n        placeholder='Enter name',\n        description='Device name',\n        style=style,\n        layout=Layout(width=\"40%\", height=\"30px\")             \n    )\n\n    wg_description = ipw.Text(        \n        value='',\n        placeholder='Briefly describe the device purpose (Optional)',\n        description='Device description',   \n        style=style,\n        layout=Layout(width=\"40%\", height=\"30px\")       \n    )\n\n    recording = ipw.Button(\n        description='Record device',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the device info in the devices.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        id = wg_id.value.strip()\n        name = wg_name.value.strip()\n        description = wg_description.value.strip()\n\n        with button_record_output:\n\n            if id and name: # ensure the id and name fields are complete\n                update_text_file(id, name, description)\n            else:                    \n                print(\"Please enter at least an ID and a name.\")\n\n\n    recording.on_click(button_record_pressed)\n\n    display(wg_id,wg_name,wg_description)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_institutions","title":"<code>add_institutions()</code>","text":"<p>Record a new institution in the institutions.txt file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_institutions(self):        \n    \"\"\"Record a new institution in the institutions.txt file\n    \"\"\"\n\n    # Function to get the existing initials from the file\n    def get_existing_acronyms(file_path):\n        try:\n            df_institutions = self.get_institutions()\n            existing_acronyms = df_institutions['acronym'].values                \n            return existing_acronyms\n        except FileNotFoundError:\n            # If the file does not exist, return an empty set\n            return set()\n\n    # Function to update the text file if the initials are unique\n    def update_text_file(file_path, name, acronym):\n        # Check if the acronym already exists\n        existing_acronyms = get_existing_acronyms(file_path)\n\n        if acronym in existing_acronyms:\n            print(f\"Acronym '{acronym}' already exists. Please use a different acronym.\")\n        else:\n            df_institutions = self.get_institutions()\n            df_institutions = pd.concat([df_institutions, pd.DataFrame(data=[name,acronym], index=['name','acronym']).T])\n            df_institutions = df_institutions.sort_values(by='name')\n            df_institutions.to_csv(self.folder_db/'institutions.txt',index=False)\n\n            print(f\"Added: {name} : {acronym}\")\n\n    # Define ipython widgets\n    name_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a name',\n        description='Name', \n        style=style,\n        layout=Layout(width=\"40%\", height=\"30px\")              \n    )\n\n    acronym_widget = ipw.Text(        \n        value='',\n        placeholder='Enter an acronym',\n        description='Acronym', \n        style=style,\n        layout=Layout(width=\"40%\", height=\"30px\")            \n    )\n\n    recording = ipw.Button(\n        description='Record institution',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the person info in the persons.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        name = name_widget.value.strip()            \n        acronym = acronym_widget.value.strip()\n\n        with button_record_output:\n\n            if name and acronym: # ensure all fields are filled\n                update_text_file(self.folder_db / 'institutions.txt', name, acronym)\n            else:\n\n                print(\"Please enter all fields (Name, Acronym)\")\n\n    recording.on_click(button_record_pressed)\n\n    display(name_widget,acronym_widget)\n    display(ipw.HBox([recording, button_record_output]))       \n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_lamps","title":"<code>add_lamps()</code>","text":"<p>Record a new lamp in the lamps.txt file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_lamps(self):\n    \"\"\"Record a new lamp in the lamps.txt file\n    \"\"\"\n\n    # Function to get the existing lamps ID from the file\n    def get_existing_lamps():\n        try:\n            df_lamps = self.get_lamps()\n            existing_lamps = df_lamps['ID'].values                \n            return existing_lamps\n        except FileNotFoundError:\n            # If the file does not exist, return an empty set\n            return set()\n\n    # Function to update the text file if the ID is unique\n    def update_text_file(ID, description):\n        # Check if the ID already exists\n        existing_lamps = get_existing_lamps()\n\n        if ID in existing_lamps:\n            print(f\"ID '{ID}' already exists. Please use a different ID.\")\n        else:\n            df_lamps = self.get_lamps()\n            df_lamps = pd.concat([df_lamps, pd.DataFrame(data=[ID,description], index=['ID','description']).T])\n            df_lamps = df_lamps.sort_values(by='ID')\n            df_lamps.to_csv(self.folder_db/'lamps.txt',index=False)\n\n            print(f\"Added: {ID} : {description}\")\n\n    # Define ipython widgets\n    wg_ID = ipw.Text(        \n        value='',\n        placeholder='Enter an ID',\n        description='ID', \n        layout=Layout(width=\"40%\", height=\"30px\"),\n        style=style,              \n    )\n\n    wg_description = ipw.Text(        \n        value='',\n        placeholder='Enter a brief description',\n        description='Description', \n        layout=Layout(width=\"40%\", height=\"30px\"),\n        style=style,            \n    )\n\n    recording = ipw.Button(\n        description='Record lamp',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the lamp info in the lamps.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        id = wg_ID.value.strip()            \n        description = wg_description.value.strip()\n\n        with button_record_output:\n\n            if id and description: # ensure all fields are filled\n                update_text_file(id, description)\n            else:                    \n                print(\"Please enter all fields (ID, description)\")\n\n    recording.on_click(button_record_pressed)\n\n    display(wg_ID,wg_description)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_materials","title":"<code>add_materials(name=None)</code>","text":"<p>Register a new object material.</p>"},{"location":"references/#msdb.msdb.DB.add_materials--returns","title":"Returns","text":"<p>ipywdigets     fill in the name of the material to be registered.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_materials(self, name:Optional[str] = None):\n    \"\"\"Register a new object material.\n\n    Returns\n    -------\n    ipywdigets\n        fill in the name of the material to be registered. \n    \"\"\"\n\n    # Define ipython widgets\n\n    wg_material = ipw.Text(        \n        value=name,\n        placeholder='Enter a name',\n        description='Material',  \n        style=style,\n        layout=Layout(width=\"40%\", height=\"30px\")             \n    )    \n\n    recording = ipw.Button(\n        description='Record material',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_record_output = ipw.Output()\n\n\n    # Define the path of the users database file\n\n    databases_folder = self.folder_db\n    materials_filename = 'object_materials.txt'\n\n\n    # Define some functions\n    def update_text_file(new_value):\n\n        # Check if the material has already been registered \n        existing_materials = self.get_materials()  \n\n        if new_value in existing_materials:\n            print(f'The material \"{new_value}\" has already been registered.')\n\n        else:\n            existing_materials.append(str(new_value).lower())         \n            existing_materials = sorted(existing_materials)\n\n            with open(databases_folder / materials_filename, 'w') as f:\n                    f.write('\\n'.join(existing_materials))\n\n            f.close()            \n\n            print(f\"Material added: {new_value}\")\n\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the type name in the object_materials.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n        material_name = wg_material.value.strip()\n\n        with button_record_output:            \n\n            if material_name: # ensure all fields are filled\n                update_text_file(material_name)\n            else:                    \n                print(\"Please enter a material name\")\n\n\n    # Link the widget button to the function\n    recording.on_click(button_record_pressed)\n\n    # Display the widgets\n    display(wg_material)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_methods","title":"<code>add_methods()</code>","text":"<p>Record a new analytical method in the analytical_methods.txt file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_methods(self):        \n    \"\"\"Record a new analytical method in the analytical_methods.txt file\n    \"\"\"\n\n    # Function to get the existing acronym from the file\n    def get_existing_acronyms():\n        try:\n            df_methods = self.get_methods()\n            existing_acronyms = df_methods['acronym'].values                \n            return existing_acronyms\n        except FileNotFoundError:\n            # If the file does not exist, return an empty set\n            return set()\n\n    # Function to update the text file if the initials are unique\n    def update_text_file(acronym, name):\n        # Check if the acronym already exists\n        existing_acronyms = list(get_existing_acronyms())\n\n        if acronym in existing_acronyms:\n            print(f\"Acronym '{acronym}' already exists. Please use a different acronym.\")\n        else:\n            df_methods = self.get_methods()\n            df_methods = pd.concat([df_methods, pd.DataFrame(data=[acronym, name], index=['acronym', 'name']).T])\n            df_methods = df_methods.sort_values(by='acronym')\n            df_methods.to_csv(self.folder_db/'analytical_methods.txt',index=False)\n\n            print(f\"Added: {acronym} : {name}\")\n\n    # Define ipython widgets\n    name_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a name',\n        description='Name', \n        style=style,\n        layout=Layout(width=\"40%\", height=\"30px\")              \n    )\n\n    acronym_widget = ipw.Text(        \n        value='',\n        placeholder='Enter an acronym',\n        description='Acronym',   \n        style=style,\n        layout=Layout(width=\"40%\", height=\"30px\")          \n    )\n\n    recording = ipw.Button(\n        description='Record method',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the person info in the persons.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        name = name_widget.value.strip()            \n        acronym = acronym_widget.value.strip()\n\n        with button_record_output:\n\n            if name and acronym: # ensure all fields are filled\n                update_text_file(acronym,name)\n            else:\n\n                print(\"Please enter all fields (Name, Acronym)\")\n\n    recording.on_click(button_record_pressed)\n\n    display(acronym_widget,name_widget)\n    display(ipw.HBox([recording, button_record_output])) \n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_objects","title":"<code>add_objects(project_id='')</code>","text":"<p>Add a new object in the objects_info.csv file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_objects(self, project_id:Optional[str] = ''):\n    \"\"\"Add a new object in the objects_info.csv file\"\"\"\n\n    db_projects = self.get_projects()\n    projects_list = ['noProject'] + list(db_projects['project_id'].values)\n\n    db_objects = self.get_objects()\n    existing_columns = list(db_objects.columns)\n\n    creators_file = pd.read_csv(self.folder_db / 'object_creators.txt')\n    creators = [f'{x[0]}, {x[1]}' if isinstance(x[1],str) else x[0] for x in creators_file.values]\n\n    types_file = open(self.folder_db / r'object_types.txt', 'r').read()\n    types = types_file.split(\"\\n\")        \n\n    techniques_file = open(self.folder_db / r'object_techniques.txt', 'r').read().strip()\n    techniques = sorted(techniques_file.split(\"\\n\"), key=str.lower)        \n\n    materials_file = open(self.folder_db  / r'object_materials.txt', 'r').read()\n    materials = sorted(materials_file.split(\"\\n\"), key=str.lower)        \n\n    owners_file = pd.read_csv(self.folder_db / 'institutions.txt')\n    owners = tuple(owners_file['name'].values)\n\n\n    # Define ipython widgets\n\n    project_id = ipw.Combobox(\n        value = project_id,\n        placeholder='Project',\n        options = projects_list,\n        description = 'Project id',\n        ensure_option=False,\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"30px\"),\n        style=style,\n    )\n\n    object_id = ipw.Text(        \n        value='',\n        placeholder='Inv. N\u00b0',\n        description='Id',\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"30px\"),\n        style=style,   \n    )\n\n    object_category = ipw.Dropdown(\n        options=['heritage','model','reference','sample'],\n        value='heritage',\n        description='Category',\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"30px\"),\n        style=style,\n    )    \n\n    object_creator = ipw.Combobox(\n        placeholder = 'Surname, Name',\n        options = creators,\n        description = 'Creator',\n        ensure_option=False,\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"30px\"),\n        style=style,\n    ) \n\n    object_date = ipw.Text(\n        value='',\n        placeholder='Enter a date',\n        description='Date',\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"30px\"),\n        style=style,         \n    )  \n\n    object_owner = ipw.Combobox(\n        placeholder = 'Enter an institution/owner',\n        options = owners,\n        description = 'Object owner',\n        ensure_option = False,\n        disabled = False,\n        layout=Layout(width='99%',height=\"30px\"),\n        style = style\n\n    )\n\n    object_title = ipw.Textarea(        \n        value='',\n        placeholder='Enter the title',\n        description='Title',\n        disabled=False,\n        layout=Layout(width='99%',height=\"100%\"),\n        style=style,   \n    )  \n\n    object_name = ipw.Text(        \n        value='',\n        placeholder='Enter a short object (no space, no underscore)',\n        description='Name',\n        disabled=False,\n        layout=Layout(width='99%',height=\"30px\"),\n        style=style,   \n    )\n\n    object_type = ipw.Combobox(\n        placeholder = 'General classification',\n        options=types,\n        description='Type',\n        ensure_option=False,\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"30px\"),\n        style=style,\n    )\n\n    object_techniques = ipw.Combobox(  \n        placeholder='Choose a technique',          \n        options = techniques,\n        description = '',\n        ensure_option=False,       \n        layout=Layout(width=\"65%\", height=\"180px\"),\n        style=style,\n    )  \n\n    object_techniques_selected = ipw.SelectMultiple(            \n        options=[], \n        description='Techniques',           \n        ensure_option=False,\n        rows=6,\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"140px\"),\n        style=style,\n    ) \n\n    object_materials = ipw.Combobox(\n        placeholder='Choose a material',\n        options=materials,\n        description='',\n        ensure_option=True,\n        layout=Layout(width=\"65%\", height=\"180px\"),\n        style=style,\n    )\n\n    object_materials_selected = ipw.SelectMultiple(            \n        options=[], \n        description='Materials',           \n        ensure_option=False,\n        rows=6,\n        disabled=False,\n        layout=Layout(width=\"99%\", height=\"140px\"),\n        style=style,\n    )\n\n    recording = ipw.Button(\n        description='Record object',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n        #icon='check' # (FontAwesome names without the `fa-` prefix)\n    )        \n\n\n    button_record_output = ipw.Output()    \n\n    # Create a button to remove selected techniques\n    remove_technique_button = ipw.Button(\n        description='Remove selected',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me to remove the selected techniques',\n        icon='check',\n        layout=Layout(width=\"35%\", height=\"30px\"),\n        style=style,\n    )   \n\n    # Create a button to remove selected materials\n    remove_material_button = ipw.Button(\n        description='Remove selected',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me to remove the selected materials',\n        icon='check',\n        layout=Layout(width=\"35%\", height=\"30x\"),\n        style=style,\n    ) \n\n\n\n    # Combobox for additional parameters (if any)\n    additional_params = [col for col in existing_columns if col not in [\n        'project_id',\n        'object_id',\n        'object_category',\n        'object_type',\n        'object_technique',\n        'object_title',\n        'object_name',\n        'object_creator',\n        'object_date',\n        'object_owner',\n        'object_material']]\n\n    additional_param_widgets = {}\n    for param in additional_params:\n        additional_param_widgets[param] = ipw.Combobox(\n            description=param,\n            options=[],  # You can populate this with options if needed\n            placeholder=f\"Enter {param} value\",\n            style=style\n        )  \n\n    # Function to add selected material to the SelectMultiple\n    def object_materials_change(change):\n        if change['type'] == 'change' and change['name'] == 'value':\n            selected_material = change['new']\n            if selected_material and selected_material not in object_materials_selected.value:\n                object_materials_selected.options = list(object_materials_selected.options) + [selected_material]  \n\n    # Function to add selected technique to the SelectMultiple\n    def object_techniques_change(change):\n        if change['type'] == 'change' and change['name'] == 'value':\n            selected_technique = change['new']\n            if selected_technique and selected_technique not in object_techniques_selected.value:\n                object_techniques_selected.options = list(object_techniques_selected.options) + [selected_technique]     \n\n    # Function to remove selected techniques\n    def on_remove_technique_button_click(b):\n        # Get the indices of the selected options\n        selected_indices = object_techniques_selected.index\n        # Remove the selected options from the SelectMultiple\n        object_techniques_selected.options = [option for i, option in enumerate(object_techniques_selected.options) if i not in selected_indices]\n\n    # Function to remove selected materials\n    def on_remove_material_button_click(b):\n        # Get the indices of the selected options\n        selected_indices = object_materials_selected.index\n        # Remove the selected options from the SelectMultiple\n        object_materials_selected.options = [option for i, option in enumerate(object_materials_selected.options) if i not in selected_indices]\n\n\n    # Observe changes in the Combobox widgets\n    object_materials.observe(object_materials_change)\n    object_techniques.observe(object_techniques_change)\n\n    # Set the button click event handler\n    remove_technique_button.on_click(on_remove_technique_button_click)\n    remove_material_button.on_click(on_remove_material_button_click)\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the object info in the object database file (objects_info.csv).\n        \"\"\"\n\n        with button_record_output:\n            button_record_output.clear_output(wait=True)\n\n            db_objects_file = self.folder_db / 'objects_info.csv'\n            db_objects = pd.read_csv(db_objects_file)            \n\n            creators = [f'{x[0]}, {x[1]}' if isinstance(x[1],str) else x[0] for x in self.get_creators().values]\n\n            owners_file = open(self.folder_db  / r'institutions.txt', 'r').read().splitlines()\n            owners = owners_file             \n\n            types_file = open(self.folder_db / r'object_types.txt', 'r').read().splitlines()\n            types = types_file       \n\n\n            new_row = pd.DataFrame({                    \n                'project_id': project_id.value,\n                'object_id' : object_id.value,                   \n                'object_category': object_category.value, \n                'object_type': object_type.value, \n                \"object_technique\": \"_\".join(object_techniques_selected.options),\n                \"object_title\": object_title.value,\n                'object_name': object_name.value,\n                'object_creator': object_creator.value,                        \n                'object_date': object_date.value,\n                'object_owner': object_owner.value,\n                'object_material': \"_\".join(object_materials_selected.options)},                       \n                index=[0] \n                ) \n\n\n            if object_creator.value not in creators:                    \n\n                creator_surname = object_creator.value.split(',')[0].strip()\n                try:\n                    creator_name = object_creator.value.split(',')[1].strip()\n                except IndexError:\n                    creator_name = ''\n\n                df_creators = pd.read_csv(self.folder_db / 'object_creators.txt')\n                df_creators = pd.concat([df_creators, pd.DataFrame(data=[creator_surname,creator_name], index=['surname','name']).T])\n                df_creators.to_csv(self.folder_db / 'object_creators.txt', index=False)\n\n\n            if object_type.value not in types:\n                types.append(str(object_type.value))\n                types = sorted(types, key=str.casefold)\n\n                with open(self.folder_db / 'object_types.txt', 'w') as f:\n                    f.write('\\n'.join(types).strip())\n                f.close()                                 \n\n\n            # Add additional parameters to the new record\n            for param, widget in additional_param_widgets.items():\n                new_row[param] = widget.value\n\n            db_objects_new = pd.concat([db_objects, new_row],)\n            db_objects_new.to_csv(db_objects_file, index= False)\n            print(f'Object {object_id.value} added to database.')\n\n    recording.on_click(button_record_pressed)\n\n    display(\n        ipw.HBox([\n            ipw.VBox([object_id,project_id,object_creator,object_date,object_owner,object_category,object_type,object_title, object_name], layout=Layout(width=\"30%\", height=\"370px\"), style=style,),\n            ipw.VBox([ipw.HBox([object_techniques,remove_technique_button]),object_techniques_selected,ipw.HBox([object_materials,remove_material_button]),object_materials_selected], layout=Layout(width=\"30%\", height=\"370px\"), style=style),\n            ipw.VBox([*[widget for widget in additional_param_widgets.values()]], layout=Layout(width=\"30%\", height=\"370px\"), style=style)\n            ]))\n\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_projects","title":"<code>add_projects(project_id=None)</code>","text":"<p>Add a new project in the projects_info.csv file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_projects(self, project_id:Optional[str] = None):\n    \"\"\"Add a new project in the projects_info.csv file\"\"\"\n\n    db_projects = self.get_projects()\n    existing_columns = list(db_projects.columns)\n    institutions = tuple(self.get_institutions()['name'].values)    \n    persons = tuple([f'{x[0]}, {x[1]}' for x in self.get_users()[['name','surname']].values])    \n    methods = list(self.get_methods()['acronym'].values)\n\n    # Define ipython widgets\n    project_Id = ipw.Text(        \n        value=project_id,\n        placeholder='Type something',\n        description='Project Id',\n        disabled=False,\n        layout=Layout(width=\"95%\", height=\"30px\"),\n        style=style,   \n    )\n\n    institution = ipw.Combobox(\n        placeholder = 'Enter an institution',\n        options = institutions,              \n        description = 'Institution',\n        ensure_option=False,\n        disabled=False,\n        layout=Layout(width=\"95%\", height=\"30px\"),\n        style=style,\n    )\n\n    startDate = ipw.DatePicker(\n        description='Start date',\n        disabled=False,\n        layout=Layout(width=\"90%\", height=\"30px\"),\n        style=style,\n    )\n\n    endDate = ipw.DatePicker(\n        description='End date',\n        disabled=False,\n        layout=Layout(width=\"90%\", height=\"30px\"),\n        style=style,\n    )\n\n    project_leader = ipw.Combobox(\n        placeholder = 'Enter a name or a surname',\n        options=persons,            \n        description='Project leader',\n        disabled=False,\n        layout=Layout(width=\"90%\", height=\"30px\"),\n        style=style,\n    )\n\n    coresearchers = ipw.SelectMultiple(\n        value=['none'],\n        options=['none'] + list(persons), \n        description='Co-researchers',\n        rows=10,\n        disabled=False,\n        layout=Layout(width=\"90%\", height=\"135px\"),\n        style=style,\n    )\n\n    wg_methods = ipw.SelectMultiple(\n        value=['none'],\n        options=['none'] + list(methods), \n        description='Methods',\n        rows=10,\n        disabled=False,\n        layout=Layout(width=\"90%\", height=\"170px\"),\n        style=style,\n    )\n\n\n    recording = ipw.Button(\n        description='Record project',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',\n        #layout=Layout(width=\"50%\", height=\"30px\"),\n        #style=style,\n        #icon='check' # (FontAwesome names without the `fa-` prefix)\n    )\n\n\n    project_keyword = ipw.Text(\n        placeholder = 'Describe project in 1 or 2 words',\n        description = 'Project keywords',\n        disabled = False,\n        layout=Layout(width=\"95%\", height=\"30px\"),\n        style = style,\n    )\n\n    # Combobox for additional parameters (if any)\n    additional_params = [col for col in existing_columns if col not in ['project_id', 'institution', 'start_date', 'end_date', 'project_leader', 'co-researchers', 'keywords', 'methods']]\n    additional_param_widgets = {}\n    for param in additional_params:\n        additional_param_widgets[param] = ipw.Combobox(\n            description=param,\n            options=[],  # You can populate this with options if needed\n            placeholder=f\"Enter {param} value\"\n        )\n\n    button_record_output = ipw.Output()\n\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the project info in the project database file (projects_info.csv).\n        \"\"\"\n\n        with button_record_output:\n            button_record_output.clear_output(wait=True)\n\n            Projects_DB_file = self.folder_db / 'projects_info.csv'\n            Projects_DB = pd.read_csv(Projects_DB_file)  \n            persons = self.get_users()\n\n            institutions = pd.read_csv(self.folder_db / 'institutions.txt')['name'].values\n\n\n            project_leader_name = project_leader.value.split(',')[0].strip()\n            project_leader_surname = project_leader.value.split(',')[1].strip()\n            project_leader_initials = persons.query(f'name == \"{project_leader_name}\" and surname == \"{project_leader_surname}\"')['initials'].values[0]\n\n            if coresearchers.value[0] == 'none':\n                coresearchers_initials = 'none'\n\n            else:\n                coresearchers_initials = []\n                for coresearcher in [x for x in coresearchers.value]:\n                    coresearcher_name = coresearcher.split(',')[0].strip()\n                    coresearcher_surname = coresearcher.split(',')[1].strip()\n                    coresearcher_initials = persons.query(f'name == \"{coresearcher_name}\" and surname == \"{coresearcher_surname}\"')['initials'].values[0]\n                    coresearchers_initials.append(coresearcher_initials)\n\n\n                coresearchers_initials = '-'.join(coresearchers_initials)\n\n            if wg_methods.value == 'none':\n                methods_acronym = 'none'\n\n            else:\n                methods_acronym = \"_\".join(wg_methods.value)\n\n            new_row = pd.DataFrame({'project_id':project_Id.value,\n                    'institution':institution.value, \n                    'start_date':startDate.value, \n                    'end_date':endDate.value,\n                    'project_leader':project_leader_initials,  \n                    'co-researchers':coresearchers_initials,                       \n                    'keywords':project_keyword.value,\n                    'methods':methods_acronym},                                               \n                    index=[0] \n                    )  \n\n            if institution.value not in institutions:                       \n                institutions.append(str(institution.value))         \n                institutions = sorted(institutions)   \n\n                with open(self.folder_db / 'institutions.txt', 'w') as f:\n                    f.write('\\n'.join(institutions).strip())  \n                f.close()                \n\n\n            # Add additional parameters to the new record\n            for param, widget in additional_param_widgets.items():\n                new_row[param] = widget.value\n\n            Projects_DB_new = pd.concat([Projects_DB, new_row],)\n            Projects_DB_new.to_csv(Projects_DB_file, index= False)\n            print(f'Project {project_Id.value} added to database.')\n\n    recording.on_click(button_record_pressed)\n\n\n    # Display the widgets\n    display(ipw.HBox([\n        ipw.VBox([\n            ipw.HBox([\n                ipw.VBox([project_Id,institution, project_keyword, startDate, endDate],layout=Layout(width=\"60%\", height=\"100%\")),\n                ipw.VBox([project_leader, coresearchers],layout=Layout(width=\"60%\", height=\"100%\")),\n                ipw.VBox([wg_methods],layout=Layout(width=\"60%\", height=\"100%\"))\n                ]),                \n            ], layout=Layout(width=\"70%\", height=\"100%\")),                        \n        ], layout=Layout(width=\"100%\", height=\"100%\"))\n    ) \n\n    display(*[widget for widget in additional_param_widgets.values()])\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_techniques","title":"<code>add_techniques()</code>","text":"<p>Register a new object technique.</p>"},{"location":"references/#msdb.msdb.DB.add_techniques--returns","title":"Returns","text":"<p>ipywdigets     fill in the name of the technique to be registered.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_techniques(self):\n    \"\"\"Register a new object technique.\n\n    Returns\n    -------\n    ipywdigets\n        fill in the name of the technique to be registered. \n    \"\"\"\n\n    # Define ipython widgets\n\n    technique_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a name',\n        description='Technique',   \n        style=style,\n        layout=Layout(width=\"40%\", height=\"30px\")            \n    )    \n\n    recording = ipw.Button(\n        description='Record technique',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_record_output = ipw.Output()\n\n\n    # Define the path of the users database file\n\n    databases_folder = self.folder_db\n    techniques_filename = 'object_techniques.txt'\n\n\n    # Define some functions    \n\n    def get_existing_techniques(file_path):\n        try:\n            return self.get_techniques()        \n\n        except FileNotFoundError:            \n            return\n\n\n    def update_text_file(file_path, name):\n\n        # Check if the technique has already been registered        \n        existing_techniques = get_existing_techniques(file_path)\n\n        if technique_widget.value in existing_techniques:\n            print(f'The technique {technique_widget.value} has already been registered.')\n\n        else:\n            existing_techniques.append(str(technique_widget.value).lower())         \n            existing_techniques = sorted(existing_techniques)\n\n            with open(databases_folder / techniques_filename, 'w') as f:\n                    f.write('\\n'.join(existing_techniques))\n\n            f.close()            \n\n            print(f\"Technique added: {name}\")\n\n\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the technique name in the object_techniques.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        name = technique_widget.value.strip()\n\n\n        with button_record_output:            \n\n            if name: # ensure all fields are filled\n                update_text_file(databases_folder / techniques_filename, name)\n            else:                    \n                print(\"Please enter all fields (Name)\")\n\n\n    # Link the widget button to the function\n    recording.on_click(button_record_pressed)\n\n    # Display the widgets\n    display(technique_widget)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_types","title":"<code>add_types(name=None)</code>","text":"<p>Register a new object type.</p>"},{"location":"references/#msdb.msdb.DB.add_types--returns","title":"Returns","text":"<p>ipywdigets     fill in the name of the type to be registered.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_types(self, name:Optional[str] = None):\n    \"\"\"Register a new object type.\n\n    Returns\n    -------\n    ipywdigets\n        fill in the name of the type to be registered. \n    \"\"\"\n\n    # Define ipython widgets\n\n    wg_type = ipw.Text(        \n        value=name,\n        placeholder='Enter a name',\n        description='Type',\n        style=style,\n        layout=Layout(width=\"40%\", height=\"30px\")               \n    )    \n\n    recording = ipw.Button(\n        description='Record type',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_record_output = ipw.Output()\n\n\n    # Define the path of the users database file\n\n    databases_folder = self.folder_db\n    types_filename = 'object_types.txt'\n\n\n    # Define some functions\n    def update_text_file(new_value):\n\n        # Check if the type has already been registered        \n        existing_types = self.get_types()\n\n        if new_value in existing_types:\n            print(f'The type \"{new_value}\" has already been registered.')\n\n        else:\n            existing_types.append(str(new_value).lower())         \n            existing_types = sorted(existing_types)\n\n            with open(databases_folder / types_filename, 'w') as f:\n                    f.write('\\n'.join(existing_types))\n\n            f.close()            \n\n            print(f\"Type added: {new_value}\")\n\n\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the type name in the object_types.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n        type_name = wg_type.value.strip()\n\n        with button_record_output:            \n\n            if type_name: # ensure all fields are filled\n                update_text_file(type_name)\n            else:                    \n                print(\"Please enter a type name\")\n\n\n    # Link the widget button to the function\n    recording.on_click(button_record_pressed)\n\n    # Display the widgets\n    display(wg_type)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_users","title":"<code>add_users()</code>","text":"<p>Record a new person in the users_info.txt file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_users(self):\n    \"\"\"Record a new person in the users_info.txt file\n    \"\"\"\n\n    # Function to get the existing initials from the file\n    def get_existing_initials(file_path):\n        try:\n            df_persons = self.get_users()\n            existing_initials = df_persons['initials']                \n            return existing_initials\n        except FileNotFoundError:\n            # If the file does not exist, return an empty set\n            return set()\n\n    # Function to update the text file if the initials are unique\n    def update_text_file(file_path, name, surname, initials):\n        # Check if the initials already exist\n        existing_initials = get_existing_initials(file_path)\n\n        if initials in existing_initials:\n            print(f\"Initials '{initials}' already exist. Please use different initials.\")\n        else:\n            df_persons = self.get_users()\n            df_persons = pd.concat([df_persons, pd.DataFrame(data=[name,surname,initials], index=['name','surname','initials']).T])\n            df_persons = df_persons.sort_values(by='name')\n            df_persons.to_csv(self.folder_db/'users_info.txt',index=False)\n\n            print(f\"Added: {name}, {surname} : {initials}\")\n\n\n    # Define ipython widgets\n    name_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a name',\n        description='Name',               \n    )\n\n    surname_widget = ipw.Text(        \n        value='',\n        placeholder='Enter a surname',\n        description='Surname',             \n    )\n\n    initials_widget = ipw.Text(        \n        value='',\n        placeholder='Enter initials in capital letters',\n        description='Initials',             \n    )\n\n    recording = ipw.Button(\n        description='Record user',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the person info in the users_info.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        name = name_widget.value.strip()\n        surname = surname_widget.value.strip()\n        initials = initials_widget.value.strip()\n\n        with button_record_output:\n\n            if name and surname and initials: # ensure all fields are filled\n                update_text_file(self.folder_db / 'users_info.txt', name, surname, initials)\n            else:\n\n                print(\"Please enter all fields (Name, Surname, Initials)\")\n\n\n\n    recording.on_click(button_record_pressed)\n\n    display(name_widget,surname_widget,initials_widget)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.add_white_standards","title":"<code>add_white_standards()</code>","text":"<p>Record a new white standard in the white_standards.txt file</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def add_white_standards(self):\n    \"\"\"Record a new white standard in the white_standards.txt file\n    \"\"\"\n\n    # Function to get the existing standards ID from the file\n    def get_existing_standards():\n        try:\n            df_standards = self.get_white_standards()\n            existing_standards = df_standards['ID'].values                \n            return existing_standards\n        except FileNotFoundError:\n            # If the file does not exist, return an empty set\n            return set()\n\n    # Function to update the text file if the ID is unique\n    def update_text_file(ID, description):\n        # Check if the ID already exists\n        existing_standards = get_existing_standards()\n\n        if ID in existing_standards:\n            print(f\"ID '{ID}' already exists. Please use a different ID.\")\n        else:\n            df_standards = self.get_white_standards()\n            df_standards = pd.concat([df_standards, pd.DataFrame(data=[ID,description], index=['ID','description']).T])\n            df_standards = df_standards.sort_values(by='ID')\n            df_standards.to_csv(self.folder_db/'white_standards.txt',index=False)\n\n            print(f\"Added: {ID} : {description}\")\n\n    # Define ipython widgets\n    wg_ID = ipw.Text(        \n        value='',\n        placeholder='Enter an ID',\n        description='ID', \n        layout=Layout(width=\"40%\", height=\"30px\"),\n        style=style,              \n    )\n\n    wg_description = ipw.Text(        \n        value='',\n        placeholder='Enter a brief description',\n        description='Description', \n        layout=Layout(width=\"40%\", height=\"30px\"),\n        style=style,            \n    )\n\n    recording = ipw.Button(\n        description='Record standard',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the standard info in the white_standards.txt file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        id = wg_ID.value.strip()            \n        description = wg_description.value.strip()\n\n        with button_record_output:\n\n            if id and description: # ensure all fields are filled\n                update_text_file(id, description)\n            else:                    \n                print(\"Please enter all fields (ID, description)\")\n\n    recording.on_click(button_record_pressed)\n\n    display(wg_ID,wg_description)\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.delete_creators","title":"<code>delete_creators()</code>","text":"<p>Remove one of several creators from the database file.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def delete_creators(self):\n    \"\"\"Remove one of several creators from the database file.\n    \"\"\"\n\n    creators_df = self.get_creators()\n    creators_list = [f'{x[0]}, {x[1]}' if isinstance(x[1],str) else x[0] for x in creators_df.values]       \n\n    wg_creators = ipw.SelectMultiple(          \n        options=  creators_list,\n        description='Creators',\n        rows=10             \n    )\n\n    deleting = ipw.Button(\n        description='Delete creators',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the institution info in the institutions.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        creators_filename = 'object_creators.txt'\n        creators_df = self.get_creators()            \n\n        for creator in list(wg_creators.value):\n\n            if ',' in creator:\n                surname = creator.split(',')[0].strip()\n                name = creator.split(',')[1].strip()\n                creators_df = creators_df.drop(creators_df[(creators_df['surname'] == surname) &amp; (creators_df['name'] == name)].index)\n\n            else:                                   \n                creators_df = creators_df.drop(creators_df[(creators_df['surname'] == creator)].index)\n\n\n        creators_df.to_csv(self.folder_db / creators_filename, index=False)\n\n        with button_delete_output:\n            print(f'Creators deleted: {wg_creators.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(wg_creators)\n    display(ipw.HBox([deleting, button_delete_output]))  \n</code></pre>"},{"location":"references/#msdb.msdb.DB.delete_devices","title":"<code>delete_devices(ID=None)</code>","text":"<p>Remove devices from the database file.</p>"},{"location":"references/#msdb.msdb.DB.delete_devices--parameters","title":"Parameters","text":"<p>ID : Optional[str,list], optional     ID of the devices, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def delete_devices(self, ID:Optional[str] = None):\n    \"\"\"Remove devices from the database file.\n\n    Parameters\n    ----------\n    ID : Optional[str,list], optional\n        ID of the devices, by default None\n    \"\"\"\n\n    devices_ID = list(self.get_devices()['ID'])\n\n    if ID == None:\n        ID = [devices_ID[0]]\n\n    elif isinstance(ID,str):\n        ID = [ID]\n\n\n    wg_devices = ipw.SelectMultiple(        \n        value=ID,\n        options=  devices_ID,\n        description='devices ID', \n        rows=10            \n    )\n\n\n    deleting = ipw.Button(\n        description='Delete devices',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the institution info in the institutions.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        devices_filename = 'devices.txt'\n        df_devices = self.get_devices()\n\n        for id in list(wg_devices.value):\n            df_devices = df_devices.drop(df_devices[df_devices['ID'] == id].index)\n\n        df_devices.to_csv(self.folder_db / devices_filename, index=False)\n\n        with button_delete_output:\n            print(f'Devices deleted: {wg_devices.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(wg_devices)\n    display(ipw.HBox([deleting, button_delete_output]))  \n</code></pre>"},{"location":"references/#msdb.msdb.DB.delete_institutions","title":"<code>delete_institutions(acronym=None)</code>","text":"<p>Remove an institution from the database file.</p>"},{"location":"references/#msdb.msdb.DB.delete_institutions--parameters","title":"Parameters","text":"<p>acronym : Optional[str], optional     Acronym of the institution, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def delete_institutions(self, acronym:Optional[str] = None):\n    \"\"\"Remove an institution from the database file.\n\n    Parameters\n    ----------\n    acronym : Optional[str], optional\n        Acronym of the institution, by default None\n    \"\"\"\n\n    if acronym == None:\n        acronym = 'Select an acronym'\n\n    df_institutions = self.get_institutions()\n    institution_acronyms = list(df_institutions['acronym'])\n\n    if acronym not in  ['Select an acronym'] + institution_acronyms:\n        print(f'The acronym you entered \"{acronym}\" has not been registered in the database.')\n        acronym = 'Select an acronym'\n\n    wg_acronym = ipw.Dropdown(        \n        value=acronym,\n        options=  ['Select an acronym'] + institution_acronyms,\n        description='Acronym',\n        style=style,\n        layout=Layout(width=\"17%\", height=\"30px\")        \n    )\n\n    wg_institution_name = ipw.Text(\n        value='',\n        description='',\n        disabled=False         \n    )\n\n    deleting = ipw.Button(\n        description='Delete institution',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def change_acronym(change):            \n        new_acronym = change.new\n        name = df_institutions.query(f'acronym == \"{new_acronym}\"')['name'].values[0]            \n        wg_institution_name.value = name\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the institution info in the institutions.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        institutions_filename = 'institutions.txt'\n        df_institutions = self.get_institutions()\n        df_institutions = df_institutions.drop(df_institutions[df_institutions['acronym'] == wg_acronym.value].index)\n\n        df_institutions.to_csv(self.folder_db / institutions_filename, index=False)\n\n        with button_delete_output:\n            print(f'Institution deleted: {wg_acronym.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n    wg_acronym.observe(change_acronym, names='value')\n\n    # Display the widgets\n    display(ipw.HBox([wg_acronym, wg_institution_name]))\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.delete_lamps","title":"<code>delete_lamps(id=None)</code>","text":"<p>Remove a lamp from the database file.</p>"},{"location":"references/#msdb.msdb.DB.delete_lamps--parameters","title":"Parameters","text":"<p>id : Optional[str], optional     ID number of the lamp, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def delete_lamps(self, id:Optional[str] = None):\n    \"\"\"Remove a lamp from the database file.\n\n    Parameters\n    ----------\n    id : Optional[str], optional\n        ID number of the lamp, by default None\n    \"\"\"\n\n    if id == None:\n        id = 'Select an ID'\n\n    df_lamps = self.get_lamps()\n    id_list = list(df_lamps['ID'])\n\n    if id not in  ['Select an ID'] + id_list:\n        print(f'The ID you entered \"{id}\" has not been registered in the database.')\n        id = 'Select an ID'\n\n    wg_id = ipw.Dropdown(        \n        value=id,\n        options=['Select an ID'] + id_list,\n        description='ID',   \n        layout=Layout(width=\"15%\", height=\"30px\"),\n        style=style,          \n    )\n\n    wg_description = ipw.Text(\n        value='',\n        description='',\n        disabled=False,\n        layout=Layout(width=\"70%\", height=\"30px\"),\n        style=style,\n    )           \n\n    deleting = ipw.Button(\n        description='Delete lamp',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def change_id(change):\n        new_id = change.new\n        description = df_lamps.query(f'ID == \"{new_id}\"')['description'].values[0]            \n        wg_description.value = description\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the lamp info in the lamps.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        lamps_folder = self.folder_db\n        lamps_filename = 'lamps.txt'\n\n        df_lamps = self.get_lamps()\n        df_lamps = df_lamps.drop(df_lamps[df_lamps['ID'] == wg_id.value].index)\n\n        df_lamps.to_csv(lamps_folder/lamps_filename, index=False)\n\n        with button_delete_output:\n            print(f'ID {wg_id.value} deleted.')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n    wg_id.observe(change_id, names='value')\n\n    # Display the widgets\n    display(ipw.HBox([wg_id, wg_description]))\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.delete_materials","title":"<code>delete_materials()</code>","text":"<p>Remove one or several object materials from the database file.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def delete_materials(self):\n    \"\"\"Remove one or several object materials from the database file.\n    \"\"\"\n\n    materials = self.get_materials()        \n\n    wg_materials = ipw.SelectMultiple(            \n        options=  materials,\n        description='Materials',  \n        rows=10,           \n    )\n\n    deleting = ipw.Button(\n        description='Delete materials',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the materials in the object_materials.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        materials_filename = 'object_materials.txt'\n        materials = self.get_materials()\n\n        for material in list(wg_materials.value):\n            materials.remove(material)\n\n        pd.Series(materials).to_csv(self.folder_db / materials_filename, index=False, header=False)\n\n        with button_delete_output:\n            print(f'Materials deleted: {wg_materials.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(wg_materials)\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.delete_methods","title":"<code>delete_methods(acronym=None)</code>","text":"<p>Remove an analytical method from the database file.</p>"},{"location":"references/#msdb.msdb.DB.delete_methods--parameters","title":"Parameters","text":"<p>acronym : Optional[str], optional     Acronym of the method, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def delete_methods(self, acronym:Optional[str] = None):\n    \"\"\"Remove an analytical method from the database file.\n\n    Parameters\n    ----------\n    acronym : Optional[str], optional\n        Acronym of the method, by default None\n    \"\"\"\n\n    if acronym == None:\n        acronym = 'Select an acronym'\n\n    df_methods = self.get_methods()\n    method_acronyms = list(df_methods['acronym'])\n\n    if acronym not in  ['Select an acronym'] + method_acronyms:\n        print(f'The acronym you entered \"{acronym}\" has not been registered in the database.')\n        acronym = 'Select an acronym'\n\n    wg_acronym = ipw.Dropdown(        \n        value=acronym,\n        options=  ['Select an acronym'] + method_acronyms,\n        description='Acronym',\n        style=style,\n        layout=Layout(width=\"17%\", height=\"30px\")        \n    )\n\n    wg_method_name = ipw.Text(\n        value='',\n        description='',\n        disabled=False         \n    )\n\n    deleting = ipw.Button(\n        description='Delete method',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def change_acronym(change):            \n        new_acronym = change.new\n        name = df_methods.query(f'acronym == \"{new_acronym}\"')['name'].values[0]            \n        wg_method_name.value = name\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the method info in the analytical_methods.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        methods_filename = 'analytical_methods.txt'\n        df_methods = self.get_methods()\n        df_methods = df_methods.drop(df_methods[df_methods['acronym'] == wg_acronym.value].index)\n\n        df_methods.to_csv(self.folder_db / methods_filename, index=False)\n\n        with button_delete_output:\n            print(f'Method deleted: {wg_acronym.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n    wg_acronym.observe(change_acronym, names='value')\n\n    # Display the widgets\n    display(ipw.HBox([wg_acronym, wg_method_name]))\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.delete_objects","title":"<code>delete_objects(object_id=None)</code>","text":"<p>Remove a  object from the database file.</p>"},{"location":"references/#msdb.msdb.DB.delete_objects--parameters","title":"Parameters","text":"<p>object_id : Optional[str], optional     ID number of the object, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def delete_objects(self, object_id:Optional[str] = None):\n    \"\"\"Remove a  object from the database file.\n\n    Parameters\n    ----------\n    object_id : Optional[str], optional\n        ID number of the object, by default None\n    \"\"\"\n\n    if object_id == None:\n        object_id = 'Select an object ID'\n\n    object_ids = sorted(list(self.get_objects()['object_id']), key=str.lower)\n\n    if object_id not in  ['Select an object ID'] + object_ids:\n        print(f'The object ID you entered \"{object_id}\" has not been registered in the database.')\n        object_id = 'Select an object ID'\n\n    objectId_widget = ipw.Dropdown(        \n        value=object_id,\n        options=['Select an object ID'] + object_ids,\n        description='Object ID',             \n    )\n\n\n    deleting = ipw.Button(\n        description='Delete object',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the object info in the objects_info.csv file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        objects_folder = self.folder_db\n        objects_filename = 'objects_info.csv'\n\n        df_objects = self.get_objects()\n        df_objects = df_objects.drop(df_objects[df_objects['object_id'] == objectId_widget.value].index)\n\n        df_objects.to_csv(objects_folder/objects_filename, index=False)\n\n        with button_delete_output:\n            print(f'Object deleted: {objectId_widget.value}')\n\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(objectId_widget)\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.delete_projects","title":"<code>delete_projects(project_id=None)</code>","text":"<p>Remove a  project from the database file.</p>"},{"location":"references/#msdb.msdb.DB.delete_projects--parameters","title":"Parameters","text":"<p>project_id : Optional[str], optional     ID number of the project, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def delete_projects(self, project_id:Optional[str] = None):\n    \"\"\"Remove a  project from the database file.\n\n    Parameters\n    ----------\n    project_id : Optional[str], optional\n        ID number of the project, by default None\n    \"\"\"\n\n    if project_id == None:\n        project_id = 'Select a project ID'\n\n    project_ids = list(self.get_projects()['project_id'])\n\n    if project_id not in  ['Select a project ID'] + project_ids:\n        print(f'The project ID you entered \"{project_id}\" has not been registered in the database.')\n        project_id = 'Select a project ID'\n\n    projectId_widget = ipw.Dropdown(        \n        value=project_id,\n        options=['Select a project ID'] + project_ids,\n        description='Project ID',             \n    )\n\n\n    deleting = ipw.Button(\n        description='Delete project',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the project info in the projects_info.csv file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        projects_folder = self.folder_db\n        projects_filename = 'projects_info.csv'\n\n        df_projects = self.get_projects()\n        df_projects = df_projects.drop(df_projects[df_projects['project_id'] == projectId_widget.value].index)\n\n        df_projects.to_csv(projects_folder/projects_filename, index=False)\n\n        with button_delete_output:\n            print(f'Project deleted: {projectId_widget.value}')\n\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(projectId_widget)\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.delete_techniques","title":"<code>delete_techniques()</code>","text":"<p>Remove one or several object techniques from the database file.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def delete_techniques(self):\n    \"\"\"Remove one or several object techniques from the database file.\n    \"\"\"\n\n    techniques = self.get_techniques()        \n\n    wg_techniques = ipw.SelectMultiple(            \n        options=  techniques,\n        description='Techniques',  \n        rows=10,           \n    )\n\n    deleting = ipw.Button(\n        description='Delete techniques',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the techniques in the object_techniques.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        techniques_filename = 'object_techniques.txt'\n        techniques = self.get_techniques()\n\n        for technique in list(wg_techniques.value):\n            techniques.remove(technique)\n\n        pd.Series(techniques).to_csv(self.folder_db / techniques_filename, index=False, header=False)\n\n        with button_delete_output:\n            print(f'Techniques deleted: {wg_techniques.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(wg_techniques)\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.delete_types","title":"<code>delete_types()</code>","text":"<p>Remove one or several object types from the database file.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def delete_types(self):\n    \"\"\"Remove one or several object types from the database file.\n    \"\"\"\n\n    types = self.get_types()        \n\n    wg_types = ipw.SelectMultiple(            \n        options=  types,\n        description='Types',  \n        rows=10,           \n    )\n\n    deleting = ipw.Button(\n        description='Delete types',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the types in the object_types.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        types_filename = 'object_types.txt'\n        types = self.get_types()\n\n        for type in list(wg_types.value):\n            types.remove(type)\n\n        pd.Series(types).to_csv(self.folder_db / types_filename, index=False, header=False)\n\n        with button_delete_output:\n            print(f'Types deleted: {wg_types.value}')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n\n    # Display the widgets\n    display(wg_types)\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.delete_users","title":"<code>delete_users(initials=None)</code>","text":"<p>Remove a user from the database file.</p>"},{"location":"references/#msdb.msdb.DB.delete_users--parameters","title":"Parameters","text":"<p>initials : Optional[str], optional     Initials of the user, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def delete_users(self,initials:Optional[str] = None):\n    \"\"\"Remove a user from the database file.\n\n    Parameters\n    ----------\n    initials : Optional[str], optional\n        Initials of the user, by default None\n    \"\"\"\n\n    if initials == None:\n        initials = 'Select the initials'\n\n    df_users = self.get_users()\n    initials_list = list(df_users['initials'])\n\n    if initials not in  ['Select the initials'] + initials_list:\n        print(f'The initials you entered \"{initials}\" has not been registered in the database.')\n        initials = 'Select the initials'\n\n    wg_initials = ipw.Dropdown(        \n        value=initials,\n        options=['Select the initials'] + initials_list,\n        description='Initials',    \n        layout=Layout(width=\"20%\", height=\"30px\"),\n        style=style,         \n    )\n\n    wg_name_surname = ipw.Text(\n        value='',\n        description='',\n        disabled=False,\n        layout=Layout(width=\"30%\", height=\"30px\"),\n        style=style,\n    )           \n\n    deleting = ipw.Button(\n        description='Delete user',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def change_initials(change):\n        new_initials = change.new\n        name = df_users.query(f'initials == \"{new_initials}\"')['name'].values[0]\n        surname = df_users.query(f'initials == \"{new_initials}\"')['surname'].values[0]\n        wg_name_surname.value = f'{name} {surname}'\n\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the person info in the users_info.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        users_folder = self.folder_db\n        users_filename = 'users_info.txt'\n\n        df_users = self.get_users()\n        df_users = df_users.drop(df_users[df_users['initials'] == wg_initials.value].index)\n\n        df_users.to_csv(users_folder/users_filename, index=False)\n\n        with button_delete_output:\n            print(f'User {wg_initials.value} deleted.')\n\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n    wg_initials.observe(change_initials, names='value')\n\n    # Display the widgets\n    display(ipw.HBox([wg_initials, wg_name_surname]))\n    display(ipw.HBox([deleting, button_delete_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.DB.delete_white_standards","title":"<code>delete_white_standards(id=None)</code>","text":"<p>Remove a white standard from the database file.</p>"},{"location":"references/#msdb.msdb.DB.delete_white_standards--parameters","title":"Parameters","text":"<p>id : Optional[str], optional     ID number of the white standard, by default None</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def delete_white_standards(self,id:Optional[str] = None):\n    \"\"\"Remove a white standard from the database file.\n\n    Parameters\n    ----------\n    id : Optional[str], optional\n        ID number of the white standard, by default None\n    \"\"\"\n\n    if id == None:\n        id = 'Select an ID'\n\n    df_standards = self.get_white_standards()\n    id_list = list(df_standards['ID'])\n\n    if id not in  ['Select an ID'] + id_list:\n        print(f'The ID you entered \"{id}\" has not been registered in the database.')\n        id = 'Select an ID'\n\n    wg_id = ipw.Dropdown(        \n        value=id,\n        options=['Select an ID'] + id_list,\n        description='ID',   \n        layout=Layout(width=\"15%\", height=\"30px\"),\n        style=style,          \n    )\n\n    wg_description = ipw.Text(\n        value='',\n        description='',\n        disabled=False,\n        layout=Layout(width=\"70%\", height=\"30px\"),\n        style=style,\n    )           \n\n    deleting = ipw.Button(\n        description='Delete standard',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_delete_output = ipw.Output()\n\n\n    def change_id(change):\n        new_id = change.new\n        description = df_standards.query(f'ID == \"{new_id}\"')['description'].values[0]            \n        wg_description.value = description\n\n\n    def button_delete_pressed(b):\n        \"\"\"\n        Delete the standard info in the white_standards.txt file.\n        \"\"\"\n\n        button_delete_output.clear_output(wait=True)\n\n        standards_folder = self.folder_db\n        standards_filename = 'white_standards.txt'\n\n        df_standards = self.get_white_standards()\n        df_standards = df_standards.drop(df_standards[df_standards['ID'] == wg_id.value].index)\n\n        df_standards.to_csv(standards_folder/standards_filename, index=False)\n\n        with button_delete_output:\n            print(f'ID {wg_id.value} deleted.')\n\n\n    # Link the widget button to the function\n    deleting.on_click(button_delete_pressed)\n    wg_id.observe(change_id, names='value')\n\n    # Display the widgets\n    display(ipw.HBox([wg_id, wg_description]))\n    display(ipw.HBox([deleting, button_delete_output]))  \n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_creators","title":"<code>get_creators()</code>","text":"<p>Retrieve the registered creators of objects.</p>"},{"location":"references/#msdb.msdb.DB.get_creators--returns","title":"Returns","text":"<p>pandas dataframe     It returns the surname and name of the creators inside a two-columns dataframe.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_creators(self):\n    \"\"\"Retrieve the registered creators of objects.\n\n    Returns\n    -------\n    pandas dataframe\n        It returns the surname and name of the creators inside a two-columns dataframe.\n    \"\"\"\n\n    if (Path(self.folder_db) / 'object_creators.txt').exists():\n        df_creators = pd.read_csv(Path(self.folder_db) / 'object_creators.txt')\n        return df_creators\n\n    else:\n        print(f'The file {Path(self.folder_db) / \"object_creators.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n        return\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_devices","title":"<code>get_devices()</code>","text":"<p>Retrieve the registered analytical devices.</p>"},{"location":"references/#msdb.msdb.DB.get_devices--returns","title":"Returns","text":"<p>pandas dataframe     It returns the information regarding the devices inside a dataframe.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_devices(self):\n    \"\"\"Retrieve the registered analytical devices.\n\n    Returns\n    -------\n    pandas dataframe\n        It returns the information regarding the devices inside a dataframe.\n    \"\"\"\n\n    if (Path(self.folder_db) / 'devices.txt').exists():\n        df_devices = pd.read_csv(Path(self.folder_db) / 'devices.txt')\n        return df_devices\n\n    else:\n        print(f'The file {Path(self.folder_db) / \"devices.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n        return\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_institutions","title":"<code>get_institutions()</code>","text":"<p>Retrieve the registered institutions.</p>"},{"location":"references/#msdb.msdb.DB.get_institutions--returns","title":"Returns","text":"<p>pandas dataframe     It returns the name and acronym of the institutions inside a two-columns dataframe.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_institutions(self):\n    \"\"\"Retrieve the registered institutions.\n\n    Returns\n    -------\n    pandas dataframe\n        It returns the name and acronym of the institutions inside a two-columns dataframe.\n    \"\"\"\n\n    if (Path(self.folder_db) / 'institutions.txt').exists():\n        df_institutions = pd.read_csv(Path(self.folder_db) / 'institutions.txt')\n        return df_institutions\n\n    else:\n        print(f'The file {Path(self.folder_db) / \"institutions.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n        return\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_lamps","title":"<code>get_lamps()</code>","text":"<p>Retrieve the registered lamps.</p>"},{"location":"references/#msdb.msdb.DB.get_lamps--returns","title":"Returns","text":"<p>pandas dataframe     It returns the ID and description of the lamps inside a two-columns dataframe.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_lamps(self):\n    \"\"\"Retrieve the registered lamps.\n\n    Returns\n    -------\n    pandas dataframe\n        It returns the ID and description of the lamps inside a two-columns dataframe.\n    \"\"\"\n\n    if (Path(self.folder_db) / 'lamps.txt').exists():\n        df_lamps = pd.read_csv(Path(self.folder_db) / 'lamps.txt')\n        return df_lamps\n\n    else:\n        print(f'The file {Path(self.folder_db) / \"lamps.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n        return  \n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_materials","title":"<code>get_materials()</code>","text":"<p>Retrieve the registered materials.</p>"},{"location":"references/#msdb.msdb.DB.get_materials--returns","title":"Returns","text":"<p>List     It returns the materials as strings inside a list.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_materials(self):\n    \"\"\"Retrieve the registered materials.\n\n    Returns\n    -------\n    List\n        It returns the materials as strings inside a list.\n    \"\"\"\n\n    materials_filename = 'object_materials.txt'\n\n    if not (self.folder_db / materials_filename).exists():\n        print(f'Please create an empty file called \"{materials_filename}\" in the the following folder: {self.folder_db}')\n        return\n\n    else:            \n        materials_df = pd.read_csv(self.folder_db / materials_filename, header=None)\n        materials = sorted(list(materials_df.values.flatten()), key=str.lower)              \n        return materials\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_methods","title":"<code>get_methods()</code>","text":"<p>Retrieve the registered scientific methods used to analyze objects.</p>"},{"location":"references/#msdb.msdb.DB.get_methods--returns","title":"Returns","text":"<p>pandas dataframe     It returns the name and acronym of the analytical methods inside a two-columns dataframe.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_methods(self):\n    \"\"\"Retrieve the registered scientific methods used to analyze objects.\n\n    Returns\n    -------\n    pandas dataframe\n        It returns the name and acronym of the analytical methods inside a two-columns dataframe.\n    \"\"\"\n\n    databases_folder = self.folder_db\n    methods_filename = 'analytical_methods.txt'\n\n    if not (databases_folder / methods_filename).exists():\n        print(f'Please create an empty file called \"{methods_filename}\" in the the following folder: {databases_folder}')\n        return\n\n    else:\n        df_methods = pd.read_csv((databases_folder / methods_filename))            \n        return df_methods\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_objects","title":"<code>get_objects(object_category=None, object_type=None, object_technique=None, object_owner=None, project_id=None, object_id=None, match_all=False)</code>","text":"<p>Retrieve information about the objects</p>"},{"location":"references/#msdb.msdb.DB.get_objects--parameters","title":"Parameters","text":"<p>object_category : Union[str,list], optional     Category of objects, by default None     There are only four categories of objects ('heritage', 'model', 'reference', 'sample')     If only one category is entered, you may enter it as a string, otherwise use a list.</p> Union[str,list], optional <p>Object type(s) for describing objects, by default None If only one type is entered, you may enter it as a string, otherwise use a list. For a list of all the types mentioned, use the function \"get_types()\".</p> Union[str,list], optional <p>Technique(s) used to create the objects, by default None If only one technique is entered, you may enter it as a string, otherwise use a list. For a list of all the techniques mentioned, use the function \"get_techniques()\".</p> Union[str,list], optional <p>Institution(s) that own the objects, by default None If only one institution is entered, you may enter it as a string, otherwise use a list.</p> Union[str,list], optional <p>ID number of one or several projects, by default None If only one ID is entered, you may enter it as a string, otherwise use a list.</p> Union[str,list], optional <p>description, by default None</p> Optional[bool], optional <p>Whether all the wanted queries should match, by default False</p>"},{"location":"references/#msdb.msdb.DB.get_objects--returns","title":"Returns","text":"<p>pandas dataframe     It returns the object info inside a dataframe where each line corresponds to a single object.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_objects(self,object_category:Union[str,list]=None, object_type:Union[str,list]=None, object_technique:Union[str,list]=None, object_owner:Union[str,list] = None, project_id:Union[str,list] = None, object_id:Union[str,list] = None, match_all:Optional[bool]=False):\n    \"\"\"Retrieve information about the objects\n\n    Parameters\n    ----------\n    object_category : Union[str,list], optional\n        Category of objects, by default None\n        There are only four categories of objects ('heritage', 'model', 'reference', 'sample')\n        If only one category is entered, you may enter it as a string, otherwise use a list.\n\n    object_type : Union[str,list], optional\n        Object type(s) for describing objects, by default None\n        If only one type is entered, you may enter it as a string, otherwise use a list.\n        For a list of all the types mentioned, use the function \"get_types()\".\n\n    object_technique : Union[str,list], optional\n        Technique(s) used to create the objects, by default None\n        If only one technique is entered, you may enter it as a string, otherwise use a list.\n        For a list of all the techniques mentioned, use the function \"get_techniques()\".\n\n    object_owner : Union[str,list], optional\n        Institution(s) that own the objects, by default None\n        If only one institution is entered, you may enter it as a string, otherwise use a list.\n\n    project_id : Union[str,list], optional\n        ID number of one or several projects, by default None\n        If only one ID is entered, you may enter it as a string, otherwise use a list.\n\n    object_id : Union[str,list], optional\n        _description_, by default None\n\n    match_all : Optional[bool], optional\n        Whether all the wanted queries should match, by default False\n\n    Returns\n    -------\n    pandas dataframe\n        It returns the object info inside a dataframe where each line corresponds to a single object.\n    \"\"\"       \n\n    databases_folder = self.folder_db\n    objects_filename = 'objects_info.csv'\n    df_objects = pd.read_csv((databases_folder / objects_filename)).fillna('none')\n\n    if not (databases_folder / objects_filename).exists():\n        print(f'Please create a .csv file called \"{objects_filename}\" in the the following folder: {databases_folder} ')\n        return\n\n\n    if object_category == None and object_type == None and object_technique == None and object_owner == None and project_id == None and object_id == None:\n        return df_objects\n\n    if isinstance(object_category, str):\n        object_category = [object_category]\n\n    if isinstance(object_type, str):\n        object_type = [object_type]\n\n    if isinstance(object_technique, str):\n        object_technique = [object_technique]    \n\n    if isinstance(object_owner, str):\n        object_owner = [object_owner]\n\n    if isinstance(project_id, str):\n        project_id = [project_id]\n\n    if isinstance(object_id, str):\n        object_id = [object_id]\n\n\n\n\n    df_institutions = self.get_institutions()\n    list_acronyms = df_institutions['acronym'].values\n\n    if object_owner != None:\n        object_owner = [df_institutions.query(f'acronym == \"{x}\"')['name'].values[0] if x in list_acronyms else 'none' for x in object_owner]\n        object_owner = [x for x in object_owner if x != 'none']\n\n\n\n    parameters = ['object_category','object_type','object_technique','object_owner','project_id', 'object_id']\n    input_values = [object_category, object_type, object_technique, object_owner, project_id, object_id]\n\n    filters = {}\n\n\n    for x,y in zip(parameters, input_values):\n        if y != None:\n            filters[x] = y\n\n\n    def match_criteria(row):\n        results = []\n        for col, values in filters.items():\n            if col in df_objects.columns:\n                matches = [bool(re.search(fr'(^|_){v}(_|$)', row[col])) for v in values]\n                results.append(all(matches) if match_all else any(matches))\n\n        return all(results) if match_all else any(results)\n\n    return df_objects[df_objects.apply(match_criteria, axis=1)]\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_projects","title":"<code>get_projects(PL=None, coresearchers=None, methods=None, institutions=None, project_id=None, match_all=False)</code>","text":"<p>Retrieve information about the registered projects</p>"},{"location":"references/#msdb.msdb.DB.get_projects--parameters","title":"Parameters","text":"<p>PL : Union[str,list], optional     The initials of the main researcher, by default None     If only one initials is entered, you may enter it as a string, otherwise use a list.</p> Union[str,list], optional <p>The initials of the co-researchers, by default None If only one initials is entered, you may enter it as a string, otherwise use a list.</p> Union[str,list], optional <p>Acronym of the method, by default None If only one method is entered, you may enter it as a string, otherwise use a list.</p> Union[str,list], optional <p>Acronym of the institutions, by default None If only one institution is entered, you may enter it as a string, otherwise use a list.</p> Union[str,list], optional <p>ID of the project, by default None If only one ID is entered, you may enter it as a string, otherwise use a list.</p> Optional[bool], optional <p>Whether all the wanted queries should match, by default False</p>"},{"location":"references/#msdb.msdb.DB.get_projects--returns","title":"Returns","text":"<p>pandas dataframe     It return the desired info about registered projects.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_projects(self, PL:Union[str,list]=None, coresearchers:Union[str,list]=None, methods:Union[str,list]=None, institutions:Union[str,list] = None, project_id:Union[str,list] = None, match_all:Optional[bool]=False):\n    \"\"\"Retrieve information about the registered projects\n\n    Parameters\n    ----------\n    PL : Union[str,list], optional\n        The initials of the main researcher, by default None\n        If only one initials is entered, you may enter it as a string, otherwise use a list.\n\n    coresearchers : Union[str,list], optional\n        The initials of the co-researchers, by default None\n        If only one initials is entered, you may enter it as a string, otherwise use a list.\n\n    methods : Union[str,list], optional\n        Acronym of the method, by default None\n        If only one method is entered, you may enter it as a string, otherwise use a list.\n\n    institutions : Union[str,list], optional\n        Acronym of the institutions, by default None\n        If only one institution is entered, you may enter it as a string, otherwise use a list.\n\n    project_id : Union[str,list], optional\n        ID of the project, by default None\n        If only one ID is entered, you may enter it as a string, otherwise use a list.\n\n    match_all : Optional[bool], optional\n        Whether all the wanted queries should match, by default False\n\n    Returns\n    -------\n    pandas dataframe\n        It return the desired info about registered projects.\n    \"\"\" \n\n    databases_folder = self.folder_db\n    projects_filename = 'projects_info.csv'\n    df_projects = pd.read_csv((databases_folder / projects_filename))\n\n    if not (databases_folder / projects_filename).exists():\n        print(f'Please create a file called \"projects_info.csv\" in the the following folder: {databases_folder}')\n        return\n\n\n    if PL == None and methods == None and institutions == None and project_id == None:\n        return df_projects\n\n    if isinstance(PL, str):\n        PL = [PL]\n\n    if isinstance(coresearchers, str):\n        coresearchers = [coresearchers]\n\n    if isinstance(methods, str):\n        methods = [methods]    \n\n    if isinstance(institutions, str):\n        institutions = [institutions]\n\n\n    df_institutions = self.get_institutions()\n    list_acronyms = df_institutions['acronym'].values\n\n    if institutions != None:\n        institutions = [df_institutions.query(f'acronym == \"{x}\"')['name'].values[0] if x in list_acronyms else 'none' for x in institutions]\n        institutions = [x for x in institutions if x != 'none']\n\n\n    parameters = ['project_leader', 'co-researchers', 'methods', 'institution', 'project_id']\n    input_values = [PL, coresearchers, methods, institutions, project_id]\n\n    filters = {}\n\n    for x,y in zip(parameters, input_values):\n        if y != None:\n            filters[x] = y\n\n\n    def match_criteria(row):\n        results = []\n        for col, values in filters.items():\n            if col in df_projects.columns:\n                matches = [bool(re.search(fr'(^|_){v}(_|$)', row[col])) for v in values]\n\n                results.append(all(matches) if match_all else any(matches))\n\n        return all(results) if match_all else any(results)\n\n    return df_projects[df_projects.apply(match_criteria, axis=1)]\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_techniques","title":"<code>get_techniques()</code>","text":"<p>Retrieve the registered techniques used to create the objects.</p>"},{"location":"references/#msdb.msdb.DB.get_techniques--returns","title":"Returns","text":"<p>List     It returns the techniques as strings inside a list.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_techniques(self):\n    \"\"\"Retrieve the registered techniques used to create the objects.\n\n    Returns\n    -------\n    List\n        It returns the techniques as strings inside a list.\n    \"\"\"\n\n    techniques_filename = 'object_techniques.txt'\n\n    if not (self.folder_db / techniques_filename).exists():\n        print(f'Please create an empty file called \"object_techniques.txt\" in the the following folder: {self.folder_db}')\n        return\n\n    else:            \n        techniques_df = pd.read_csv(self.folder_db / 'object_techniques.txt', header=None)\n        techniques = sorted(list(techniques_df.values.flatten()), key=str.lower)             \n        return techniques\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_types","title":"<code>get_types()</code>","text":"<p>Retrieve the registered types of objects.</p>"},{"location":"references/#msdb.msdb.DB.get_types--returns","title":"Returns","text":"<p>List     It returns the types as strings inside a list.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_types(self):\n    \"\"\"Retrieve the registered types of objects.\n\n    Returns\n    -------\n    List\n        It returns the types as strings inside a list.\n    \"\"\"\n\n    types_filename = 'object_types.txt'\n\n    if not (self.folder_db / types_filename).exists():\n        print(f'Please create an empty file called \"object_types.txt\" in the the following folder: {self.folder_db}')\n        return\n\n    else:            \n        types_df = pd.read_csv(self.folder_db / 'object_types.txt', header=None)\n        types = sorted(list(types_df.values.flatten()), key=str.lower)              \n        return types\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_users","title":"<code>get_users()</code>","text":"<p>Retrieve the registered users.</p>"},{"location":"references/#msdb.msdb.DB.get_users--returns","title":"Returns","text":"<p>pandas dataframe     It returns the name,surname, and initials of the users inside a three-columns dataframe.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_users(self):\n    \"\"\"Retrieve the registered users.\n\n    Returns\n    -------\n    pandas dataframe\n        It returns the name,surname, and initials of the users inside a three-columns dataframe.\n    \"\"\"\n\n    filename = 'users_info.txt'\n    if (Path(self.folder_db) / filename).exists():\n        df_persons = pd.read_csv(Path(self.folder_db) / filename)\n        return df_persons\n\n    else:\n        print(f'The file {Path(self.folder_db) / filename} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n        return\n</code></pre>"},{"location":"references/#msdb.msdb.DB.get_white_standards","title":"<code>get_white_standards()</code>","text":"<p>Retrieve the registered white standards.</p>"},{"location":"references/#msdb.msdb.DB.get_white_standards--returns","title":"Returns","text":"<p>pandas dataframe     It returns the ID and description of the white standards inside a two-columns dataframe.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_white_standards(self):\n    \"\"\"Retrieve the registered white standards.\n\n    Returns\n    -------\n    pandas dataframe\n        It returns the ID and description of the white standards inside a two-columns dataframe.\n    \"\"\"\n\n    if (Path(self.folder_db) / 'white_standards.txt').exists():\n        df_references = pd.read_csv(Path(self.folder_db) / 'white_standards.txt')\n        return df_references\n\n    else:\n        print(f'The file {Path(self.folder_db) / \"white_standards.txt\"} is not existing. Make sure to create one by running the function \"create_DB\" from the microfading package.')\n        return\n</code></pre>"},{"location":"references/#msdb.msdb.DB.update_objects","title":"<code>update_objects(object_id='all', column=None, new_value=None, widgets=True)</code>","text":"<p>Update the content of the objects_info.csv file.</p>"},{"location":"references/#msdb.msdb.DB.update_objects--parameters","title":"Parameters","text":"<p>object_id : Union[str,list], optional     Select which object_id(s) (i.e. row(s)) should be updated, by default 'all'     If you only wish to update the value for a single object, you can enter the object_id as a string.     If you wish to update the value for several objects, enter the object_ids as strings inside a list     When 'all', it will the update the value for all the objects.</p> Optional[str], optional <p>Select which column (parameter) should be updated, by default None</p> Optional[str], optional <p>New value to be written in the objects_info.csv file, by default None</p> Optional[bool], optional <p>Whether to display widgets to update the objects database file, by default True When False, you will have to pass in arguments for the object_id, the column, and the new_value</p>"},{"location":"references/#msdb.msdb.DB.update_objects--returns","title":"Returns","text":"<p>ipywdigets or string If the parameter \"widgets\" is set to True, it will return several ipywidgets from which you you will be able to update the content of the objects database file. When \"widgets\" is set to False, it will automatically update the content of the file with requested input (object_id, column, and new_value) and it will return a string.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def update_objects(self, object_id:Union[str,list] = 'all', column:Optional[str] = None, new_value:Optional[str] = None,  widgets:Optional[bool] = True):\n    \"\"\"Update the content of the objects_info.csv file.\n\n    Parameters\n    ----------\n    object_id : Union[str,list], optional\n        Select which object_id(s) (i.e. row(s)) should be updated, by default 'all'\n        If you only wish to update the value for a single object, you can enter the object_id as a string.\n        If you wish to update the value for several objects, enter the object_ids as strings inside a list\n        When 'all', it will the update the value for all the objects.\n\n    column : Optional[str], optional\n        Select which column (parameter) should be updated, by default None\n\n    new_value : Optional[str], optional\n        New value to be written in the objects_info.csv file, by default None\n\n    widgets : Optional[bool], optional\n        Whether to display widgets to update the objects database file, by default True\n        When False, you will have to pass in arguments for the object_id, the column, and the new_value\n\n\n    Returns\n    -------\n    ipywdigets or string\n    If the parameter \"widgets\" is set to True, it will return several ipywidgets from which you you will be able to update the content of the objects database file. When \"widgets\" is set to False, it will automatically update the content of the file with requested input (object_id, column, and new_value) and it will return a string.\n\n    \"\"\"  \n\n    if not (Path(self.folder_db) / 'objects_info.csv').exists():\n        print(f'The file \"objects_info.csv\" is missing in your databases folder ({self.folder_db}). Either add the file to the folder or recreate the database.')\n\n        return\n\n    db_objects = self.get_objects().set_index('object_id')\n    object_ids = tuple(db_objects.index)\n\n\n    def update_object_info(object_id:str, parameter:str, new_value:str):\n\n        if object_id not in object_ids:\n            print(f'Error ! The object ID ({object_id}) is not registered in the objects_info.csv file.')\n            return\n\n        db_objects.loc[object_id, parameter] = new_value \n        db_objects.to_csv(Path(self.folder_db) / 'objects_info.csv', index=True)\n\n\n    if widgets:\n\n        wg_object_ids = ipw.Combobox(\n            placeholder='Select an object id',\n            options=object_ids,              \n            description='Object id',\n            ensure_option=False,\n            disabled=False,\n            layout=Layout(width=\"50%\", height=\"30px\"),\n            style=style,\n        )\n\n        wg_object_columns = ipw.Dropdown(\n            placeholder='Select a parameter',\n            options= db_objects.columns,              \n            description='Object parameter',\n            ensure_option=False,\n            disabled=False,\n            layout=Layout(width=\"50%\", height=\"30px\"),\n            style=style,\n        )\n\n        wg_new_value = ipw.Text(\n            description='New value',\n            placeholder='Enter a new value for the selected parameter',\n            layout=Layout(width=\"50%\", height=\"30px\"),\n            style=style,\n\n        )\n\n        wg_updating = ipw.Button(\n            description='Update Object',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Update the object info.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            update_object_info(wg_object_ids.value, wg_object_columns.value, wg_new_value.value)\n\n\n            with button_record_output:\n\n                print(f'A new value \"{wg_new_value.value}\" has been successfully reassigned to the parameter \"{wg_object_columns.value}\" of the object \"{wg_object_ids.value}\".')\n\n        wg_updating.on_click(button_record_pressed)\n\n        display(wg_object_ids,wg_object_columns, wg_new_value)\n        display(ipw.HBox([wg_updating, button_record_output]))\n\n\n    else:        \n\n        if object_id == 'all':\n            object_id = db_objects.index\n        elif isinstance(object_id, str):\n            object_id = [object_id]\n\n\n        for object in object_id:\n\n            if object not in db_objects.index:\n                print(f'Error ! The object ID {object} is not registered in the objects_info.csv file.')\n                return\n\n            db_objects.loc[object, column] = new_value         \n\n\n        db_objects.to_csv(Path(self.folder_db) / 'objects_info.csv', index=True)\n        print('objects_info.csv file successfully updated.')\n</code></pre>"},{"location":"references/#msdb.msdb.DB.update_projects","title":"<code>update_projects(project_id='all', column=None, new_value=None, widgets=True)</code>","text":"<p>Update the content of the projects_info.csv file.</p>"},{"location":"references/#msdb.msdb.DB.update_projects--parameters","title":"Parameters","text":"Union[str,list], optional <p>Select which project_id(s) (i.e. row(s)) should be updated, by default 'all' If you only wish to update the value for a single project, you can enter the project_id as a string. If you wish to update the value for several projects, enter the project_ids as strings inside a list When 'all', it will the update the value for all the projects.</p> Optional[str], optional <p>Select which column (parameter) should be updated, by default None</p> Optional[str], optional <p>New value to be written in the projects_info.csv file, by default None</p> Optional[bool], optional <p>Whether to display widgets to update the projects database file, by default True When False, you will have to pass in arguments for the project_id, the column, and the new_value</p>"},{"location":"references/#msdb.msdb.DB.update_projects--returns","title":"Returns","text":"<p>ipywdigets or string If the parameter \"widgets\" is set to True, it will return several ipywidgets from which you you will be able to update the content of the projects database file. When \"widgets\" is set to False, it will automatically update the content of the file with requested input (project_id, column, and new_value) and it will return a string.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def update_projects(self, project_id:Union[str,list] = 'all', column:Optional[str] = None, new_value:Optional[str] = None, widgets:Optional[bool] = True):\n    \"\"\"Update the content of the projects_info.csv file.\n\n    Parameters\n    ----------\n\n    project_id : Union[str,list], optional\n        Select which project_id(s) (i.e. row(s)) should be updated, by default 'all'\n        If you only wish to update the value for a single project, you can enter the project_id as a string.\n        If you wish to update the value for several projects, enter the project_ids as strings inside a list\n        When 'all', it will the update the value for all the projects.\n\n    column : Optional[str], optional\n        Select which column (parameter) should be updated, by default None\n\n    new_value : Optional[str], optional\n        New value to be written in the projects_info.csv file, by default None\n\n    widgets : Optional[bool], optional\n        Whether to display widgets to update the projects database file, by default True\n        When False, you will have to pass in arguments for the project_id, the column, and the new_value\n\n\n    Returns\n    -------\n    ipywdigets or string\n    If the parameter \"widgets\" is set to True, it will return several ipywidgets from which you you will be able to update the content of the projects database file. When \"widgets\" is set to False, it will automatically update the content of the file with requested input (project_id, column, and new_value) and it will return a string.\n    \"\"\"   \n\n    if not (Path(self.folder_db) / 'projects_info.csv').exists():\n        print(f'The file \"projects_info.csv\" is missing in your databases folder ({self.folder_db}). Either add the file to the folder or recreate the database.')\n\n        return\n\n    db_projects = self.get_projects().set_index('project_id')\n    project_ids = tuple(db_projects.index)\n\n\n    def update_project_info(project_id:str, parameter:str, new_value:str):\n\n        if project_id not in project_ids:\n            print(f'Error ! The project ID ({project_id}) is not registered in the projects_info.csv file.')\n            return\n\n        db_projects.loc[project_id, parameter] = new_value \n        db_projects.to_csv(Path(self.folder_db) / 'projects_info.csv',index=True)\n\n\n    if widgets:\n\n        wg_project_ids = ipw.Combobox(\n            placeholder='Select a project id',\n            options=project_ids,              \n            description='Project id',\n            ensure_option=False,\n            disabled=False,\n            layout=Layout(width=\"50%\", height=\"30px\"),\n            style=style,\n        )\n\n        wg_project_columns = ipw.Dropdown(\n            placeholder='Select a parameter',\n            options= db_projects.columns,              \n            description='Project parameter',\n            ensure_option=False,\n            disabled=False,\n            layout=Layout(width=\"50%\", height=\"30px\"),\n            style=style,\n        )\n\n        wg_new_value = ipw.Text(\n            description='New value',\n            placeholder='Enter a new value for the selected parameter',\n            layout=Layout(width=\"50%\", height=\"30px\"),\n            style=style,\n\n        )\n\n        wg_updating = ipw.Button(\n            description='Update project',\n            disabled=False,\n            button_style='', # 'success', 'info', 'warning', 'danger' or ''\n            tooltip='Click me',            \n        )\n\n        button_record_output = ipw.Output()\n\n        def button_record_pressed(b):\n            \"\"\"\n            Update the project info.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            update_project_info(wg_project_ids.value, wg_project_columns.value, wg_new_value.value)\n\n\n            with button_record_output:\n\n                print(f'A new value \"{wg_new_value.value}\" has been successfully reassigned to the parameter \"{wg_project_columns.value}\" of the project \"{wg_project_ids.value}\".')\n\n        wg_updating.on_click(button_record_pressed)\n\n        display(wg_project_ids,wg_project_columns, wg_new_value)\n        display(ipw.HBox([wg_updating, button_record_output]))\n\n\n\n    else:    \n\n        if project_id == 'all':\n            project_id = db_projects.index\n\n        elif isinstance(project_id, str):\n            project_id = [project_id]\n\n\n        for project in project_id:\n\n            if project not in db_projects.index:\n                print(f'Error ! The project ID {project} is not registered in the projects_info.csv file.')\n                return\n\n            db_projects.loc[project, column] = new_value         \n\n\n        db_projects.to_csv(Path(self.folder_db) / 'projects_info.csv',index=True)\n        print('projects_info.csv file successfully updated.')\n</code></pre>"},{"location":"references/#msdb.msdb.create_db","title":"<code>create_db(db_name=None, path_folder=None, widgets=True)</code>","text":"<p>Create and register new databases. This function creates the database files inside the designated path_folder and it also registers the name of the database inside the db_config.json file.</p> <p>If you only want to register the database, use the <code>register_db_name</code> function.</p>"},{"location":"references/#msdb.msdb.create_db--parameters","title":"Parameters","text":"<p>db_name : Optional[str], optional     Name of the database that will later be used to refer to the database files, by default None</p> Optional[str], optional <p>Absolute path of the folder where the database files should be created, by default None</p> Optional[bool], optional <p>Whether to display widgets to create the database, by default True When False, you will have to pass in arguments for the name_db and path_folder</p>"},{"location":"references/#msdb.msdb.create_db--returns","title":"Returns","text":"<p>ipywdigets or string If the parameter \"widgets\" is set to True, it will return several ipywidgets from which you you will be able to create and register the database. When \"widgets\" is set to False, it will automatically create and register the database and will return a string.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def create_db(db_name:Optional[str] = None, path_folder:Optional[str] = None, widgets:Optional[bool] = True):\n    \"\"\"Create and register new databases. This function creates the database files inside the designated path_folder and it also registers the name of the database inside the db_config.json file.\n\n    If you only want to register the database, use the `register_db_name` function.\n\n    Parameters\n    ----------\n    db_name : Optional[str], optional\n        Name of the database that will later be used to refer to the database files, by default None\n\n    path_folder : Optional[str], optional\n        Absolute path of the folder where the database files should be created, by default None\n\n    widgets : Optional[bool], optional\n        Whether to display widgets to create the database, by default True\n        When False, you will have to pass in arguments for the name_db and path_folder\n\n\n    Returns\n    -------\n    ipywdigets or string\n    If the parameter \"widgets\" is set to True, it will return several ipywidgets from which you you will be able to create and register the database. When \"widgets\" is set to False, it will automatically create and register the database and will return a string.\n    \"\"\"\n\n    # Define the python widgets\n\n    wg_name_db = ipw.Text(\n        description='Database Name',\n        placeholder='Enter a name (without space)',\n        value=db_name,\n        layout=Layout(width=\"50%\", height=\"30px\"),\n        style=style\n    )\n\n    wg_path_folder = ipw.Text(\n        description='Folder location',\n        value=path_folder,\n        layout=Layout(width=\"50%\", height=\"30px\"),\n        style=style\n    )\n\n    recording = ipw.Button(\n        description='Create databases',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )        \n\n    button_record_output = ipw.Output()\n\n    # Define function to register the database in the config file\n    def register_db(name_db, path_folder):\n\n        with open(config_file, \"r\") as f:\n            config = json.load(f)\n\n        # Existing databases\n        databases = config[\"databases\"]\n\n        # Update config with user data\n        databases[name_db] = {'path_folder':path_folder}\n        config['databases'] = databases            \n\n        # Save the updated config back to the JSON file\n        with open(config_file, \"w\") as f:\n            json.dump(config, f, indent=4)\n\n    # Define function to create the database files\n    def create_db_files(path_folder):\n\n        # Convert the path_folder to a Path object\n        path_folder = Path(path_folder)\n\n        # Create the project info file\n        db_project = pd.DataFrame(columns=['project_id','institution','start_date','end_date','project_leader','co-researchers','keywords', 'methods'])            \n        db_project.to_csv(path_folder / 'projects_info.csv', index=False)\n\n        # Create the object info file\n        db_object = pd.DataFrame(columns=['object_id','object_category','object_type','object_technique','object_title','object_name','object_creator','object_date','object_owner','object_material','support','colorants_name','binding','ratio','thickness_um','color','status','project_id', 'object_comment'])\n        db_object.to_csv(path_folder / 'objects_info.csv', index=False)\n\n        # Create several text files\n        with open(path_folder / 'analytical_methods.txt', 'w') as f:                \n            f.write(\"Macro-XRF\\n\")\n            f.write(\"Raman\\n\")\n            f.write(\"XRD\\n\")\n            f.write(\"XRF\\n\")\n\n        with open(path_folder / 'devices.txt', 'w') as f:\n            f.write('Id,name,description,process_function\\n')\n\n        with open(path_folder / 'white_standards.txt', 'w') as f:\n            f.write('ID,description\\n')            \n\n        with open(path_folder / 'object_creators.txt', 'w') as f:\n            f.write('surname,name')\n\n        with open(path_folder / 'object_techniques.txt', 'w') as f:\n            f.write(\"China ink\\n\")\n            f.write(\"acrylinc\\n\")\n            f.write(\"aquatinte\\n\")\n            f.write(\"black ink\\n\")\n            f.write(\"black pencil\\n\")\n            f.write(\"chalk\\n\")\n            f.write(\"charcoal\\n\")\n            f.write(\"monotypie\\n\")\n            f.write(\"dye\\n\")\n            f.write(\"felt-tip ink\\n\")\n            f.write(\"frescoe\\n\")\n            f.write(\"gouache\\n\")\n            f.write(\"ink\\n\")\n            f.write(\"linoleum print\\n\")\n            f.write(\"lithograh\\n\")\n            f.write(\"mezzotinte\\n\")\n            f.write(\"oil paint\\n\")\n            f.write(\"pastel\\n\")\n            f.write(\"tin-glazed\\n\")\n            f.write(\"watercolor\\n\")\n            f.write(\"wood block print\\n\")        \n\n        with open(path_folder / 'object_types.txt', 'w') as f:            \n            f.write(\"banknote\\n\")\n            f.write(\"book\\n\")\n            f.write(\"BWS\\n\")       \n            f.write(\"ceramic\\n\")\n            f.write(\"colorchart\\n\")\n            f.write(\"drawing\\n\")\n            f.write(\"notebook\\n\")\n            f.write(\"paint-out\\n\")\n            f.write(\"painting\\n\")\n            f.write(\"photograph\\n\")\n            f.write(\"print\\n\")\n            f.write(\"sculpture\\n\")\n            f.write(\"seals\\n\")\n            f.write(\"spectralon\\n\")\n            f.write(\"tapistry\\n\")\n            f.write(\"textile\\n\")\n            f.write(\"wallpainting\\n\")\n\n        with open(path_folder / 'object_materials.txt', 'w') as f:\n            f.write(\"blue paper\\n\")\n            f.write(\"canvas\\n\")\n            f.write(\"cardboard\\n\")\n            f.write(\"ceramic\\n\")\n            f.write(\"coloured paper\\n\")\n            f.write(\"cotton\\n\")\n            f.write(\"Japanese paper\\n\")\n            f.write(\"none\\n\")\n            f.write(\"opacity chart\\n\")\n            f.write(\"paper\\n\")\n            f.write(\"parchment\\n\")\n            f.write(\"rag paper\\n\")\n            f.write(\"stone\\n\")\n            f.write(\"transparent paper\\n\")\n            f.write(\"wax\\n\")\n            f.write(\"wood\\n\")\n            f.write(\"woodpulp paper\\n\")\n            f.write(\"wool\\n\")            \n\n        with open(path_folder / 'institutions.txt', 'w') as f:\n            f.write('name,acronym')\n\n        with open(path_folder / 'users_info.txt', 'w') as f:\n            f.write('name,surname,initials')\n\n    if widgets:\n        # Define the function when pressing the button\n        def button_record_pressed(b):\n            \"\"\"\n            Create the databases.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)           \n\n            # Run the functions previously defined\n            register_db(name_db=wg_name_db.value, path_folder=wg_path_folder.value)\n            create_db_files(path_folder=wg_path_folder.value)    \n\n            # Print output messages\n            with button_record_output:\n                print(f'The database {wg_name_db.value} was created and recorded in the db_config.json file.')\n                print(f'The database files have been created in the following folder: {wg_path_folder.value}')\n\n\n        recording.on_click(button_record_pressed)\n\n        display(ipw.VBox([wg_name_db,wg_path_folder]))\n        display(ipw.HBox([recording, button_record_output]))\n\n    else:\n\n        # Stop the script if name_db is missing\n        if db_name == None:\n            print('Please enter a valid name_db value.')\n            return\n\n        # Stop the script if path_folder is missing\n        if path_folder == None:\n            print('Please enter a valid path_folder value.')\n            return\n\n        # Stop the script if the path_folder value is not valid\n        if not Path(path_folder).exists():\n            print('The path_folder that you entered is not valid. Make sure that the folder where you want to save your databases has been created.')\n            return\n\n        # Run the functions previously defined\n        register_db(name_db=db_name, path_folder=path_folder)\n        create_db_files(path_folder=path_folder) \n\n        # Print output messages\n        print(f'The database {db_name} was created and recorded in the db_config.json file.')\n        print(f'The database files have been created in the following folder: {path_folder}')\n</code></pre>"},{"location":"references/#msdb.msdb.delete_db","title":"<code>delete_db(db_name=None)</code>","text":"<p>Remove a database from the db_config.json file. It does not delete the database files, you will have to manually delete these files.</p>"},{"location":"references/#msdb.msdb.delete_db--parameters","title":"Parameters","text":"<p>db_name : Optional[str], optional     Name of the database that you wish to delete, by default None</p>"},{"location":"references/#msdb.msdb.delete_db--returns","title":"Returns","text":"<p>ipywdigets It returns ipywidget objects from which you can select the name of the database to be deleted and confirm its removal from the db_config.json file.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def delete_db(db_name:Optional[str] = None):\n    \"\"\"Remove a database from the db_config.json file. It does not delete the database files, you will have to manually delete these files.\n\n\n    Parameters\n    ----------\n    db_name : Optional[str], optional\n        Name of the database that you wish to delete, by default None\n\n\n    Returns\n    -------\n    ipywdigets\n    It returns ipywidget objects from which you can select the name of the database to be deleted and confirm its removal from the db_config.json file.\n    \"\"\"\n\n    existing_db_names = get_db_names()\n\n    if isinstance(db_name, str) and db_name not in existing_db_names:\n\n        print(f'The db_name you entered ({db_name}) is not valid. The db_name parameter has been reassigned to None to allow you to select a database name from the ipywidget dropdown.')\n\n        db_name = None\n\n\n    wg_name_db = ipw.Dropdown(\n        description = 'DB name',\n        value = db_name,\n        options = get_db_names(),\n        style = style,\n        layout=Layout(width=\"20%\", height=\"30px\"),\n    )\n\n    config_file = Path(__file__).parent / 'db_config.json'\n\n    recording = ipw.Button(\n        description='Delete DB',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )\n\n    button_record_output = ipw.Output()\n\n    def button_record_pressed(b):\n        \"\"\"\n        Delete the database info in the db_config.json file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        with open(config_file, \"r\") as f:\n            config = json.load(f)\n\n        # Existing databases\n        databases = config[\"databases\"]\n\n        # Delete the database\n        del databases[wg_name_db.value]        \n        config['databases'] = databases            \n\n        # Save the updated config back to the JSON file\n        with open(config_file, \"w\") as f:\n            json.dump(config, f, indent=4)\n\n\n        with button_record_output:\n            print(f'Database info ({wg_name_db.value}) removed from the db_config.json file.')\n\n    recording.on_click(button_record_pressed)\n\n    display(ipw.VBox([wg_name_db]))\n    display(ipw.HBox([recording, button_record_output]))\n</code></pre>"},{"location":"references/#msdb.msdb.get_config_file","title":"<code>get_config_file()</code>","text":"<p>Retrieve the content of the db_config.json file, which contains information related to the databases that you created. The name and the folder path of each registered databases is stored in this json file.    </p>"},{"location":"references/#msdb.msdb.get_config_file--returns","title":"Returns","text":"<p>A dictionary It returns the content of the db_config.json file as a python dictionary object.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_config_file():\n    \"\"\"Retrieve the content of the db_config.json file, which contains information related to the databases that you created. The name and the folder path of each registered databases is stored in this json file.    \n\n\n    Returns\n    -------\n    A dictionary\n    It returns the content of the db_config.json file as a python dictionary object.\n    \"\"\"\n\n    with open(config_file, 'r') as file:\n            config = json.load(file)\n            return config\n</code></pre>"},{"location":"references/#msdb.msdb.get_db_names","title":"<code>get_db_names()</code>","text":"<p>Retrieve the names of the registered databases.</p> <p>No arguments is required.</p>"},{"location":"references/#msdb.msdb.get_db_names--returns","title":"Returns","text":"<p>List It returns the names of the registered databases as string inside a list.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def get_db_names():\n    \"\"\"Retrieve the names of the registered databases.\n\n    No arguments is required.\n\n    Returns\n    -------\n    List\n    It returns the names of the registered databases as string inside a list.\n    \"\"\"\n\n    config_file = Path(__file__).parent / 'db_config.json'\n\n    with open(config_file, 'r') as file:\n            config = json.load(file)\n            db_names = list(config['databases'].keys())\n            if len(db_names) &gt; 0:\n                return db_names\n            else:\n                print('No databases have been registered.')\n                return None  \n</code></pre>"},{"location":"references/#msdb.msdb.register_db_name","title":"<code>register_db_name(db_name=None, db_path=None, widgets=True)</code>","text":"<p>Register the name and the folder location of databases in the db_config.json file. Use this function when you already have the database files on your computer but not registered inside the msdb package.</p>"},{"location":"references/#msdb.msdb.register_db_name--parameters","title":"Parameters","text":"Optional[str], optional <p>Name of the database that you wish to register, by default None</p> Optional[str], optional <p>The path of folder where the where the databases files are located, by default None</p> Optional[bool], optional <p>Whether to display widgets to register the database, by default True When False, you will have to pass in arguments for the db_name and db_path</p>"},{"location":"references/#msdb.msdb.register_db_name--returns","title":"Returns","text":"<p>ipywdigets or string If the parameter \"widgets\" is set to True, it will return several ipywidgets from which you you will be able to register the database. When \"widgets\" is set to False, it will automatically register the database and will return a string.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def register_db_name(db_name:Optional[str] = None, db_path:Optional[str] = None, widgets:Optional[bool] = True):\n    \"\"\"Register the name and the folder location of databases in the db_config.json file. Use this function when you already have the database files on your computer but not registered inside the msdb package.\n\n    Parameters\n    ----------\n\n    db_name : Optional[str], optional\n        Name of the database that you wish to register, by default None\n\n    db_path : Optional[str], optional\n        The path of folder where the where the databases files are located, by default None\n\n    widgets : Optional[bool], optional\n        Whether to display widgets to register the database, by default True\n        When False, you will have to pass in arguments for the db_name and db_path\n\n\n    Returns\n    -------\n    ipywdigets or string\n    If the parameter \"widgets\" is set to True, it will return several ipywidgets from which you you will be able to register the database. When \"widgets\" is set to False, it will automatically register the database and will return a string.\n    \"\"\"\n\n    wg_path_folder = ipw.Text(\n        description = 'Path folder',\n        placeholder = 'Location of the databases folder on your computer',\n        value = db_path,\n        style = style, \n        layout=Layout(width=\"50%\", height=\"30px\"),\n    )\n\n    wg_name_db = ipw.Text(\n        description = 'DB name',\n        placeholder = \"Enter a db name\",\n        value = db_name,        \n        style = style,\n        layout=Layout(width=\"20%\", height=\"30px\"),\n    )        \n\n    recording = ipw.Button(\n        description='Save',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )\n\n    button_record_output = ipw.Output()\n\n\n    def add_new_db(name,path):\n        # check whether the path folder is valid\n        if not Path(path).exists():\n            with button_record_output:\n                print(f'The path you entered {path} is not valid. Process aborted !')\n            return 'invalid path'\n\n        # Retrieve the config info\n        config = get_config_file()\n\n        # Existing databases\n        databases = config[\"databases\"]\n\n        # Update config with user data\n        databases[name] = {'path_folder': path}\n        config['databases'] = databases\n\n        # Save the updated config back to the JSON file\n        with open(config_file, \"w\") as f:\n            json.dump(config, f, indent=4)\n\n\n    def button_record_pressed(b):\n        \"\"\"\n        Save the databases info in the db_config.json file.\n        \"\"\"\n\n        button_record_output.clear_output(wait=True)\n\n        function = add_new_db(wg_name_db.value, wg_path_folder.value)\n\n        if function != \"invalid path\":\n            with button_record_output:\n                print(f'Database info ({wg_name_db.value}) recorded in the db_config.json file.')\n\n\n    if widgets:\n        recording.on_click(button_record_pressed)\n\n        display(ipw.VBox([wg_name_db, wg_path_folder]))\n        display(ipw.HBox([recording, button_record_output]))\n\n    else:\n        return add_new_db(name=db_name, path=db_path)\n</code></pre>"},{"location":"references/#msdb.msdb.update_db_folder","title":"<code>update_db_folder(db_name=None, path_folder=None, widgets=True)</code>","text":"<p>Modify the path_folder of an existing database registered in the db_config.json file. Select the database name and enter a new path_folder.</p>"},{"location":"references/#msdb.msdb.update_db_folder--parameters","title":"Parameters","text":"<p>db_name : Optional[str], optional     Name of the database for which the info will change, by default None</p> Optional[str], optional <p>Location of the databases folder on your computer, by default None</p> Optional[bool], optional <p>Whether to use the ipywidgets, by default True When False, it automatically modify the database info based on the given parameter values.</p>"},{"location":"references/#msdb.msdb.update_db_folder--returns","title":"Returns","text":"<p>ipywdigets or string If the parameter \"widgets\" is set to True, it will return several ipywidgets from which you you will be able to update the path folder of the database files. When \"widgets\" is set to False, it will automatically update the folder and will return a string.</p> Source code in <code>src/msdb/msdb.py</code> <pre><code>def update_db_folder(db_name:Optional[str] = None, path_folder:Optional[str] = None, widgets:Optional[bool] = True):\n    \"\"\"Modify the path_folder of an existing database registered in the db_config.json file. Select the database name and enter a new path_folder.\n\n    Parameters\n    ----------\n    db_name : Optional[str], optional\n        Name of the database for which the info will change, by default None\n\n    path_folder : Optional[str], optional\n        Location of the databases folder on your computer, by default None\n\n    wdigets : Optional[bool], optional\n        Whether to use the ipywidgets, by default True\n        When False, it automatically modify the database info based on the given parameter values.\n\n    Returns\n    -------\n    ipywdigets or string\n    If the parameter \"widgets\" is set to True, it will return several ipywidgets from which you you will be able to update the path folder of the database files. When \"widgets\" is set to False, it will automatically update the folder and will return a string.\n    \"\"\"\n\n    existing_db_names = get_config_file()['databases']\n\n    if len(existing_db_names) == 0:\n        db_names = []\n    else:\n        db_names = list(existing_db_names.keys())\n\n    wg_path_folder = ipw.Text(\n        description = 'Path folder',\n        placeholder = 'Location of the databases folder on your computer',\n        value = path_folder,\n        style = style, \n        layout=Layout(width=\"50%\", height=\"30px\"),\n    )\n\n    wg_name_db = ipw.Combobox(\n        description = 'DB name',\n        placeholder = \"Enter a db name\",\n        value = db_name,\n        options = db_names,\n        style = style,\n        layout=Layout(width=\"20%\", height=\"30px\"),\n    )        \n\n    recording = ipw.Button(\n        description='Save',\n        disabled=False,\n        button_style='', # 'success', 'info', 'warning', 'danger' or ''\n        tooltip='Click me',            \n    )\n\n    button_record_output = ipw.Output()\n\n\n    if widgets:\n\n        def button_record_pressed(b):\n            \"\"\"\n            Save the databases info in the db_config.json file.\n            \"\"\"\n\n            button_record_output.clear_output(wait=True)\n\n            # check whether the path folder is valid\n            if not Path(wg_path_folder.value).exists(): \n                with button_record_output:\n                    print(f'The path you entered ({wg_path_folder.value}) is not valid. Make sure it exists. Process aborted !')\n                return\n\n            # open the config file\n            with open(config_file, \"r\") as f:\n                config = json.load(f)\n\n            # Existing databases\n            databases = config[\"databases\"]\n\n            # Update config with user data\n            databases[wg_name_db.value] = {'path_folder':wg_path_folder.value}\n            config['databases'] = databases            \n\n            # Save the updated config back to the JSON file\n            with open(config_file, \"w\") as f:\n                json.dump(config, f, indent=4)\n\n            with button_record_output:\n                print(f'The new path_folder ({wg_path_folder.value}) has been successfully recorded in the db_config.json file.')\n\n\n        recording.on_click(button_record_pressed)\n\n        display(ipw.VBox([wg_name_db, wg_path_folder]))\n        display(ipw.HBox([recording, button_record_output]))\n\n    else:\n\n        # check whether the path folder is valid\n        if not Path(wg_path_folder.value).exists():            \n            print(f'The path you entered ({wg_path_folder.value}) is not valid. Make sure it exists. Process aborted !')\n            return\n\n        with open(config_file, \"r\") as f:\n            config = json.load(f)\n\n        # Existing databases\n        databases = config[\"databases\"]\n\n        # Update config with user data\n        databases[wg_name_db.value] = {'path_folder':wg_path_folder.value}\n        config['databases'] = databases\n\n        # Save the updated config back to the JSON file\n        with open(config_file, \"w\") as f:\n            json.dump(config, f, indent=4)\n</code></pre>"}]}